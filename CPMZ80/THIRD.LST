ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 1.
Hexidecimal [16-Bits]



                              1 ;------------------------------------------------------------------------
                              2 ;
                              3 ; File:	header.z80
                              4 ;
                              5 ; Description:
                              6 ;
                              7 ;	This file contains the variables and routines needed to
                              8 ;	implement the Stupid VM used by the Z80 version of THIRD.
                              9 ;	This VM is implemented as subroutine calls to the routines that
                             10 ;	implement each THIRD Stupid operation. The Stupid operations
                             11 ;	use a limited-depth stack-based model as a basis from which
                             12 ;	to build the THIRD environment. The actual routines implemented
                             13 ;	here are precisely those needed to implement the THIRD
                             14 ;	environment; i.e., no operations are implemented that are
                             15 ;	not actually used by THIRD.
                             16 ;
                             17 ; Revisions:
                             18 ;
                             19 ;	09/10/99 RLI - Initial version for 68HC908GP20 on the AVNET
                             20 ;		       evaluation module.
                             21 ;	09/14/99 RLI - Moved most of the stuff to trailer.as6808
                             22 ;	04/19/01 RLI - Liberated and made into Z80 version. This is
                             23 ;	               currently targetted to run under CP/M.
                             24 ;	05/11/01 RLI - Updated to include changes made while debugging
                             25 ;	               the PDP-8 version. Addition of SWAPs and deletion
                             26 ;	               of SYSCALL (QDL still knows about SYSCALL, but the
                             27 ;	               console I/O is now done via MSQE, MSE, MSQK, and
                             28 ;	               MSK; exit is done via MSBYE).
                             29 
                             30 	.area CODE (ABS)
   0100                      31 	.org 0x0100
                             32 
                             33 ;---	CP/M enters here
                             34 
   0100                      35 Reset:
                             36 
                             37 ;	Initialize the THIRD virtual machine: we need to set up the
                             38 ;	stack pointers and IP.
                             39 
   0100 21 C7 01             40 	ld hl,#ReturnStackBottom
   0103 22 43 01             41 	ld (StupidRP),hl
                             42 
   0106 21 45 01             43 	ld hl,#MathStackBottom
   0109 22 41 01             44 	ld (StupidMP),hl
                             45 
   010C 21 5C 1A             46 	ld hl,#W1000_PFA
   010F 22 3F 01             47 	ld (StupidIP),hl
                             48 
                             49 ;	Figure out the BIOS jump table addresses for the entries we need.
                             50 
   0112 2A 01 00             51 	ld hl,(1)		; Get address of warm boot vector.
                             52 
   0115 23                   53 	inc hl			; Form address of console status vector.
   0116 23                   54 	inc hl
   0117 23                   55 	inc hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 2.
Hexidecimal [16-Bits]



   0118 22 2D 01             56 	ld (ConSt+1),hl		; Save it.
                             57 
   011B 23                   58 	inc hl			; Form address of console input vector.
   011C 23                   59 	inc hl
   011D 23                   60 	inc hl
   011E 22 30 01             61 	ld (ConIn+1),hl		; Save it.
                             62 
   0121 23                   63 	inc hl			; Form address of console output vector.
   0122 23                   64 	inc hl
   0123 23                   65 	inc hl
   0124 22 33 01             66 	ld (ConOut+1),hl	; Save it.
                             67 
                             68 ;	We'll use the default CP/M stack at 0x0100. It's plenty deep
                             69 ;	for the Stupid VM, which only gets one call deep.
                             70 
   0127 C3 78 02             71 	jp Next
                             72 
                             73 ;Checks:
                             74 ;	ld hl,(StupidIP)
                             75 ;	ld de,(Breakpoint)
                             76 ;	ld a,l
                             77 ;	cp a,e
                             78 ;	jp nz,Next
                             79 ;	ld a,h
                             80 ;	cp a,d
                             81 ;	jp nz,Next
                             82 ;	rst 0x38
                             83 ;	jp Next
                             84 
   012A                      85 Breakpoint:
   012A 16 1A                86 	.word 0x1a16
                             87 
                             88 ;	Vectors to get to the BIOS
                             89 
   012C C3 00 00             90 ConSt:	jp 0			; Console status
   012F C3 00 00             91 ConIn:	jp 0			; Get character from console
   0132 C3 00 00             92 ConOut:	jp 0			; Put character to console
                             93 
                             94 ;---	Stupid VM Registers
                             95 
                     0001    96 StupidHiOffset = 1		; Intel byte order
                     0000    97 StupidLoOffset = 0
                             98 
                             99 ;	The Stupid math stack consists of four cells numbered 0
                            100 ;	through 3.
                            101 
   0135                     102 StupidR0:
   0135 00 00               103 	.word 0
                     0136   104 StupidR0Hi = StupidR0 + StupidHiOffset
                     0135   105 StupidR0Lo = StupidR0 + StupidLoOffset
                            106 
   0137                     107 StupidR1:
   0137 00 00               108 	.word 0
                     0138   109 StupidR1Hi = StupidR1 + StupidHiOffset
                     0137   110 StupidR1Lo = StupidR1 + StupidLoOffset
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 3.
Hexidecimal [16-Bits]



                            111 
   0139                     112 StupidR2:
   0139 00 00               113 	.word 0
                     013A   114 StupidR2Hi = StupidR2 + StupidHiOffset
                     0139   115 StupidR2Lo = StupidR2 + StupidLoOffset
                            116 
   013B                     117 StupidR3:
   013B 00 00               118 	.word 0
                     013C   119 StupidR3Hi = StupidR3 + StupidHiOffset
                     013B   120 StupidR3Lo = StupidR3 + StupidLoOffset
                            121 
                            122 ;	The Stupid global registers.
                            123 ;
                            124 ;	Many of the Stupid global registers are pseudo-registers
                            125 ;	implemented by stuffing in constants as the Stupid VM fetch
                            126 ;	results for that registers. Here are the globals that
                            127 ;	actually require storage behind them.
                            128 
   013D                     129 StupidCFA:
   013D 00 00               130 	.word 0
                     013E   131 StupidCFAHi = StupidCFA + StupidHiOffset
                     013D   132 StupidCFALo = StupidCFA + StupidLoOffset
                            133 
   013F                     134 StupidIP:
   013F 00 00               135 	.word 0
                     0140   136 StupidIPHi = StupidIP + StupidHiOffset
                     013F   137 StupidIPLo = StupidIP + StupidLoOffset
                            138 
   0141                     139 StupidMP:
   0141 00 00               140 	.word 0
                     0142   141 StupidMPHi = StupidMP + StupidHiOffset
                     0141   142 StupidMPLo = StupidMP + StupidLoOffset
                            143 
   0143                     144 StupidRP:
   0143 00 00               145 	.word 0
                     0144   146 StupidRPHi = StupidRP + StupidHiOffset
                     0143   147 StupidRPLo = StupidRP + StupidLoOffset
                            148 
                            149 ;	We need space for the THIRD stacks. We're going to grow the
                            150 ;	math stack up and the return stack down so that they can 
                            151 ;	dynamically share a block of space.
                            152 
   0145                     153 MathStackBottom:
   0145                     154 	.blkb 130		; Space for 64 cells
   01C7                     155 ReturnStackBottom:
                            156 
                            157 ;	StupidInitialDP is the address of the first unused RAM location. The
                            158 ;	space allocated for new user-created words begins here.
                            159 
   01C7                     160 StupidInitialDP:
   01C7 0D 20               161 	.word RamEnd
                            162 
                            163 ;	StupidInitialLAST is the address of the CFA of the last definition in
                            164 ;	the dictionary. We start by pointing it at (LASTWORD), which is given
                            165 ;	the fixed number 1001.
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 4.
Hexidecimal [16-Bits]



                            166 
   01C9                     167 StupidInitialLAST:
   01C9 09 20               168 	.word W1001_CFA
                            169 
                            170 ;	StupidNEXT contains a pointer to the code which knows how to enter
                            171 ;	the next THIRD word.
                            172 
   01CB                     173 StupidNEXT:
   01CB 78 02               174 	.word Next
                            175 ;	.word Checks
                            176 
                            177 ;	StupidInitialRP contains the address of the bottom of the return
                            178 ;	stack.
                            179 
   01CD                     180 StupidInitialRP:
   01CD C7 01               181 	.word ReturnStackBottom
                            182 
                            183 ;	StupidInitialMP contains the address of the bottom of the math
                            184 ;	stack.
                            185 
   01CF                     186 StupidInitialMP:
   01CF 45 01               187 	.word MathStackBottom
                            188 
                            189 ;---	StupidElseGo0		Branch if R0 = 0
                            190 ;
                            191 ;	The call is followed by a word containing the branch address.
                            192 ;	If R0 is not 0, this word must be skipped. Otherwise, the word
                            193 ;	is used as a branch address.
                            194 
   01D1                     195 StupidElseGo0:
   01D1 E1                  196 	pop hl			; Get address of branch address
                            197 
   01D2 3A 35 01            198 	ld a,(StupidR0Lo)	; a <- R0.Lo | R0.Hi
   01D5 4F                  199 	ld c,a
   01D6 3A 36 01            200 	ld a,(StupidR0Hi)
   01D9 B1                  201 	or a,c
   01DA 28 03               202 	jr z,StupidElseGoBranch ; If we need to branch, go
                            203 
                            204 ;	We don't need to branch. This is equivalent to branching to the
                            205 ;	word following the word we pulled. Add 2 to the return address
                            206 ;	and jump to it.
                            207 
   01DC 23                  208 	inc hl
   01DD 23                  209 	inc hl
   01DE E9                  210 	jp (hl)
                            211 
   01DF                     212 StupidElseGoBranch:
                            213 
                            214 ;	We need to branch to the address pointed to by hl.
                            215 
   01DF 5E                  216 	ld e,(hl)
   01E0 23                  217 	inc hl
   01E1 56                  218 	ld d,(hl)
   01E2 D5                  219 	push de
   01E3 C9                  220 	ret
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 5.
Hexidecimal [16-Bits]



                            221 
                            222 ;---	StupidLessGo1		Branch if r0<r1
                            223 ;
                            224 ;	The call to StupidLessGo is followed by a word containing the
                            225 ;	address to which the branch is to be made. If the branch is
                            226 ;	not made, that word must be skipped.
                            227 
   01E4                     228 StupidLessGo1:
   01E4 2A 37 01            229 	ld hl,(StupidR1)
   01E7 3A 36 01            230 	ld a,(StupidR0Hi)
   01EA 94                  231 	sub a,h
   01EB 38 0A               232 	jr c,StupidLessGo1Branch
                            233 
   01ED 3A 35 01            234 	ld a,(StupidR0Lo)
   01F0 95                  235 	sub a,l
   01F1 38 04               236 	jr c,StupidLessGo1Branch
                            237 
                            238 ;	We don't need to branch, but we _do_ need to skip the branch
                            239 ;	address.
                            240 
   01F3 E1                  241 	pop hl
   01F4 23                  242 	inc hl
   01F5 23                  243 	inc hl
   01F6 E9                  244 	jp (hl)
                            245 
   01F7                     246 StupidLessGo1Branch:
                            247 
                            248 ;	We need to branch. Pull the address of the branch offset off
                            249 ;	the stack and fetch the branch offset.
                            250 
   01F7 E1                  251 	pop hl
   01F8 5E                  252 	ld e,(hl)
   01F9 23                  253 	inc hl
   01FA 56                  254 	ld d,(hl)
                            255 
                            256 ;	Branch to the branch address.
                            257 
   01FB EB                  258 	ex de,hl
   01FC E9                  259 	jp (hl)
                            260 
                            261 ;---	StupidShiftLeft1	R0 <- R0 << R1
                            262 
   01FD                     263 StupidShiftLeft1:
   01FD 3A 37 01            264 	ld a,(StupidR1)
   0200 B7                  265 	or a,a
   0201 28 0C               266 	jr z,StupidShiftLeft1Exit ; Exit if nothing to do (count is 0)
                            267 
   0203 47                  268 	ld b,a
   0204 2A 35 01            269 	ld hl,(StupidR0)
                            270 
   0207                     271 StupidShiftLeft1Loop:
   0207 5D                  272 	ld e,l
   0208 54                  273 	ld d,h
   0209 19                  274 	add hl,de
   020A 10 FB               275 	djnz StupidShiftLeft1Loop
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 6.
Hexidecimal [16-Bits]



   020C 22 35 01            276 	ld (StupidR0),hl
                            277 
   020F                     278 StupidShiftLeft1Exit:
   020F C9                  279 	ret
                            280 
                            281 ;---	StupidShiftRight1	R0 <- R0 >> R1
                            282 
   0210                     283 StupidShiftRight1:
   0210 3A 37 01            284 	ld a,(StupidR1)
   0213 B7                  285 	or a,a
   0214 28 10               286 	jr z,StupidShiftRight1Exit ; Exit if nothing to do
                            287 
   0216 47                  288 	ld b,a
   0217 2A 35 01            289 	ld hl,(StupidR0)
                            290 
   021A                     291 StupidShiftRight1Loop:
   021A 7C                  292 	ld a,h
   021B B7                  293 	or a,a			; Clear carry
   021C 1F                  294 	rra
   021D 67                  295 	ld h,a
                            296 
   021E 7D                  297 	ld a,l
   021F 1F                  298 	rra
   0220 6F                  299 	ld l,a
                            300 
   0221 10 F7               301 	djnz StupidShiftRight1Loop
   0223 22 35 01            302 	ld (StupidR0),hl
                            303 
   0226                     304 StupidShiftRight1Exit:
   0226 C9                  305 	ret
                            306 
                            307 
                            308 ;---	MSQK			M: ( -> Flag )
                            309 ;				R: ( -> )
                            310 ;
                            311 ;	Machine-dependent ?KEY handler. Checks console input status to
                            312 ;	see if a character is available; if a character is available
                            313 ;	from the console, flag is non-zero. Otherwise, flag is zero.
                            314 
   0227 CD 2C 01            315 MSQK:	call ConSt		; Get console status.
                            316 
   022A 2A 41 01            317 	ld hl,(StupidMP)	; Store it on the math stack.
   022D 23                  318 	inc hl			; Advance past current TOS
   022E 23                  319 	inc hl
   022F 22 41 01            320 	ld (StupidMP),hl
   0232 77                  321 	ld (hl),a
   0233 23                  322 	inc hl
   0234 77                  323 	ld (hl),a
                            324 
   0235 C3 78 02            325 	jp Next
                            326 
                            327 ;---	MSK			M: ( -> Character )
                            328 ;				R: ( -> )
                            329 ;
                            330 ;	Machine-dependent (KEY) handler. Retrieves a character from the
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 7.
Hexidecimal [16-Bits]



                            331 ;	console, returning it on the math stack. Because we're using the
                            332 ;	CP/M BIOS, the system will wait for one to become available (which
                            333 ;	makes the waiting done by KEY redundant, although harmless).
                            334 
   0238 CD 2F 01            335 MSK:	call ConIn		; Get character from console.
                            336 
   023B 2A 41 01            337 	ld hl,(StupidMP)	; Store it on the math stack.
   023E 23                  338 	inc hl			; Advance past current TOS
   023F 23                  339 	inc hl
   0240 22 41 01            340 	ld (StupidMP),hl
   0243 77                  341 	ld (hl),a
   0244 23                  342 	inc hl
   0245 AF                  343 	xor a,a			; Clear high byte
   0246 77                  344 	ld (hl),a
                            345 
   0247 C3 78 02            346 	jp Next
                            347 
                            348 ;---	MSQE			M: ( -> Flag
                            349 ;				R: ( -> )
                            350 ;
                            351 ;	Machine-dependent ?EMIT handler. We can't check console output
                            352 ;	status using the CP/M BIOS, so we always report the console is
                            353 ;	ready to print; that is, we always push a non-zero value on the
                            354 ;	math stack.
                            355 
   024A 3E 01               356 MSQE:	ld a,#1			; Some non-zero value.
                            357 
   024C 2A 41 01            358 	ld hl,(StupidMP)	; Store it on the math stack.
   024F 23                  359 	inc hl			; Advance past current TOS
   0250 23                  360 	inc hl
   0251 22 41 01            361 	ld (StupidMP),hl
   0254 77                  362 	ld (hl),a
   0255 23                  363 	inc hl
   0256 77                  364 	ld (hl),a
                            365 
   0257 C3 78 02            366 	jp Next
                            367 
                            368 ;---	MSE			M: ( Character -> )
                            369 ;				R: ( -> )
                            370 ;
                            371 ;	Machine-dependent (EMIT) handler. Fetches a character from the
                            372 ;	top of the stack (dropping it from the stack) and displays it on
                            373 ;	the console. The CP/M BIOS waits for the console to become ready
                            374 ;	to transmit before sending the character.
                            375 ;
                            376 ;	Machine-dependent (EMIT) handler.
                            377 
   025A 2A 41 01            378 MSE:	ld hl,(StupidMP)	; Fetch the character
   025D 4E                  379 	ld c,(hl)
                            380 
   025E 2B                  381 	dec hl			; Drop it from the math stack
   025F 2B                  382 	dec hl
   0260 22 41 01            383 	ld (StupidMP),hl
                            384 
   0263 CD 32 01            385 	call ConOut		; Print it
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 8.
Hexidecimal [16-Bits]



                            386 
   0266 C3 78 02            387 	jp Next
                            388 
                            389 
                            390 ;---	MSBYE
                            391 ;
                            392 ;	Machine-dependent BYE handler.
                            393 
   0269 C3 00 00            394 MSBYE:	jp 0
                            395 
                            396 ;---	StupidRamBase isn't really needed for a RAM-based system.
                            397 
   026C                     398 StupidRamBase:
                            399 
                            400 ; ----------------------------------------------------------------------
                            401 ; 
                            402 ; 		BASIC WORDS
                            403 ; 
                            404 ; These words are the basic FORTH system. Different projects extend
                            405 ; this by hanging words off the base system.
                            406 ; 
                            407 ; These words must begin the dictionary so the base words don't have
                            408 ; to know anything about the project-specific words.
                            409 ; 
                            410 ; The last word of the base system will always be ABORT. The first
                            411 ; word of the project-specific system should specify ABORT as its
                            412 ; previous word.
                            413 ; 
                            414 ; The project-specific words must include ?KEY, KEY, and EMIT.
                            415 ; 
                            416 ; Revisions:	04/21/97 RLI - Changed the flags byte to be a flags longword.
                            417 ; 		04/22/01 RLI - Added SYSCALL and DROP opcodes.
                            418 ; 		05/03/01 RLI - Glib reg- VM ops encourage backwards
                            419 ; 		               subtracts. Now I have to look at them all.
                            420 ; 		               Oops. Fixing it breaks control over growing
                            421 ; 		               the math stack direction! reg- and reg+ will
                            422 ; 		               now do reverse subtracts when appropriate.
                            423 ; 		               I can either add a SWAP operation or special
                            424 ; 		               case reg-. I think I'll add SWAP; making a
                            425 ; 		               reverse minus would be more efficient (since
                            426 ; 		               it's only used by reg-), but we're not
                            427 ; 		               interested in efficiency.
                            428 ; 		05/10/01 RLI - ($) incorrectly skipped count byte.
                            429 ; 
                            430 ; 		               BTW, I've realized that .NYBBLES assumes
                            431 ; 		               word size is an even multiple of four
                            432 ; 		               bits. There'll be no 18-bit THIRD until
                            433 ; 		               I figure out what to do about that.
                            434 ; 
                            435 ; 		               Fixed a bunch of bogus blank line comments.
                            436 ; 		               This hadn't been a problem on DOS with ^M^J
                            437 ; 		               line terminators, but popped up when things
                            438 ; 		               were moved to Unix.
                            439 ; 
                            440 ; ----------------------------------------------------------------------
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 9.
Hexidecimal [16-Bits]



                            441 ; ----
                            442 ; 
                            443 ; Primitives
                            444 ; 
                            445 ; These words make up the absolute core of the FORTH system. For most
                            446 ; of them, I just can't think of any way to turn them into high-level
                            447 ; FORTH words.
                            448 ; 
                            449 ; ----
                            450 
                            451 
                            452 ; ----	(NEXT) -- word # 0
                            453 
   026C                     454 W0_Name:
                            455 
                            456 	; stringengize( (NEXT) )
   026C 28                  457 .byte 0x28
   026D 4E                  458 .byte 0x4e
   026E 45                  459 .byte 0x45
   026F 58                  460 .byte 0x58
   0270 54                  461 .byte 0x54
   0271 29                  462 .byte 0x29
                            463 
   0272 46 00               464 	.word ( . - W0_Name ) + 64 
   0274 00 00               465 	.word 0		; First word
   0276                     466 W0_CFA:
   0276 00 00               467 	.word W0_CFA - .		; (NEXT)
   0278                     468 W0_PFA:
                            469 ; (NEXT)				M: ( -> )
                            470 ; 				R: ( -> )
                            471 ; 
                            472 ; This is the "inner interpreter". It knows how to fetch and execute
                            473 ; the next FORTH word. You should probably not refer to this word in
                            474 ; your FORTH code as it is highly unlikely that it will prove useful
                            475 ; (most FORTH systems don't provide a header for this word).
                            476 ; 
                            477 ; Revisions:
                            478 ; 
                            479 ; 07/29/99 RLI - code version
                            480 ; 
                            481 ; There are actually several generally useful chunks of code included
                            482 ; here, because they are either useful here or there is no really
                            483 ; good place to put them (but they have to go _somewhere!).
                            484 ; 
                            485 ; ################################################### 
                            486 ; 
                            487 ; There isn't any really good place to describe what's going on, so
                            488 ; this will have to do.
                            489 ; 
                            490 ; The .mini4 files contain descriptions of the machine code needed
                            491 ; to implement the SCIFORTH primitives in a hypothetical assembly
                            492 ; language for a four-level stack machine modelled on a
                            493 ; traditional HP calculator. These descriptions will be compiled
                            494 ; into machine code for the specific processor by the appropriate
                            495 ; version of the QDL collator. The descriptions are intended to be
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 10.
Hexidecimal [16-Bits]



                            496 ; compilable in either a simple minded manner or, should someone
                            497 ; get really enthused in writing a QDL collator, in an optimized
                            498 ; manner.
                            499 ; 
                            500 ; The intent is to describe SCIFORTH in a sequence of statements
                            501 ; with limited stack depth. In addition to the small mini4 stack,
                            502 ; SCIFORTH needs a number of registers; it is assumed to be
                            503 ; inexpensive enough to access these registers that the mini4 code
                            504 ; does not need to expend a lot of effort trying to keep things on
                            505 ; the stack; i.e., if MP is used twice, the mini4 code assumes
                            506 ; that a sequence like MP@ <stuff> MP@ is preferred to a sequence
                            507 ; like MP@ DUP <stuff>.
                            508 ; 
                            509 ; The mini4 machine is a single-stack machine; it has only a 
                            510 ; math stack. The return stack is constructed by mini4 operations
                            511 ; on registers and memory.
                            512 ; 
                            513 ; The smallest addressable unit in SCIFORTH is the 'byte'.
                            514 ; SCIFORTH deals primarily in 'cells', which may be one or more
                            515 ; 'byte's long. There may be an additional intermediate unit on
                            516 ; which the machine may operate called the 'word'. A 'byte' or
                            517 ; 'word' may be fetched or stored to memory, but all operations in
                            518 ; the SCIFORTH math stack operate strictly on 'cell's. 'Byte's and
                            519 ; 'word's are converted to 'cell's as they are fetched and stored.
                            520 ; Upon storing a 'byte' or 'word', the conversion is done by
                            521 ; issuing the appropriate type of transaction. When fetching a
                            522 ; 'byte' or 'word', the value fetched may be either sign-extended
                            523 ; or zero-extended to form a 'cell' for use on the math stack.
                            524 ; 
                            525 ; An SCIFORTH implementation is not required to distinguish
                            526 ; between 'byte's, 'word's, and 'cell's. It is possible to have an
                            527 ; implementation with only 'cell's or an implementation with only
                            528 ; 'byte's and 'cell's.
                            529 ; 
                            530 ; ---------------------- MINI4 OPCODES ----------------------
                            531 ; 
                            532 ; @	( Address -> Value ) Fetch a cell from memory. 
                            533 ; 
                            534 ; !	( Value, Address -> ) Write a cell to memory.
                            535 ; 
                            536 ; @.zb	( Address -> Value ) Fetch a byte from memory and
                            537 ; 	zero-extend it to a cell. On machines with one-byte
                            538 ; 	cells, this is equivalent to @.
                            539 ; 
                            540 ; !.b	( Value, Address -> ) Write a byte to memory. On
                            541 ; 	machines with one-byte cells, this is equivalent to !.
                            542 ; 
                            543 ; @.sw	( Address -> Value ) Fetch a word from memory and
                            544 ; 	sign-extend it to a cell. On machines with one-word
                            545 ; 	cells, this is equivalent to @.
                            546 ; 
                            547 ; @.zw	( Address -> Value ) Fetch a word from memory and
                            548 ; 	sign-extend it to a cell. On machines with one-word
                            549 ; 	cells, this is equivalent to @.
                            550 ; 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 11.
Hexidecimal [16-Bits]



                            551 ; !.w	( Value, Address -> ) Write a word to memory. On
                            552 ; 	machines with one-word cells, this is equivalent to !.
                            553 ; 
                            554 ; REG@	( -> Value ) Copy the named register to the top of the 
                            555 ; 	stack. The register names are described below.
                            556 ; 
                            557 ; REG!	( Value -> ) Copy the top of the stack to the
                            558 ; 	named register. The register names are described below.
                            559 ; 
                            560 ; +	( a, b -> a+b ) Add the top two cells on the stack,
                            561 ; 	leaving the result on the stack.
                            562 ; 
                            563 ; -	( a, b -> a-b ) Subtract the top two cells on the 
                            564 ; 	stack, leaving the result on the stack.
                            565 ; 
                            566 ; AND	( a, b -> a AND b ) Perform a bitwise AND between the
                            567 ; 	top two elements on the stack, leaving the result on the
                            568 ; 	stack.
                            569 ; 
                            570 ; OR	( a, b -> a OR b ) Perform a bitwise OR between the top
                            571 ; 	two elements on the stack, leaving the result on the
                            572 ; 	stack.
                            573 ; 
                            574 ; XOR	( a, b -> a XOR b ) Perform a bitwise XOR between the
                            575 ; 	top two elements on the stack, leaving the result on the
                            576 ; 	stack.
                            577 ; 
                            578 ; GO label ( -> ) Jump to the named label.
                            579 ; 
                            580 ; ELSEGO label ( flag -> ) Jump to the named label if the top of the
                            581 ; 	stack is zero.
                            582 ; 
                            583 ; <GO label ( a, b -> ) Jump to named label if a < b.
                            584 ; 
                            585 ; NEG	( a -> -a ) Form the two's complement of the cell on top
                            586 ; 	of the stack.
                            587 ; 
                            588 ; NOT	( a -> ~a ) Form the one's complement of the cell on top
                            589 ; 	of the stack.
                            590 ; 
                            591 ; <<	( a, b -> a<<b ) Shift left.
                            592 ; 
                            593 ; >>	( a, b -> a>>b ) Shift right (logical).
                            594 ; 
                            595 ; DUP	( a -> a, a ) Push a copy of the top of stack onto the
                            596 ; 	stack.
                            597 ; 
                            598 ; 	DROP	( a -> ) Drop something from the stack.
                            599 ; 
                            600 ; 	SYSCALL	( -> ) Escape hatch for assembly language. The math
                            601 ; 		stack depth is assumed not to change (this required the
                            602 ; 		addition of DROP).
                            603 ; 
                            604 ; ---------------------- MINI4 PSEUDOOPS -------------------------
                            605 ; 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 12.
Hexidecimal [16-Bits]



                            606 ; ;	This pseudo-instruction informs QDL that the stack
                            607 ; 	should be empty. The QDL collator should issue an error
                            608 ; 	message if the stack is not empty. It is intended
                            609 ; 	primarily as a debugging aid.
                            610 ; 
                            611 ; LABEL label ( -> ) Declare a label. Note that these labels are
                            612 ; 	global, as opposed to the intentionally local scope of
                            613 ; 	QDL %LABELs.
                            614 ; 
                            615 ; #	( -> ) The rest of the line is copied to the output as a
                            616 ; 	comment.
                            617 ; 
                            618 ; (	( -> ) The rest of the line is skipped.
                            619 ; 
                            620 ; MP+	This word adds the FORTH math stack pointer to the cell
                            621 ; 	on the stack. In a system that grows the math stack
                            622 ; 	downward, this is equivalent to "MP@ +". In a system
                            623 ; 	that grows the math stack upward, this is equivalent to
                            624 ; 	"MP@ SWAP -". This opcode allows systems which grow the FORTH
                            625 ; 	math stack either way to be built from the same source
                            626 ; 	code; In both systems, a word is dropped from the math
                            627 ; 	stack by "CELLSIZE MP+ MP!".
                            628 ; 
                            629 ; MP-	This word subtracts the cell on the stack from the FORTH
                            630 ; 		math stack pointer. In a system that grows the math
                            631 ; 	stack downward, this is equivalent to "MP@ SWAP -". In a
                            632 ; 	system that grows the math stack upward, this is
                            633 ; 	equivalent to "MP@ +". This opcode allows systems which
                            634 ; 	grow the FORTH math stack either way to be built from
                            635 ; 	the same source code; in both systems, space is made for
                            636 ; 	an item on the math stack by "CELLSIZE MP- MP!".
                            637 ; 
                            638 ; RP+	This word adds the FORTH return stack pointer to the
                            639 ; 	cell on the stack. In a system that grows the return
                            640 ; 	stack downward, this is equivalent to "RP@ +". In a
                            641 ; 	system that grows the math stack upward, this is
                            642 ; 	equivalent to "RP@ SWAP -". This opcode allows systems which
                            643 ; 	grow the FORTH return stack either way to be built from
                            644 ; 	the same source code; in both systems, a word is dropped
                            645 ; 	from the return stack by "CELLSIZE RP+ RP!".
                            646 ; 
                            647 ; RP-	This word subtracts the cell on top of the stack from the
                            648 ; 		FORTH return stack pointer. In a system the grows the return
                            649 ; 	stack downward, this is equivalent to "RP@ SWAP -". In a
                            650 ; 	system that grows the math stack upward, this is
                            651 ; 	equivalent to "RP@ +". This opcode allows systems which
                            652 ; 	grow the FORTH return stack either way to be built from
                            653 ; 	the same source code; in both systems, space is made for
                            654 ; 	an item on the return stack by "CELLSIZE RP- RP!".
                            655 ; 
                            656 ; NEXT	Executes the next FORTH word. This is equivalent to
                            657 ; 	branching to Next:, below, but is given an opcode to
                            658 ; 	deal with the variety of possible ways in which such a
                            659 ; 	branch might be accomplished (for example, branching to
                            660 ; 	the address in the NEXT register would allow a variety
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 13.
Hexidecimal [16-Bits]



                            661 ; 	of Next routines to be used; perhaps one that yields in
                            662 ; 	a cooperative multitasking environment could be
                            663 ; 	provided).
                            664 ; 
                            665 ; BYTE value ( -> ) Emits a constant byte into the generated code
                            666 ; 	stream. This is primarily for the creation of DIGITMAP,
                            667 ; 	which is a pre-initialized array of bytes.
                            668 ; 
                            669 ; CELLSIZE ( -> Number of bytes in a cell ) Push the size of a
                            670 ; 	cell in bytes onto the stack.
                            671 ; 
                            672 ; DEFINITION ( -> Offset to definition in bytes ) Push the offset
                            673 ; 	from a CFA to the word's definition onto the stack.
                            674 ; 
                            675 ; 	SWAP	( a b -> b a ) Swaps the top two items on the math stack.
                            676 ; 
                            677 ; END	( -> ) Indicates the end of the CODE source. The CODE
                            678 ; 	compiler returns to QDL.
                            679 ; 
                            680 ; Anything else is assumed to be a literal. Yes, this means it's
                            681 ; not possible for there to be a syntax error. Yes, this does mean
                            682 ; finding typos etc. will be painful.
                            683 ; 
                            684 ; ----------------------- REGISTERS ------------------------
                            685 ; 
                            686 ; Several registers are needed for this effort. In the pseudocode
                            687 ; descriptions in these files, those registers are:
                            688 ; 
                            689 ; NEXT 	Contains the address of the code starting at Next:, below.
                            690 ; 	This is typically used as a convenience for hand-assembled
                            691 ; 	CODE words, as it allows such a word to exit by jumping to
                            692 ; 	the contents of a register rather than requiring that an
                            693 ; 	offset to Next: be calculated. CODE words that are part of
                            694 ; 	the SCIFORTH source code will typically branch to Next:
                            695 ; 	instead of jumping to the contents of the NEXT register.
                            696 ; 
                            697 ; 	The contents of this register are initialized by the startup
                            698 ; 	code. It may be re-initialized if the code moves (for
                            699 ; 	example, if SCIFORTH is moved from ROM to RAM in preparation
                            700 ; 	for re-programming the FLASH ROM containing SCIFORTH).
                            701 ; 
                            702 ; PC	Contains the machine code instruction pointer. This is
                            703 ; 	used to describe branches; loading a value into the PC
                            704 ; 	is equivalent to branching to that address.
                            705 ; 
                            706 ; 	The PC cannot be fetched; that is, PC@ is not valid.
                            707 ; 
                            708 ; IP	Contains the FORTH instruction pointer. The cell pointed to
                            709 ; 	by IP contains a pointer to the CFA of the next FORTH word
                            710 ; 	to be executed.
                            711 ; 
                            712 ; 	The startup code typically begins executing SCIFORTH by
                            713 ; 	loading the address of (COLD) into IP and jumping to Next:.
                            714 ; 
                            715 ; RP	Contains the return stack pointer. This is the address of
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 14.
Hexidecimal [16-Bits]



                            716 ; 	the last item written to the return stack in memory. The
                            717 ; 	return stack actually contains two more items in the
                            718 ; 	R2 and R1 registers, described below.
                            719 ; 
                            720 ; 	RP is decremented before an item is moved from the return
                            721 ; 	stack cache to memory. It is incremented after an item is
                            722 ; 	moved from memory to the return stack cache.
                            723 ; 
                            724 ; MP	Contains the math stack pointer. This is the address of
                            725 ; 	the last item written to the math stack in memory. The
                            726 ; 	math stack actually contains two more items in the M2 and
                            727 ; 	M1 registers, described below.
                            728 ; 
                            729 ; 	MP is decremented before an item is moved from the math
                            730 ; 	stack cache to memory. It is incremented after an item is
                            731 ; 	moved from memory to the math stack cache.
                            732 ; 
                            733 ; CFA	Contains the address of the CFA of the FORTH word currently
                            734 ; 	being executed. This is calculated by Next: as part of
                            735 ; 	finding the next word to execute and is used by such words
                            736 ; 	as (VAR) and (CONSTANT), which need to be able to find the
                            737 ; 	definition of the current word being executed.
                            738 ; 
                            739 ; InitialMP Contains the initial value for the math stack pointer;
                            740 ; 	that is, the address of the cell immediately above the
                            741 ; 	memory region in which the math stack is to reside. It is
                            742 ; 	initialized by the startup code before FORTH code begins
                            743 ; 	to be executed.
                            744 ; 
                            745 ; InitialRP Contains the initial value for the return stack pointer;
                            746 ; 	that is, the address of the cell immediately above the
                            747 ; 	memory region in which the return stack is to reside. It is
                            748 ; 	initialized by the startup code before FORTH code begins
                            749 ; 	to be executed.
                            750 ; 
                            751 ; There are two additional registers which are not needed by the core
                            752 ; SCIFORTH dictionary, but are useful for implementations that need to
                            753 ; be moved around in memory (such as copying themselves from ROM to
                            754 ; RAM). They are:
                            755 ; 
                            756 ; InitialDP Contains the initial value for the dictionary pointer;
                            757 ; 	that is, the address of the cell immediately following the
                            758 ; 	current dictionary. This is initialized by the startup code
                            759 ; 	before FORTH code begins to be executed.
                            760 ; 
                            761 ; InitialLAST Contains the initial value for the pointer to the CFA of
                            762 ; 	the last word in the dictionary. This is initialized by the
                            763 ; 	startup code before FORTH code begins to be executed.
                            764 ; 
                            765 ; ################################# 
                            766 ; 
                            767 ; This file contains several snippets of code:
                            768 ; 
                            769 ; Next	Code to fetch the pointer to the next word to be executed
                            770 ; Next_A	Code to execute the word after the pointer has been fetched
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 15.
Hexidecimal [16-Bits]



                            771 ; 
                            772 ; ################################ 
                            773 ; 
                            774 ; Next
                            775 ; 
                            776 ; This code fetches the pointer to the next word to be executed. It
                            777 ; falls through to Next_A, which jumps to the machine code which knows
                            778 ; how to execute the word.
                            779 ; 
   0278                     780 Next:			; LABEL Next
                            781 ; Fetch the offset to the CFA of the word to be executed next and
                            782 ; relocate it to form the address of the CFA.
   0278 2A 3F 01            783 	ld hl,(StupidIP)		; IP@
   027B 22 35 01            784 	ld (StupidR0),hl
   027E 2A 35 01            785 	ld hl,(StupidR0)		; @
   0281 7E                  786 	ld a,(hl)
   0282 5F                  787 	ld e,a
   0283 23                  788 	inc hl
   0284 7E                  789 	ld a,(hl)
   0285 57                  790 	ld d,a
   0286 ED 53 35 01         791 	ld (StupidR0),de
   028A 2A 3F 01            792 	ld hl,(StupidIP)		; IP@
   028D 22 37 01            793 	ld (StupidR1),hl
   0290 ED 5B 37 01         794 	ld de,(StupidR1)		; +
   0294 2A 35 01            795 	ld hl,(StupidR0)
   0297 19                  796 	add hl,de
   0298 22 35 01            797 	ld (StupidR0),hl
   029B 2A 35 01            798 	ld hl,(StupidR0)		; CFA!
   029E 22 3D 01            799 	ld (StupidCFA),hl
                            800 ; Advance the IP past the cell just fetched.
   02A1 2A 3F 01            801 	ld hl,(StupidIP)		; IP@
   02A4 22 35 01            802 	ld (StupidR0),hl
   02A7 21 02 00            803 	ld hl,#2		; 2
   02AA 22 37 01            804 	ld (StupidR1),hl
   02AD ED 5B 37 01         805 	ld de,(StupidR1)		; +
   02B1 2A 35 01            806 	ld hl,(StupidR0)
   02B4 19                  807 	add hl,de
   02B5 22 35 01            808 	ld (StupidR0),hl
   02B8 2A 35 01            809 	ld hl,(StupidR0)		; IP!
   02BB 22 3F 01            810 	ld (StupidIP),hl
                            811 ; Next_A
                            812 ; 
                            813 ; This code takes the pointer to the next word to be executed in CFA
                            814 ; and uses it to locate and enter the machine code which knows how to
                            815 ; execute the word. This code is used by both (NEXT) and EXEC.
   02BE                     816 Next_A:			; LABEL Next_A
                            817 ; Fetch and relocate the pointer to the CFA of the word that knows
                            818 ; how to execute this word.
   02BE 2A 3D 01            819 	ld hl,(StupidCFA)		; CFA@
   02C1 22 35 01            820 	ld (StupidR0),hl
   02C4 2A 35 01            821 	ld hl,(StupidR0)		; @
   02C7 7E                  822 	ld a,(hl)
   02C8 5F                  823 	ld e,a
   02C9 23                  824 	inc hl
   02CA 7E                  825 	ld a,(hl)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 16.
Hexidecimal [16-Bits]



   02CB 57                  826 	ld d,a
   02CC ED 53 35 01         827 	ld (StupidR0),de
   02D0 2A 3D 01            828 	ld hl,(StupidCFA)		; CFA@
   02D3 22 37 01            829 	ld (StupidR1),hl
   02D6 ED 5B 37 01         830 	ld de,(StupidR1)		; +
   02DA 2A 35 01            831 	ld hl,(StupidR0)
   02DD 19                  832 	add hl,de
   02DE 22 35 01            833 	ld (StupidR0),hl
                            834 ; Form a pointer to the code contained in that word's definition.
   02E1 21 02 00            835 	ld hl,#2		; 2
   02E4 22 37 01            836 	ld (StupidR1),hl
   02E7 ED 5B 37 01         837 	ld de,(StupidR1)		; +
   02EB 2A 35 01            838 	ld hl,(StupidR0)
   02EE 19                  839 	add hl,de
   02EF 22 35 01            840 	ld (StupidR0),hl
                            841 ; Jump to the code that knows how to execute this word.
   02F2 2A 35 01            842 	ld hl,(StupidR0)		; PC!
   02F5 E9                  843 	jp (hl)
                            844 
                            845 
                            846 ; ----	EXEC -- word # 1
                            847 
   02F6                     848 W1_Name:
                            849 
                            850 	; stringengize( EXEC )
   02F6 45                  851 .byte 0x45
   02F7 58                  852 .byte 0x58
   02F8 45                  853 .byte 0x45
   02F9 43                  854 .byte 0x43
                            855 
   02FA 04 00               856 	.word ( . - W1_Name ) + 0 
   02FC 88 00               857 	.word W1_CFA - W0_CFA
   02FE                     858 W1_CFA:
   02FE 00 00               859 	.word W1_CFA - .		; EXEC
   0300                     860 W1_PFA:
                            861 ; EXEC - Execute a word whose address is on top of the math stack.
                            862 ; 
                            863 ; M: ( cfa -> [depends on word executed] )
                            864 ; R: ( -> )
                            865 ; 
                            866 ; This word needs intimate knowledge of (NEXT) in order to work
                            867 ; correctly. It works by stuffing the address of the word to be
                            868 ; executed where (NEXT) puts it after relocating it and branching
                            869 ; to the place in (NEXT) where the transfer is made. In terms of our
                            870 ; hyphothetical skeleton machine, that means copying the top of the
                            871 ; math stack to CFA and jumping to Next_A:
                            872 ; 
                            873 ; Revisions:
                            874 ; 07/29/99 RLI - code version
                            875 ; Copy the top of the math stack to CFA.
   0300 2A 41 01            876 	ld hl,(StupidMP)		; MP@
   0303 22 35 01            877 	ld (StupidR0),hl
   0306 2A 35 01            878 	ld hl,(StupidR0)		; @
   0309 7E                  879 	ld a,(hl)
   030A 5F                  880 	ld e,a
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 17.
Hexidecimal [16-Bits]



   030B 23                  881 	inc hl
   030C 7E                  882 	ld a,(hl)
   030D 57                  883 	ld d,a
   030E ED 53 35 01         884 	ld (StupidR0),de
   0312 2A 35 01            885 	ld hl,(StupidR0)		; CFA!
   0315 22 3D 01            886 	ld (StupidCFA),hl
                            887 ; Pop the CFA address from the math stack.
   0318 21 02 00            888 	ld hl,#2		; 2
   031B 22 35 01            889 	ld (StupidR0),hl
   031E 2A 41 01            890 	ld hl,(StupidMP)		; MP@
   0321 22 37 01            891 	ld (StupidR1),hl
   0324 2A 37 01            892 	ld hl,(StupidR1)		; SWAP
   0327 ED 5B 35 01         893 	ld de,(StupidR0)
   032B 22 35 01            894 	ld (StupidR0),hl
   032E ED 53 37 01         895 	ld (StupidR1),de
   0332 ED 5B 37 01         896 	ld de,(StupidR1)		; -
   0336 2A 35 01            897 	ld hl,(StupidR0)
   0339 7D                  898 	ld a,l
   033A 93                  899 	sub a,e
   033B 6F                  900 	ld l,a
   033C 7C                  901 	ld a,h
   033D 9A                  902 	sbc a,d
   033E 67                  903 	ld h,a
   033F 22 35 01            904 	ld (StupidR0),hl
   0342 2A 35 01            905 	ld hl,(StupidR0)		; MP!
   0345 22 41 01            906 	ld (StupidMP),hl
                            907 ; Branch to Next_A
   0348 C3 BE 02            908 	jp Next_A		; GO Next_A
                            909 
                            910 
                            911 ; ----	(:) -- word # 2
                            912 
   034B                     913 W2_Name:
                            914 
                            915 	; stringengize( (:) )
   034B 28                  916 .byte 0x28
   034C 3A                  917 .byte 0x3a
   034D 29                  918 .byte 0x29
                            919 
   034E 03 00               920 	.word ( . - W2_Name ) + 0 
   0350 54 00               921 	.word W2_CFA - W1_CFA
   0352                     922 W2_CFA:
   0352 00 00               923 	.word W2_CFA - .		; (:)
   0354                     924 W2_PFA:
                            925 ; (:) - Enter a FORTH word	M: ( -> )
                            926 ; 				R: ( -> IP )
                            927 ; 
                            928 ; This word contains machine code which knows how to execute a FORTH
                            929 ; word. Executing a FORTH word consists of saving the current IP on
                            930 ; the stack (that's the address to which we'll return after this FORTH
                            931 ; word is executing) and replacing IP by the address of the current
                            932 ; word's definition. The address of the current word's header is
                            933 ; conveniently left for us in CFA by NEXT.
                            934 ; 
                            935 ; Revisions:
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 18.
Hexidecimal [16-Bits]



                            936 ; 07/29/99 RLI - code version
                            937 ; Make space for IP on the return stack
   0354 21 02 00            938 	ld hl,#2		; 2
   0357 22 35 01            939 	ld (StupidR0),hl
   035A 2A 43 01            940 	ld hl,(StupidRP)		; RP@
   035D 22 37 01            941 	ld (StupidR1),hl
   0360 2A 37 01            942 	ld hl,(StupidR1)		; SWAP
   0363 ED 5B 35 01         943 	ld de,(StupidR0)
   0367 22 35 01            944 	ld (StupidR0),hl
   036A ED 53 37 01         945 	ld (StupidR1),de
   036E ED 5B 37 01         946 	ld de,(StupidR1)		; -
   0372 2A 35 01            947 	ld hl,(StupidR0)
   0375 7D                  948 	ld a,l
   0376 93                  949 	sub a,e
   0377 6F                  950 	ld l,a
   0378 7C                  951 	ld a,h
   0379 9A                  952 	sbc a,d
   037A 67                  953 	ld h,a
   037B 22 35 01            954 	ld (StupidR0),hl
   037E 2A 35 01            955 	ld hl,(StupidR0)		; RP!
   0381 22 43 01            956 	ld (StupidRP),hl
                            957 ; Store IP on the return stack.
   0384 2A 3F 01            958 	ld hl,(StupidIP)		; IP@
   0387 22 35 01            959 	ld (StupidR0),hl
   038A 2A 43 01            960 	ld hl,(StupidRP)		; RP@
   038D 22 37 01            961 	ld (StupidR1),hl
   0390 2A 37 01            962 	ld hl,(StupidR1)		; !
   0393 ED 5B 35 01         963 	ld de,(StupidR0)
   0397 73                  964 	ld (hl),e
   0398 23                  965 	inc hl
   0399 72                  966 	ld (hl),d
                            967 ; Put the address of the current word's definition in IP.
   039A 2A 3D 01            968 	ld hl,(StupidCFA)		; CFA@
   039D 22 35 01            969 	ld (StupidR0),hl
   03A0 21 02 00            970 	ld hl,#2		; 2
   03A3 22 37 01            971 	ld (StupidR1),hl
   03A6 ED 5B 37 01         972 	ld de,(StupidR1)		; +
   03AA 2A 35 01            973 	ld hl,(StupidR0)
   03AD 19                  974 	add hl,de
   03AE 22 35 01            975 	ld (StupidR0),hl
   03B1 2A 35 01            976 	ld hl,(StupidR0)		; IP!
   03B4 22 3F 01            977 	ld (StupidIP),hl
   03B7 2A CB 01            978 	ld hl,(StupidNEXT)		; NEXT@
   03BA 22 35 01            979 	ld (StupidR0),hl
   03BD 2A 35 01            980 	ld hl,(StupidR0)		; PC!
   03C0 E9                  981 	jp (hl)
                            982 
                            983 
                            984 ; ----	(;) -- word # 3
                            985 
   03C1                     986 W3_Name:
                            987 
                            988 	; stringengize( (;) )
   03C1 28                  989 .byte 0x28
   03C2 3B                  990 .byte 0x3b
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 19.
Hexidecimal [16-Bits]



   03C3 29                  991 .byte 0x29
                            992 
   03C4 03 00               993 	.word ( . - W3_Name ) + 0 
   03C6 76 00               994 	.word W3_CFA - W2_CFA
   03C8                     995 W3_CFA:
   03C8 00 00               996 	.word W3_CFA - .		; (;)
   03CA                     997 W3_PFA:
                            998 ; (;) - Terminate execution of a FORTH word
                            999 ; 
                           1000 ; M: ( -> )
                           1001 ; R: ( Return address -> )
                           1002 ; 
                           1003 ; This word executes the end of a FORTH word. It pops the IP from the
                           1004 ; return stack and begins execution there.
                           1005 ; 
                           1006 ; Revisions:
                           1007 ; 07/29/99 RLI - code version.
                           1008 ; Copy the top of the return stack into IP.
   03CA 2A 43 01           1009 	ld hl,(StupidRP)		; RP@
   03CD 22 35 01           1010 	ld (StupidR0),hl
   03D0 2A 35 01           1011 	ld hl,(StupidR0)		; @
   03D3 7E                 1012 	ld a,(hl)
   03D4 5F                 1013 	ld e,a
   03D5 23                 1014 	inc hl
   03D6 7E                 1015 	ld a,(hl)
   03D7 57                 1016 	ld d,a
   03D8 ED 53 35 01        1017 	ld (StupidR0),de
   03DC 2A 35 01           1018 	ld hl,(StupidR0)		; IP!
   03DF 22 3F 01           1019 	ld (StupidIP),hl
                           1020 ; Drop the return address from the return stack.
   03E2 21 02 00           1021 	ld hl,#2		; 2
   03E5 22 35 01           1022 	ld (StupidR0),hl
   03E8 2A 43 01           1023 	ld hl,(StupidRP)		; RP@
   03EB 22 37 01           1024 	ld (StupidR1),hl
   03EE ED 5B 37 01        1025 	ld de,(StupidR1)		; +
   03F2 2A 35 01           1026 	ld hl,(StupidR0)
   03F5 19                 1027 	add hl,de
   03F6 22 35 01           1028 	ld (StupidR0),hl
   03F9 2A 35 01           1029 	ld hl,(StupidR0)		; RP!
   03FC 22 43 01           1030 	ld (StupidRP),hl
   03FF 2A CB 01           1031 	ld hl,(StupidNEXT)		; NEXT@
   0402 22 35 01           1032 	ld (StupidR0),hl
   0405 2A 35 01           1033 	ld hl,(StupidR0)		; PC!
   0408 E9                 1034 	jp (hl)
                           1035 
                           1036 
                           1037 ; ----	(CONSTANT) -- word # 4
                           1038 
   0409                    1039 W4_Name:
                           1040 
                           1041 	; stringengize( (CONSTANT) )
   0409 28                 1042 .byte 0x28
   040A 43                 1043 .byte 0x43
   040B 4F                 1044 .byte 0x4f
   040C 4E                 1045 .byte 0x4e
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 20.
Hexidecimal [16-Bits]



   040D 53                 1046 .byte 0x53
   040E 54                 1047 .byte 0x54
   040F 41                 1048 .byte 0x41
   0410 4E                 1049 .byte 0x4e
   0411 54                 1050 .byte 0x54
   0412 29                 1051 .byte 0x29
                           1052 
   0413 0A 00              1053 	.word ( . - W4_Name ) + 0 
   0415 4F 00              1054 	.word W4_CFA - W3_CFA
   0417                    1055 W4_CFA:
   0417 00 00              1056 	.word W4_CFA - .		; (CONSTANT)
   0419                    1057 W4_PFA:
                           1058 ; (CONSTANT) - Execute a constant
                           1059 ; 
                           1060 ; M: ( -> Whatever's in the first cell of the word's definition )
                           1061 ; R: ( -> )
                           1062 ; 
                           1063 ; This word contains the machine code which knows how to execute a
                           1064 ; CONSTANT. Executing a CONSTANT consists of taking the first cell
                           1065 ; of the CONSTANT's definition and pushing it on the math stack.
                           1066 ; 
                           1067 ; NEXT conveniently leaves the address of the CONSTANT's header in CFA.
                           1068 ; 
                           1069 ; Revisions:
                           1070 ; 07/29/99 RLI - code version.
                           1071 ; Make space on the math stack
   0419 21 02 00           1072 	ld hl,#2		; 2
   041C 22 35 01           1073 	ld (StupidR0),hl
   041F 2A 41 01           1074 	ld hl,(StupidMP)		; MP@
   0422 22 37 01           1075 	ld (StupidR1),hl
   0425 ED 5B 37 01        1076 	ld de,(StupidR1)		; +
   0429 2A 35 01           1077 	ld hl,(StupidR0)
   042C 19                 1078 	add hl,de
   042D 22 35 01           1079 	ld (StupidR0),hl
   0430 2A 35 01           1080 	ld hl,(StupidR0)		; MP!
   0433 22 41 01           1081 	ld (StupidMP),hl
                           1082 ; Calculate the address of the first cell of the definition.
   0436 2A 3D 01           1083 	ld hl,(StupidCFA)		; CFA@
   0439 22 35 01           1084 	ld (StupidR0),hl
   043C 21 02 00           1085 	ld hl,#2		; 2
   043F 22 37 01           1086 	ld (StupidR1),hl
   0442 ED 5B 37 01        1087 	ld de,(StupidR1)		; +
   0446 2A 35 01           1088 	ld hl,(StupidR0)
   0449 19                 1089 	add hl,de
   044A 22 35 01           1090 	ld (StupidR0),hl
                           1091 ; Copy the first cell of the definition into the top of the math
                           1092 ; stack.
   044D 2A 35 01           1093 	ld hl,(StupidR0)		; @
   0450 7E                 1094 	ld a,(hl)
   0451 5F                 1095 	ld e,a
   0452 23                 1096 	inc hl
   0453 7E                 1097 	ld a,(hl)
   0454 57                 1098 	ld d,a
   0455 ED 53 35 01        1099 	ld (StupidR0),de
   0459 2A 41 01           1100 	ld hl,(StupidMP)		; MP@
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 21.
Hexidecimal [16-Bits]



   045C 22 37 01           1101 	ld (StupidR1),hl
   045F 2A 37 01           1102 	ld hl,(StupidR1)		; !
   0462 ED 5B 35 01        1103 	ld de,(StupidR0)
   0466 73                 1104 	ld (hl),e
   0467 23                 1105 	inc hl
   0468 72                 1106 	ld (hl),d
   0469 2A CB 01           1107 	ld hl,(StupidNEXT)		; NEXT@
   046C 22 35 01           1108 	ld (StupidR0),hl
   046F 2A 35 01           1109 	ld hl,(StupidR0)		; PC!
   0472 E9                 1110 	jp (hl)
                           1111 
                           1112 
                           1113 ; ----	(VAR) -- word # 5
                           1114 
   0473                    1115 W5_Name:
                           1116 
                           1117 	; stringengize( (VAR) )
   0473 28                 1118 .byte 0x28
   0474 56                 1119 .byte 0x56
   0475 41                 1120 .byte 0x41
   0476 52                 1121 .byte 0x52
   0477 29                 1122 .byte 0x29
                           1123 
   0478 05 00              1124 	.word ( . - W5_Name ) + 0 
   047A 65 00              1125 	.word W5_CFA - W4_CFA
   047C                    1126 W5_CFA:
   047C 00 00              1127 	.word W5_CFA - .		; (VAR)
   047E                    1128 W5_PFA:
                           1129 ; (VAR) - Code which knows how to execute a VAR
                           1130 ; 
                           1131 ; M: ( -> The address of the word's definition )
                           1132 ; R: ( -> )
                           1133 ; 
                           1134 ; This word contains the machine code which knows how to execute a
                           1135 ; VARiable. Execution of a VARiable consists of pushing the address of
                           1136 ; the VARiable's definition onto the math stack.
                           1137 ; 
                           1138 ; NEXT conveniently leaves the address of the VARiable's header in
                           1139 ; CFA.
                           1140 ; 
                           1141 ; Revisions:
                           1142 ; 07/29/99 RLI - code version.
                           1143 ; Make space on the math stack for one cell.
   047E 21 02 00           1144 	ld hl,#2		; 2
   0481 22 35 01           1145 	ld (StupidR0),hl
   0484 2A 41 01           1146 	ld hl,(StupidMP)		; MP@
   0487 22 37 01           1147 	ld (StupidR1),hl
   048A ED 5B 37 01        1148 	ld de,(StupidR1)		; +
   048E 2A 35 01           1149 	ld hl,(StupidR0)
   0491 19                 1150 	add hl,de
   0492 22 35 01           1151 	ld (StupidR0),hl
   0495 2A 35 01           1152 	ld hl,(StupidR0)		; MP!
   0498 22 41 01           1153 	ld (StupidMP),hl
                           1154 ; Calculate the address of the current word's definition, leaving
                           1155 ; the result in the top of the math stack.
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 22.
Hexidecimal [16-Bits]



   049B 2A 3D 01           1156 	ld hl,(StupidCFA)		; CFA@
   049E 22 35 01           1157 	ld (StupidR0),hl
   04A1 21 02 00           1158 	ld hl,#2		; 2
   04A4 22 37 01           1159 	ld (StupidR1),hl
   04A7 ED 5B 37 01        1160 	ld de,(StupidR1)		; +
   04AB 2A 35 01           1161 	ld hl,(StupidR0)
   04AE 19                 1162 	add hl,de
   04AF 22 35 01           1163 	ld (StupidR0),hl
   04B2 2A 41 01           1164 	ld hl,(StupidMP)		; MP@
   04B5 22 37 01           1165 	ld (StupidR1),hl
   04B8 2A 37 01           1166 	ld hl,(StupidR1)		; !
   04BB ED 5B 35 01        1167 	ld de,(StupidR0)
   04BF 73                 1168 	ld (hl),e
   04C0 23                 1169 	inc hl
   04C1 72                 1170 	ld (hl),d
   04C2 2A CB 01           1171 	ld hl,(StupidNEXT)		; NEXT@
   04C5 22 35 01           1172 	ld (StupidR0),hl
   04C8 2A 35 01           1173 	ld hl,(StupidR0)		; PC!
   04CB E9                 1174 	jp (hl)
                           1175 
                           1176 
                           1177 ; ----	(BRANCH) -- word # 6
                           1178 
   04CC                    1179 W6_Name:
                           1180 
                           1181 	; stringengize( (BRANCH) )
   04CC 28                 1182 .byte 0x28
   04CD 42                 1183 .byte 0x42
   04CE 52                 1184 .byte 0x52
   04CF 41                 1185 .byte 0x41
   04D0 4E                 1186 .byte 0x4e
   04D1 43                 1187 .byte 0x43
   04D2 48                 1188 .byte 0x48
   04D3 29                 1189 .byte 0x29
                           1190 
   04D4 08 00              1191 	.word ( . - W6_Name ) + 0 
   04D6 5C 00              1192 	.word W6_CFA - W5_CFA
   04D8                    1193 W6_CFA:
   04D8 00 00              1194 	.word W6_CFA - .		; (BRANCH)
   04DA                    1195 W6_PFA:
                           1196 ; (BRANCH) - Branch to a word
                           1197 ; 
                           1198 ; M: ( -> )
                           1199 ; R: ( -> )
                           1200 ; 
                           1201 ; This word contains the machine code to execute a branch. A branch is
                           1202 ; executed by adding the offset in the code following the reference 
                           1203 ; to this word to the IP. This word is generally not referred to
                           1204 ; directly by users typing in code; the references are built
                           1205 ; implicitly by words like IF, UNTIL, LOOP, etc.
                           1206 ; 
                           1207 ; This code is also used as a utility routine by a variety of other
                           1208 ; low-level words. They enter at the label pBranch:
                           1209 ; 
                           1210 ; Revisions:
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 23.
Hexidecimal [16-Bits]



                           1211 ; 07/29/99 RLI - code version
   04DA                    1212 pBranch:			; LABEL pBranch
                           1213 ; Fetch the branch offset
   04DA 2A 3F 01           1214 	ld hl,(StupidIP)		; IP@
   04DD 22 35 01           1215 	ld (StupidR0),hl
   04E0 2A 35 01           1216 	ld hl,(StupidR0)		; @
   04E3 7E                 1217 	ld a,(hl)
   04E4 5F                 1218 	ld e,a
   04E5 23                 1219 	inc hl
   04E6 7E                 1220 	ld a,(hl)
   04E7 57                 1221 	ld d,a
   04E8 ED 53 35 01        1222 	ld (StupidR0),de
                           1223 ; Relocate the offset to form the address to which it refers
   04EC 2A 3F 01           1224 	ld hl,(StupidIP)		; IP@
   04EF 22 37 01           1225 	ld (StupidR1),hl
   04F2 ED 5B 37 01        1226 	ld de,(StupidR1)		; +
   04F6 2A 35 01           1227 	ld hl,(StupidR0)
   04F9 19                 1228 	add hl,de
   04FA 22 35 01           1229 	ld (StupidR0),hl
                           1230 ; Start executing there
   04FD 2A 35 01           1231 	ld hl,(StupidR0)		; IP!
   0500 22 3F 01           1232 	ld (StupidIP),hl
   0503 2A CB 01           1233 	ld hl,(StupidNEXT)		; NEXT@
   0506 22 35 01           1234 	ld (StupidR0),hl
   0509 2A 35 01           1235 	ld hl,(StupidR0)		; PC!
   050C E9                 1236 	jp (hl)
                           1237 
                           1238 
                           1239 ; ----	(0BRANCH) -- word # 7
                           1240 
   050D                    1241 W7_Name:
                           1242 
                           1243 	; stringengize( (0BRANCH) )
   050D 28                 1244 .byte 0x28
   050E 30                 1245 .byte 0x30
   050F 42                 1246 .byte 0x42
   0510 52                 1247 .byte 0x52
   0511 41                 1248 .byte 0x41
   0512 4E                 1249 .byte 0x4e
   0513 43                 1250 .byte 0x43
   0514 48                 1251 .byte 0x48
   0515 29                 1252 .byte 0x29
                           1253 
   0516 09 00              1254 	.word ( . - W7_Name ) + 0 
   0518 42 00              1255 	.word W7_CFA - W6_CFA
   051A                    1256 W7_CFA:
   051A 00 00              1257 	.word W7_CFA - .		; (0BRANCH)
   051C                    1258 W7_PFA:
                           1259 ; (0BRANCH) - Branch if the top of stack is zero.
                           1260 ; 
                           1261 ; M: ( flag -> )
                           1262 ; R: ( -> )
                           1263 ; 
                           1264 ; This word knows how to conditionally branch based on the top of the
                           1265 ; stack. If the top of stack is zero, the cell  following the reference
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 24.
Hexidecimal [16-Bits]



                           1266 ; to (0BRANCH) is added to IP. Otherwise, IP is simply incremented past
                           1267 ; the offset.
                           1268 ; 
                           1269 ; This word is typically not referred to by users typing code.
                           1270 ; References to it are generated implicitly by words like IF.
                           1271 ; 
                           1272 ; The branch is performed by entering (BRANCH) at pBranch.
                           1273 ; 
                           1274 ; Revisions:
                           1275 ; 07/29/99 RLI - code version
                           1276 ; Grab the flag from the math stack and pop the math stack.
   051C 2A 41 01           1277 	ld hl,(StupidMP)		; MP@
   051F 22 35 01           1278 	ld (StupidR0),hl
   0522 2A 35 01           1279 	ld hl,(StupidR0)		; @
   0525 7E                 1280 	ld a,(hl)
   0526 5F                 1281 	ld e,a
   0527 23                 1282 	inc hl
   0528 7E                 1283 	ld a,(hl)
   0529 57                 1284 	ld d,a
   052A ED 53 35 01        1285 	ld (StupidR0),de
   052E 21 02 00           1286 	ld hl,#2		; 2
   0531 22 37 01           1287 	ld (StupidR1),hl
   0534 2A 41 01           1288 	ld hl,(StupidMP)		; MP@
   0537 22 39 01           1289 	ld (StupidR2),hl
   053A 2A 39 01           1290 	ld hl,(StupidR2)		; SWAP
   053D ED 5B 37 01        1291 	ld de,(StupidR1)
   0541 22 37 01           1292 	ld (StupidR1),hl
   0544 ED 53 39 01        1293 	ld (StupidR2),de
   0548 ED 5B 39 01        1294 	ld de,(StupidR2)		; -
   054C 2A 37 01           1295 	ld hl,(StupidR1)
   054F 7D                 1296 	ld a,l
   0550 93                 1297 	sub a,e
   0551 6F                 1298 	ld l,a
   0552 7C                 1299 	ld a,h
   0553 9A                 1300 	sbc a,d
   0554 67                 1301 	ld h,a
   0555 22 37 01           1302 	ld (StupidR1),hl
   0558 2A 37 01           1303 	ld hl,(StupidR1)		; MP!
   055B 22 41 01           1304 	ld (StupidMP),hl
                           1305 ; If the flag is zero, branch.
   055E CD D1 01           1306 	call StupidElseGo0		; ELSEGO pBranch
   0561 DA 04              1307 	.word pBranch
                           1308 ; Otherwise, skip the offset and continue.
   0563 2A 3F 01           1309 	ld hl,(StupidIP)		; IP@
   0566 22 35 01           1310 	ld (StupidR0),hl
   0569 21 02 00           1311 	ld hl,#2		; 2
   056C 22 37 01           1312 	ld (StupidR1),hl
   056F ED 5B 37 01        1313 	ld de,(StupidR1)		; +
   0573 2A 35 01           1314 	ld hl,(StupidR0)
   0576 19                 1315 	add hl,de
   0577 22 35 01           1316 	ld (StupidR0),hl
   057A 2A 35 01           1317 	ld hl,(StupidR0)		; IP!
   057D 22 3F 01           1318 	ld (StupidIP),hl
   0580 2A CB 01           1319 	ld hl,(StupidNEXT)		; NEXT@
   0583 22 35 01           1320 	ld (StupidR0),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 25.
Hexidecimal [16-Bits]



   0586 2A 35 01           1321 	ld hl,(StupidR0)		; PC!
   0589 E9                 1322 	jp (hl)
                           1323 
                           1324 
                           1325 ; ----	($) -- word # 8
                           1326 
   058A                    1327 W8_Name:
                           1328 
                           1329 	; stringengize( ($) )
   058A 28                 1330 .byte 0x28
   058B 24                 1331 .byte 0x24
   058C 29                 1332 .byte 0x29
                           1333 
   058D 03 00              1334 	.word ( . - W8_Name ) + 0 
   058F 77 00              1335 	.word W8_CFA - W7_CFA
   0591                    1336 W8_CFA:
   0591 00 00              1337 	.word W8_CFA - .		; ($)
   0593                    1338 W8_PFA:
                           1339 ; ($) - Word which knows how to execute a string
                           1340 ; 
                           1341 ; M: ( -> Address of word's definition, length of string )
                           1342 ; R: ( -> )
                           1343 ; 
                           1344 ; This word executes a string variable. It puts the address of the
                           1345 ; first character of the string and the string's length on the
                           1346 ; math stack. (NEXT) conveniently leaves the address of the string's
                           1347 ; CFA in CFA.
                           1348 ; 
                           1349 ; Revisions:
                           1350 ; 07/29/99 RLI - code version.
                           1351 ; 	05/10/01 RLI - Forgot to go to the word's definition before
                           1352 ; 	               skipping the count byte.
                           1353 ; Make space on the math stack for two cells.
   0593 21 02 00           1354 	ld hl,#2		; 2
   0596 22 35 01           1355 	ld (StupidR0),hl
   0599 2A 35 01           1356 	ld hl,(StupidR0)		; DUP
   059C 22 37 01           1357 	ld (StupidR1),hl
   059F ED 5B 37 01        1358 	ld de,(StupidR1)		; +
   05A3 2A 35 01           1359 	ld hl,(StupidR0)
   05A6 19                 1360 	add hl,de
   05A7 22 35 01           1361 	ld (StupidR0),hl
   05AA 2A 41 01           1362 	ld hl,(StupidMP)		; MP@
   05AD 22 37 01           1363 	ld (StupidR1),hl
   05B0 ED 5B 37 01        1364 	ld de,(StupidR1)		; +
   05B4 2A 35 01           1365 	ld hl,(StupidR0)
   05B7 19                 1366 	add hl,de
   05B8 22 35 01           1367 	ld (StupidR0),hl
   05BB 2A 35 01           1368 	ld hl,(StupidR0)		; MP!
   05BE 22 41 01           1369 	ld (StupidMP),hl
                           1370 ; Calculate the address of the word's definition and fetch the length
                           1371 ; byte from it into the top of the math stack.
   05C1 2A 3D 01           1372 	ld hl,(StupidCFA)		; CFA@
   05C4 22 35 01           1373 	ld (StupidR0),hl
   05C7 21 02 00           1374 	ld hl,#2		; 2
   05CA 22 37 01           1375 	ld (StupidR1),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 26.
Hexidecimal [16-Bits]



   05CD ED 5B 37 01        1376 	ld de,(StupidR1)		; +
   05D1 2A 35 01           1377 	ld hl,(StupidR0)
   05D4 19                 1378 	add hl,de
   05D5 22 35 01           1379 	ld (StupidR0),hl
   05D8 2A 35 01           1380 	ld hl,(StupidR0)		; @.zb
   05DB 7E                 1381 	ld a,(hl)
   05DC 6F                 1382 	ld l,a
   05DD AF                 1383 	xor a,a
   05DE 67                 1384 	ld h,a
   05DF 22 35 01           1385 	ld (StupidR0),hl
   05E2 2A 41 01           1386 	ld hl,(StupidMP)		; MP@
   05E5 22 37 01           1387 	ld (StupidR1),hl
   05E8 2A 37 01           1388 	ld hl,(StupidR1)		; !
   05EB ED 5B 35 01        1389 	ld de,(StupidR0)
   05EF 73                 1390 	ld (hl),e
   05F0 23                 1391 	inc hl
   05F1 72                 1392 	ld (hl),d
                           1393 ; Calculate the address of the start of the string data, leaving the
                           1394 ; result in the second of the math stack.
   05F2 2A 3D 01           1395 	ld hl,(StupidCFA)		; CFA@
   05F5 22 35 01           1396 	ld (StupidR0),hl
   05F8 21 02 00           1397 	ld hl,#2		; 2
   05FB 22 37 01           1398 	ld (StupidR1),hl
   05FE ED 5B 37 01        1399 	ld de,(StupidR1)		; +
   0602 2A 35 01           1400 	ld hl,(StupidR0)
   0605 19                 1401 	add hl,de
   0606 22 35 01           1402 	ld (StupidR0),hl
   0609 21 01 00           1403 	ld hl,#1		; 1
   060C 22 37 01           1404 	ld (StupidR1),hl
   060F ED 5B 37 01        1405 	ld de,(StupidR1)		; +
   0613 2A 35 01           1406 	ld hl,(StupidR0)
   0616 19                 1407 	add hl,de
   0617 22 35 01           1408 	ld (StupidR0),hl
   061A 21 02 00           1409 	ld hl,#2		; 2
   061D 22 37 01           1410 	ld (StupidR1),hl
   0620 2A 41 01           1411 	ld hl,(StupidMP)		; MP@
   0623 22 39 01           1412 	ld (StupidR2),hl
   0626 2A 39 01           1413 	ld hl,(StupidR2)		; SWAP
   0629 ED 5B 37 01        1414 	ld de,(StupidR1)
   062D 22 37 01           1415 	ld (StupidR1),hl
   0630 ED 53 39 01        1416 	ld (StupidR2),de
   0634 ED 5B 39 01        1417 	ld de,(StupidR2)		; -
   0638 2A 37 01           1418 	ld hl,(StupidR1)
   063B 7D                 1419 	ld a,l
   063C 93                 1420 	sub a,e
   063D 6F                 1421 	ld l,a
   063E 7C                 1422 	ld a,h
   063F 9A                 1423 	sbc a,d
   0640 67                 1424 	ld h,a
   0641 22 37 01           1425 	ld (StupidR1),hl
   0644 2A 37 01           1426 	ld hl,(StupidR1)		; !
   0647 ED 5B 35 01        1427 	ld de,(StupidR0)
   064B 73                 1428 	ld (hl),e
   064C 23                 1429 	inc hl
   064D 72                 1430 	ld (hl),d
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 27.
Hexidecimal [16-Bits]



   064E 2A CB 01           1431 	ld hl,(StupidNEXT)		; NEXT@
   0651 22 35 01           1432 	ld (StupidR0),hl
   0654 2A 35 01           1433 	ld hl,(StupidR0)		; PC!
   0657 E9                 1434 	jp (hl)
                           1435 ; ----
                           1436 ; 
                           1437 ; Fetches and stores
                           1438 ; 
                           1439 ; ----
                           1440 
                           1441 
                           1442 ; ----	@ -- word # 9
                           1443 
   0658                    1444 W9_Name:
                           1445 
                           1446 	; stringengize( @ )
   0658 40                 1447 .byte 0x40
                           1448 
   0659 01 00              1449 	.word ( . - W9_Name ) + 0 
   065B CC 00              1450 	.word W9_CFA - W8_CFA
   065D                    1451 W9_CFA:
   065D 00 00              1452 	.word W9_CFA - .		; @
   065F                    1453 W9_PFA:
                           1454 ; @ - Longword fetch
                           1455 ; 
                           1456 ; M: ( a -> b )
                           1457 ; R: ( -> )
                           1458 ; 
                           1459 ; a is used as an address to fetch b.
                           1460 ; 
                           1461 ; Revisions:
                           1462 ; 07/29/99 RLI - code version
                           1463 ; Fetch a from the math stack
   065F 2A 41 01           1464 	ld hl,(StupidMP)		; MP@
   0662 22 35 01           1465 	ld (StupidR0),hl
   0665 2A 35 01           1466 	ld hl,(StupidR0)		; @
   0668 7E                 1467 	ld a,(hl)
   0669 5F                 1468 	ld e,a
   066A 23                 1469 	inc hl
   066B 7E                 1470 	ld a,(hl)
   066C 57                 1471 	ld d,a
   066D ED 53 35 01        1472 	ld (StupidR0),de
                           1473 ; Fetch the cell pointed to by a
   0671 2A 35 01           1474 	ld hl,(StupidR0)		; @
   0674 7E                 1475 	ld a,(hl)
   0675 5F                 1476 	ld e,a
   0676 23                 1477 	inc hl
   0677 7E                 1478 	ld a,(hl)
   0678 57                 1479 	ld d,a
   0679 ED 53 35 01        1480 	ld (StupidR0),de
                           1481 ; Replace a with b in the math stack
   067D 2A 41 01           1482 	ld hl,(StupidMP)		; MP@
   0680 22 37 01           1483 	ld (StupidR1),hl
   0683 2A 37 01           1484 	ld hl,(StupidR1)		; !
   0686 ED 5B 35 01        1485 	ld de,(StupidR0)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 28.
Hexidecimal [16-Bits]



   068A 73                 1486 	ld (hl),e
   068B 23                 1487 	inc hl
   068C 72                 1488 	ld (hl),d
   068D 2A CB 01           1489 	ld hl,(StupidNEXT)		; NEXT@
   0690 22 35 01           1490 	ld (StupidR0),hl
   0693 2A 35 01           1491 	ld hl,(StupidR0)		; PC!
   0696 E9                 1492 	jp (hl)
                           1493 
                           1494 
                           1495 ; ----	B@ -- word # 10
                           1496 
   0697                    1497 W10_Name:
                           1498 
                           1499 	; stringengize( B@ )
   0697 42                 1500 .byte 0x42
   0698 40                 1501 .byte 0x40
                           1502 
   0699 02 00              1503 	.word ( . - W10_Name ) + 0 
   069B 40 00              1504 	.word W10_CFA - W9_CFA
   069D                    1505 W10_CFA:
   069D 00 00              1506 	.word W10_CFA - .		; B@
   069F                    1507 W10_PFA:
                           1508 ; B@ - Byte fetch
                           1509 ; 
                           1510 ; M: ( a -> b )
                           1511 ; R: ( -> )
                           1512 ; 
                           1513 ; a is used as an address to fetch b. b is an unsigned byte; it's
                           1514 ; zero-extended to a cell.
                           1515 ; 
                           1516 ; Revisions:
                           1517 ; 07/29/96 RLI - Modified for new register usage
                           1518 ; 07/29/99 RLI - code version.
                           1519 ; Fetch the address of the byte from the math stack.
   069F 2A 41 01           1520 	ld hl,(StupidMP)		; MP@
   06A2 22 35 01           1521 	ld (StupidR0),hl
   06A5 2A 35 01           1522 	ld hl,(StupidR0)		; @
   06A8 7E                 1523 	ld a,(hl)
   06A9 5F                 1524 	ld e,a
   06AA 23                 1525 	inc hl
   06AB 7E                 1526 	ld a,(hl)
   06AC 57                 1527 	ld d,a
   06AD ED 53 35 01        1528 	ld (StupidR0),de
                           1529 ; Fetch and zero-extend the byte
   06B1 2A 35 01           1530 	ld hl,(StupidR0)		; @.zb
   06B4 7E                 1531 	ld a,(hl)
   06B5 6F                 1532 	ld l,a
   06B6 AF                 1533 	xor a,a
   06B7 67                 1534 	ld h,a
   06B8 22 35 01           1535 	ld (StupidR0),hl
                           1536 ; Replace the address in the math stack with the byte
   06BB 2A 41 01           1537 	ld hl,(StupidMP)		; MP@
   06BE 22 37 01           1538 	ld (StupidR1),hl
   06C1 2A 37 01           1539 	ld hl,(StupidR1)		; !
   06C4 ED 5B 35 01        1540 	ld de,(StupidR0)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 29.
Hexidecimal [16-Bits]



   06C8 73                 1541 	ld (hl),e
   06C9 23                 1542 	inc hl
   06CA 72                 1543 	ld (hl),d
   06CB 2A CB 01           1544 	ld hl,(StupidNEXT)		; NEXT@
   06CE 22 35 01           1545 	ld (StupidR0),hl
   06D1 2A 35 01           1546 	ld hl,(StupidR0)		; PC!
   06D4 E9                 1547 	jp (hl)
                           1548 
                           1549 
                           1550 ; ----	W@ -- word # 11
                           1551 
   06D5                    1552 W11_Name:
                           1553 
                           1554 	; stringengize( W@ )
   06D5 57                 1555 .byte 0x57
   06D6 40                 1556 .byte 0x40
                           1557 
   06D7 02 00              1558 	.word ( . - W11_Name ) + 0 
   06D9 3E 00              1559 	.word W11_CFA - W10_CFA
   06DB                    1560 W11_CFA:
   06DB 00 00              1561 	.word W11_CFA - .		; W@
   06DD                    1562 W11_PFA:
                           1563 ; W@ - word fetch
                           1564 ; 
                           1565 ; M: ( a -> b )
                           1566 ; R: ( -> )
                           1567 ; 
                           1568 ; a is used as an address to fetch b. b is an unsigned word; it's
                           1569 ; zero-extended to a cell.
                           1570 ; 
                           1571 ; Revisions:
                           1572 ; 07/30/99 RLI - code version
                           1573 ; Fetch the address from the math stack
   06DD 2A 41 01           1574 	ld hl,(StupidMP)		; MP@
   06E0 22 35 01           1575 	ld (StupidR0),hl
   06E3 2A 35 01           1576 	ld hl,(StupidR0)		; @
   06E6 7E                 1577 	ld a,(hl)
   06E7 5F                 1578 	ld e,a
   06E8 23                 1579 	inc hl
   06E9 7E                 1580 	ld a,(hl)
   06EA 57                 1581 	ld d,a
   06EB ED 53 35 01        1582 	ld (StupidR0),de
                           1583 ; Fetch and zeroextend the word
                           1584 					; @.zw -> @
   06EF 2A 35 01           1585 	ld hl,(StupidR0)		; @
   06F2 7E                 1586 	ld a,(hl)
   06F3 5F                 1587 	ld e,a
   06F4 23                 1588 	inc hl
   06F5 7E                 1589 	ld a,(hl)
   06F6 57                 1590 	ld d,a
   06F7 ED 53 35 01        1591 	ld (StupidR0),de
                           1592 ; Replace the address with the word on the math stack
   06FB 2A 41 01           1593 	ld hl,(StupidMP)		; MP@
   06FE 22 37 01           1594 	ld (StupidR1),hl
   0701 2A 37 01           1595 	ld hl,(StupidR1)		; !
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 30.
Hexidecimal [16-Bits]



   0704 ED 5B 35 01        1596 	ld de,(StupidR0)
   0708 73                 1597 	ld (hl),e
   0709 23                 1598 	inc hl
   070A 72                 1599 	ld (hl),d
   070B 2A CB 01           1600 	ld hl,(StupidNEXT)		; NEXT@
   070E 22 35 01           1601 	ld (StupidR0),hl
   0711 2A 35 01           1602 	ld hl,(StupidR0)		; PC!
   0714 E9                 1603 	jp (hl)
                           1604 
                           1605 
                           1606 ; ----	CVTW@ -- word # 12
                           1607 
   0715                    1608 W12_Name:
                           1609 
                           1610 	; stringengize( CVTW@ )
   0715 43                 1611 .byte 0x43
   0716 56                 1612 .byte 0x56
   0717 54                 1613 .byte 0x54
   0718 57                 1614 .byte 0x57
   0719 40                 1615 .byte 0x40
                           1616 
   071A 05 00              1617 	.word ( . - W12_Name ) + 0 
   071C 43 00              1618 	.word W12_CFA - W11_CFA
   071E                    1619 W12_CFA:
   071E 00 00              1620 	.word W12_CFA - .		; CVTW@
   0720                    1621 W12_PFA:
                           1622 ; CVTW@ - Convert word fetch
                           1623 ; 
                           1624 ; M: ( a -> b )
                           1625 ; R: ( -> )
                           1626 ; 
                           1627 ; a is used as an address to fetch b. b is a signed word; it's
                           1628 ; sign-extended to a cell.
                           1629 ; 
                           1630 ; Revisions:
                           1631 ; 
                           1632 ; 07/29/99 RLI - code version
                           1633 ; Fetch the address from which the word is to be fetched.
   0720 2A 41 01           1634 	ld hl,(StupidMP)		; MP@
   0723 22 35 01           1635 	ld (StupidR0),hl
   0726 2A 35 01           1636 	ld hl,(StupidR0)		; @
   0729 7E                 1637 	ld a,(hl)
   072A 5F                 1638 	ld e,a
   072B 23                 1639 	inc hl
   072C 7E                 1640 	ld a,(hl)
   072D 57                 1641 	ld d,a
   072E ED 53 35 01        1642 	ld (StupidR0),de
                           1643 ; Fetch the word and sign extend it
                           1644 					; @.sw -> @
   0732 2A 35 01           1645 	ld hl,(StupidR0)		; @
   0735 7E                 1646 	ld a,(hl)
   0736 5F                 1647 	ld e,a
   0737 23                 1648 	inc hl
   0738 7E                 1649 	ld a,(hl)
   0739 57                 1650 	ld d,a
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 31.
Hexidecimal [16-Bits]



   073A ED 53 35 01        1651 	ld (StupidR0),de
                           1652 ; Replace a with b
   073E 2A 41 01           1653 	ld hl,(StupidMP)		; MP@
   0741 22 37 01           1654 	ld (StupidR1),hl
   0744 2A 37 01           1655 	ld hl,(StupidR1)		; !
   0747 ED 5B 35 01        1656 	ld de,(StupidR0)
   074B 73                 1657 	ld (hl),e
   074C 23                 1658 	inc hl
   074D 72                 1659 	ld (hl),d
   074E 2A CB 01           1660 	ld hl,(StupidNEXT)		; NEXT@
   0751 22 35 01           1661 	ld (StupidR0),hl
   0754 2A 35 01           1662 	ld hl,(StupidR0)		; PC!
   0757 E9                 1663 	jp (hl)
                           1664 
                           1665 
                           1666 ; ----	! -- word # 13
                           1667 
   0758                    1668 W13_Name:
                           1669 
                           1670 	; stringengize( ! )
   0758 21                 1671 .byte 0x21
                           1672 
   0759 01 00              1673 	.word ( . - W13_Name ) + 0 
   075B 3F 00              1674 	.word W13_CFA - W12_CFA
   075D                    1675 W13_CFA:
   075D 00 00              1676 	.word W13_CFA - .		; !
   075F                    1677 W13_PFA:
                           1678 ; ! - Store
                           1679 ; 
                           1680 ; M: ( a b -> )
                           1681 ; R: ( -> )
                           1682 ; 
                           1683 ; The longword a is stored at address b.
                           1684 ; 
                           1685 ; Revisions:
                           1686 ; 07/29/99 RLI - code version
                           1687 ; Fetch a
   075F 21 02 00           1688 	ld hl,#2		; 2
   0762 22 35 01           1689 	ld (StupidR0),hl
   0765 2A 41 01           1690 	ld hl,(StupidMP)		; MP@
   0768 22 37 01           1691 	ld (StupidR1),hl
   076B 2A 37 01           1692 	ld hl,(StupidR1)		; SWAP
   076E ED 5B 35 01        1693 	ld de,(StupidR0)
   0772 22 35 01           1694 	ld (StupidR0),hl
   0775 ED 53 37 01        1695 	ld (StupidR1),de
   0779 ED 5B 37 01        1696 	ld de,(StupidR1)		; -
   077D 2A 35 01           1697 	ld hl,(StupidR0)
   0780 7D                 1698 	ld a,l
   0781 93                 1699 	sub a,e
   0782 6F                 1700 	ld l,a
   0783 7C                 1701 	ld a,h
   0784 9A                 1702 	sbc a,d
   0785 67                 1703 	ld h,a
   0786 22 35 01           1704 	ld (StupidR0),hl
   0789 2A 35 01           1705 	ld hl,(StupidR0)		; @
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 32.
Hexidecimal [16-Bits]



   078C 7E                 1706 	ld a,(hl)
   078D 5F                 1707 	ld e,a
   078E 23                 1708 	inc hl
   078F 7E                 1709 	ld a,(hl)
   0790 57                 1710 	ld d,a
   0791 ED 53 35 01        1711 	ld (StupidR0),de
                           1712 ; Fetch b
   0795 2A 41 01           1713 	ld hl,(StupidMP)		; MP@
   0798 22 37 01           1714 	ld (StupidR1),hl
   079B 2A 37 01           1715 	ld hl,(StupidR1)		; @
   079E 7E                 1716 	ld a,(hl)
   079F 5F                 1717 	ld e,a
   07A0 23                 1718 	inc hl
   07A1 7E                 1719 	ld a,(hl)
   07A2 57                 1720 	ld d,a
   07A3 ED 53 37 01        1721 	ld (StupidR1),de
                           1722 ; Store the longword
   07A7 2A 37 01           1723 	ld hl,(StupidR1)		; !
   07AA ED 5B 35 01        1724 	ld de,(StupidR0)
   07AE 73                 1725 	ld (hl),e
   07AF 23                 1726 	inc hl
   07B0 72                 1727 	ld (hl),d
                           1728 ; Drop a and b from the stack
   07B1 21 02 00           1729 	ld hl,#2		; 2
   07B4 22 35 01           1730 	ld (StupidR0),hl
   07B7 2A 35 01           1731 	ld hl,(StupidR0)		; DUP
   07BA 22 37 01           1732 	ld (StupidR1),hl
   07BD ED 5B 37 01        1733 	ld de,(StupidR1)		; +
   07C1 2A 35 01           1734 	ld hl,(StupidR0)
   07C4 19                 1735 	add hl,de
   07C5 22 35 01           1736 	ld (StupidR0),hl
   07C8 2A 41 01           1737 	ld hl,(StupidMP)		; MP@
   07CB 22 37 01           1738 	ld (StupidR1),hl
   07CE 2A 37 01           1739 	ld hl,(StupidR1)		; SWAP
   07D1 ED 5B 35 01        1740 	ld de,(StupidR0)
   07D5 22 35 01           1741 	ld (StupidR0),hl
   07D8 ED 53 37 01        1742 	ld (StupidR1),de
   07DC ED 5B 37 01        1743 	ld de,(StupidR1)		; -
   07E0 2A 35 01           1744 	ld hl,(StupidR0)
   07E3 7D                 1745 	ld a,l
   07E4 93                 1746 	sub a,e
   07E5 6F                 1747 	ld l,a
   07E6 7C                 1748 	ld a,h
   07E7 9A                 1749 	sbc a,d
   07E8 67                 1750 	ld h,a
   07E9 22 35 01           1751 	ld (StupidR0),hl
   07EC 2A 35 01           1752 	ld hl,(StupidR0)		; MP!
   07EF 22 41 01           1753 	ld (StupidMP),hl
   07F2 2A CB 01           1754 	ld hl,(StupidNEXT)		; NEXT@
   07F5 22 35 01           1755 	ld (StupidR0),hl
   07F8 2A 35 01           1756 	ld hl,(StupidR0)		; PC!
   07FB E9                 1757 	jp (hl)
                           1758 
                           1759 
                           1760 ; ----	B! -- word # 14
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 33.
Hexidecimal [16-Bits]



                           1761 
   07FC                    1762 W14_Name:
                           1763 
                           1764 	; stringengize( B! )
   07FC 42                 1765 .byte 0x42
   07FD 21                 1766 .byte 0x21
                           1767 
   07FE 02 00              1768 	.word ( . - W14_Name ) + 0 
   0800 A5 00              1769 	.word W14_CFA - W13_CFA
   0802                    1770 W14_CFA:
   0802 00 00              1771 	.word W14_CFA - .		; B!
   0804                    1772 W14_PFA:
                           1773 ; B! - Byte store
                           1774 ; 
                           1775 ; M: ( a b -> )
                           1776 ; R: ( -> )
                           1777 ; 
                           1778 ; The byte a is stored at address b.
                           1779 ; 
                           1780 ; Revisions:
                           1781 ; 07/29/99 RLI - code version
                           1782 ; Fetch the byte and the address at which it should be stored.
   0804 21 02 00           1783 	ld hl,#2		; 2
   0807 22 35 01           1784 	ld (StupidR0),hl
   080A 2A 41 01           1785 	ld hl,(StupidMP)		; MP@
   080D 22 37 01           1786 	ld (StupidR1),hl
   0810 2A 37 01           1787 	ld hl,(StupidR1)		; SWAP
   0813 ED 5B 35 01        1788 	ld de,(StupidR0)
   0817 22 35 01           1789 	ld (StupidR0),hl
   081A ED 53 37 01        1790 	ld (StupidR1),de
   081E ED 5B 37 01        1791 	ld de,(StupidR1)		; -
   0822 2A 35 01           1792 	ld hl,(StupidR0)
   0825 7D                 1793 	ld a,l
   0826 93                 1794 	sub a,e
   0827 6F                 1795 	ld l,a
   0828 7C                 1796 	ld a,h
   0829 9A                 1797 	sbc a,d
   082A 67                 1798 	ld h,a
   082B 22 35 01           1799 	ld (StupidR0),hl
   082E 2A 35 01           1800 	ld hl,(StupidR0)		; @
   0831 7E                 1801 	ld a,(hl)
   0832 5F                 1802 	ld e,a
   0833 23                 1803 	inc hl
   0834 7E                 1804 	ld a,(hl)
   0835 57                 1805 	ld d,a
   0836 ED 53 35 01        1806 	ld (StupidR0),de
   083A 2A 41 01           1807 	ld hl,(StupidMP)		; MP@
   083D 22 37 01           1808 	ld (StupidR1),hl
   0840 2A 37 01           1809 	ld hl,(StupidR1)		; @
   0843 7E                 1810 	ld a,(hl)
   0844 5F                 1811 	ld e,a
   0845 23                 1812 	inc hl
   0846 7E                 1813 	ld a,(hl)
   0847 57                 1814 	ld d,a
   0848 ED 53 37 01        1815 	ld (StupidR1),de
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 34.
Hexidecimal [16-Bits]



                           1816 ; Store the byte a at address b
   084C 2A 37 01           1817 	ld hl,(StupidR1)		; !.b
   084F ED 5B 35 01        1818 	ld de,(StupidR0)
   0853 73                 1819 	ld (hl),e
                           1820 ; Drop a and b from the math stack
   0854 21 02 00           1821 	ld hl,#2		; 2
   0857 22 35 01           1822 	ld (StupidR0),hl
   085A 2A 35 01           1823 	ld hl,(StupidR0)		; DUP
   085D 22 37 01           1824 	ld (StupidR1),hl
   0860 ED 5B 37 01        1825 	ld de,(StupidR1)		; +
   0864 2A 35 01           1826 	ld hl,(StupidR0)
   0867 19                 1827 	add hl,de
   0868 22 35 01           1828 	ld (StupidR0),hl
   086B 2A 41 01           1829 	ld hl,(StupidMP)		; MP@
   086E 22 37 01           1830 	ld (StupidR1),hl
   0871 2A 37 01           1831 	ld hl,(StupidR1)		; SWAP
   0874 ED 5B 35 01        1832 	ld de,(StupidR0)
   0878 22 35 01           1833 	ld (StupidR0),hl
   087B ED 53 37 01        1834 	ld (StupidR1),de
   087F ED 5B 37 01        1835 	ld de,(StupidR1)		; -
   0883 2A 35 01           1836 	ld hl,(StupidR0)
   0886 7D                 1837 	ld a,l
   0887 93                 1838 	sub a,e
   0888 6F                 1839 	ld l,a
   0889 7C                 1840 	ld a,h
   088A 9A                 1841 	sbc a,d
   088B 67                 1842 	ld h,a
   088C 22 35 01           1843 	ld (StupidR0),hl
   088F 2A 35 01           1844 	ld hl,(StupidR0)		; MP!
   0892 22 41 01           1845 	ld (StupidMP),hl
   0895 2A CB 01           1846 	ld hl,(StupidNEXT)		; NEXT@
   0898 22 35 01           1847 	ld (StupidR0),hl
   089B 2A 35 01           1848 	ld hl,(StupidR0)		; PC!
   089E E9                 1849 	jp (hl)
                           1850 
                           1851 
                           1852 ; ----	W! -- word # 15
                           1853 
   089F                    1854 W15_Name:
                           1855 
                           1856 	; stringengize( W! )
   089F 57                 1857 .byte 0x57
   08A0 21                 1858 .byte 0x21
                           1859 
   08A1 02 00              1860 	.word ( . - W15_Name ) + 0 
   08A3 A3 00              1861 	.word W15_CFA - W14_CFA
   08A5                    1862 W15_CFA:
   08A5 00 00              1863 	.word W15_CFA - .		; W!
   08A7                    1864 W15_PFA:
                           1865 ; W! - Word store
                           1866 ; 
                           1867 ; M: ( a, b -> )
                           1868 ; R: ( -> )
                           1869 ; 
                           1870 ; The word a is stored at address b.
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 35.
Hexidecimal [16-Bits]



                           1871 ; 
                           1872 ; Revisions:
                           1873 ; 07/29/99 RLI - code version
                           1874 ; Fetch a
   08A7 21 02 00           1875 	ld hl,#2		; 2
   08AA 22 35 01           1876 	ld (StupidR0),hl
   08AD 2A 41 01           1877 	ld hl,(StupidMP)		; MP@
   08B0 22 37 01           1878 	ld (StupidR1),hl
   08B3 2A 37 01           1879 	ld hl,(StupidR1)		; SWAP
   08B6 ED 5B 35 01        1880 	ld de,(StupidR0)
   08BA 22 35 01           1881 	ld (StupidR0),hl
   08BD ED 53 37 01        1882 	ld (StupidR1),de
   08C1 ED 5B 37 01        1883 	ld de,(StupidR1)		; -
   08C5 2A 35 01           1884 	ld hl,(StupidR0)
   08C8 7D                 1885 	ld a,l
   08C9 93                 1886 	sub a,e
   08CA 6F                 1887 	ld l,a
   08CB 7C                 1888 	ld a,h
   08CC 9A                 1889 	sbc a,d
   08CD 67                 1890 	ld h,a
   08CE 22 35 01           1891 	ld (StupidR0),hl
   08D1 2A 35 01           1892 	ld hl,(StupidR0)		; @
   08D4 7E                 1893 	ld a,(hl)
   08D5 5F                 1894 	ld e,a
   08D6 23                 1895 	inc hl
   08D7 7E                 1896 	ld a,(hl)
   08D8 57                 1897 	ld d,a
   08D9 ED 53 35 01        1898 	ld (StupidR0),de
                           1899 ; Fetch b
   08DD 2A 41 01           1900 	ld hl,(StupidMP)		; MP@
   08E0 22 37 01           1901 	ld (StupidR1),hl
   08E3 2A 37 01           1902 	ld hl,(StupidR1)		; @
   08E6 7E                 1903 	ld a,(hl)
   08E7 5F                 1904 	ld e,a
   08E8 23                 1905 	inc hl
   08E9 7E                 1906 	ld a,(hl)
   08EA 57                 1907 	ld d,a
   08EB ED 53 37 01        1908 	ld (StupidR1),de
                           1909 ; Store a at b
                           1910 					; !.w -> !
   08EF 2A 37 01           1911 	ld hl,(StupidR1)		; !
   08F2 ED 5B 35 01        1912 	ld de,(StupidR0)
   08F6 73                 1913 	ld (hl),e
   08F7 23                 1914 	inc hl
   08F8 72                 1915 	ld (hl),d
                           1916 ; Drop a and b from the math stack
   08F9 21 02 00           1917 	ld hl,#2		; 2
   08FC 22 35 01           1918 	ld (StupidR0),hl
   08FF 2A 35 01           1919 	ld hl,(StupidR0)		; DUP
   0902 22 37 01           1920 	ld (StupidR1),hl
   0905 ED 5B 37 01        1921 	ld de,(StupidR1)		; +
   0909 2A 35 01           1922 	ld hl,(StupidR0)
   090C 19                 1923 	add hl,de
   090D 22 35 01           1924 	ld (StupidR0),hl
   0910 2A 41 01           1925 	ld hl,(StupidMP)		; MP@
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 36.
Hexidecimal [16-Bits]



   0913 22 37 01           1926 	ld (StupidR1),hl
   0916 2A 37 01           1927 	ld hl,(StupidR1)		; SWAP
   0919 ED 5B 35 01        1928 	ld de,(StupidR0)
   091D 22 35 01           1929 	ld (StupidR0),hl
   0920 ED 53 37 01        1930 	ld (StupidR1),de
   0924 ED 5B 37 01        1931 	ld de,(StupidR1)		; -
   0928 2A 35 01           1932 	ld hl,(StupidR0)
   092B 7D                 1933 	ld a,l
   092C 93                 1934 	sub a,e
   092D 6F                 1935 	ld l,a
   092E 7C                 1936 	ld a,h
   092F 9A                 1937 	sbc a,d
   0930 67                 1938 	ld h,a
   0931 22 35 01           1939 	ld (StupidR0),hl
   0934 2A 35 01           1940 	ld hl,(StupidR0)		; MP!
   0937 22 41 01           1941 	ld (StupidMP),hl
   093A 2A CB 01           1942 	ld hl,(StupidNEXT)		; NEXT@
   093D 22 35 01           1943 	ld (StupidR0),hl
   0940 2A 35 01           1944 	ld hl,(StupidR0)		; PC!
   0943 E9                 1945 	jp (hl)
                           1946 ; --	++ - Increments a variable
                           1947 ; 
                           1948 ; ( v -> )
                           1949 ; 
                           1950 ; The longword at v is fetched, incremented, and stored back.
                           1951 
                           1952 
                           1953 ; ----	++ -- word # 16
                           1954 
   0944                    1955 W16_Name:
                           1956 
                           1957 	; stringengize( ++ )
   0944 2B                 1958 .byte 0x2b
   0945 2B                 1959 .byte 0x2b
                           1960 
   0946 02 00              1961 	.word ( . - W16_Name ) + 0 
   0948 A5 00              1962 	.word W16_CFA - W15_CFA
   094A                    1963 W16_CFA:
   094A 08 FA              1964 	.word W2_CFA - .		; (:)
   094C                    1965 W16_PFA:
   094C 15 00              1966 	.word W17_CFA - .		; DUP
   094E 0F FD              1967 	.word W9_CFA - .		; @
   0950 57 08              1968 	.word W18_CFA - .		; 1
   0952 18 04              1969 	.word W19_CFA - .		; +
   0954 60 00              1970 	.word W20_CFA - .		; SWAP
   0956 07 FE              1971 	.word W13_CFA - .		; !
   0958 70 FA              1972 	.word W3_CFA - .		; (;)
                           1973 ; ----
                           1974 ; 
                           1975 ; Stack manipulation
                           1976 ; 
                           1977 ; ----
                           1978 
                           1979 
                           1980 ; ----	DUP -- word # 17
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 37.
Hexidecimal [16-Bits]



                           1981 
   095A                    1982 W17_Name:
                           1983 
                           1984 	; stringengize( DUP )
   095A 44                 1985 .byte 0x44
   095B 55                 1986 .byte 0x55
   095C 50                 1987 .byte 0x50
                           1988 
   095D 03 00              1989 	.word ( . - W17_Name ) + 0 
   095F 17 00              1990 	.word W17_CFA - W16_CFA
   0961                    1991 W17_CFA:
   0961 00 00              1992 	.word W17_CFA - .		; DUP
   0963                    1993 W17_PFA:
                           1994 ; DUP - Duplicate top of stack
                           1995 ; 
                           1996 ; M: ( a -> a, a )
                           1997 ; R: ( -> )
                           1998 ; 
                           1999 ; Push a copy of whatever is on the top of the math stack onto the
                           2000 ; math stack.
                           2001 ; 
                           2002 ; Revisions:
                           2003 ; 07/29/96 RLI - Modified for new register usage.
                           2004 ; 07/29/99 RLI - code version
                           2005 ; Fetch a
   0963 2A 41 01           2006 	ld hl,(StupidMP)		; MP@
   0966 22 35 01           2007 	ld (StupidR0),hl
   0969 2A 35 01           2008 	ld hl,(StupidR0)		; @
   096C 7E                 2009 	ld a,(hl)
   096D 5F                 2010 	ld e,a
   096E 23                 2011 	inc hl
   096F 7E                 2012 	ld a,(hl)
   0970 57                 2013 	ld d,a
   0971 ED 53 35 01        2014 	ld (StupidR0),de
                           2015 ; Make space for the copy of a on the math stack
   0975 21 02 00           2016 	ld hl,#2		; 2
   0978 22 37 01           2017 	ld (StupidR1),hl
   097B 2A 41 01           2018 	ld hl,(StupidMP)		; MP@
   097E 22 39 01           2019 	ld (StupidR2),hl
   0981 ED 5B 39 01        2020 	ld de,(StupidR2)		; +
   0985 2A 37 01           2021 	ld hl,(StupidR1)
   0988 19                 2022 	add hl,de
   0989 22 37 01           2023 	ld (StupidR1),hl
   098C 2A 37 01           2024 	ld hl,(StupidR1)		; MP!
   098F 22 41 01           2025 	ld (StupidMP),hl
                           2026 ; Store the new copy of a
   0992 2A 41 01           2027 	ld hl,(StupidMP)		; MP@
   0995 22 37 01           2028 	ld (StupidR1),hl
   0998 2A 37 01           2029 	ld hl,(StupidR1)		; !
   099B ED 5B 35 01        2030 	ld de,(StupidR0)
   099F 73                 2031 	ld (hl),e
   09A0 23                 2032 	inc hl
   09A1 72                 2033 	ld (hl),d
   09A2 2A CB 01           2034 	ld hl,(StupidNEXT)		; NEXT@
   09A5 22 35 01           2035 	ld (StupidR0),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 38.
Hexidecimal [16-Bits]



   09A8 2A 35 01           2036 	ld hl,(StupidR0)		; PC!
   09AB E9                 2037 	jp (hl)
                           2038 
                           2039 
                           2040 ; ----	SWAP -- word # 20
                           2041 
   09AC                    2042 W20_Name:
                           2043 
                           2044 	; stringengize( SWAP )
   09AC 53                 2045 .byte 0x53
   09AD 57                 2046 .byte 0x57
   09AE 41                 2047 .byte 0x41
   09AF 50                 2048 .byte 0x50
                           2049 
   09B0 04 00              2050 	.word ( . - W20_Name ) + 0 
   09B2 53 00              2051 	.word W20_CFA - W17_CFA
   09B4                    2052 W20_CFA:
   09B4 00 00              2053 	.word W20_CFA - .		; SWAP
   09B6                    2054 W20_PFA:
                           2055 ; SWAP - Swap the top two items on the stack
                           2056 ; 
                           2057 ; M: ( a, b -> b, a )
                           2058 ; R: ( -> )
                           2059 ; 
                           2060 ; Revisions:
                           2061 ; 07/29/99 RLI - code version
                           2062 ; Fetch a and b
   09B6 21 02 00           2063 	ld hl,#2		; 2
   09B9 22 35 01           2064 	ld (StupidR0),hl
   09BC 2A 41 01           2065 	ld hl,(StupidMP)		; MP@
   09BF 22 37 01           2066 	ld (StupidR1),hl
   09C2 2A 37 01           2067 	ld hl,(StupidR1)		; SWAP
   09C5 ED 5B 35 01        2068 	ld de,(StupidR0)
   09C9 22 35 01           2069 	ld (StupidR0),hl
   09CC ED 53 37 01        2070 	ld (StupidR1),de
   09D0 ED 5B 37 01        2071 	ld de,(StupidR1)		; -
   09D4 2A 35 01           2072 	ld hl,(StupidR0)
   09D7 7D                 2073 	ld a,l
   09D8 93                 2074 	sub a,e
   09D9 6F                 2075 	ld l,a
   09DA 7C                 2076 	ld a,h
   09DB 9A                 2077 	sbc a,d
   09DC 67                 2078 	ld h,a
   09DD 22 35 01           2079 	ld (StupidR0),hl
   09E0 2A 35 01           2080 	ld hl,(StupidR0)		; @
   09E3 7E                 2081 	ld a,(hl)
   09E4 5F                 2082 	ld e,a
   09E5 23                 2083 	inc hl
   09E6 7E                 2084 	ld a,(hl)
   09E7 57                 2085 	ld d,a
   09E8 ED 53 35 01        2086 	ld (StupidR0),de
   09EC 2A 41 01           2087 	ld hl,(StupidMP)		; MP@
   09EF 22 37 01           2088 	ld (StupidR1),hl
   09F2 2A 37 01           2089 	ld hl,(StupidR1)		; @
   09F5 7E                 2090 	ld a,(hl)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 39.
Hexidecimal [16-Bits]



   09F6 5F                 2091 	ld e,a
   09F7 23                 2092 	inc hl
   09F8 7E                 2093 	ld a,(hl)
   09F9 57                 2094 	ld d,a
   09FA ED 53 37 01        2095 	ld (StupidR1),de
                           2096 ; Store b and a
   09FE 21 02 00           2097 	ld hl,#2		; 2
   0A01 22 39 01           2098 	ld (StupidR2),hl
   0A04 2A 41 01           2099 	ld hl,(StupidMP)		; MP@
   0A07 22 3B 01           2100 	ld (StupidR3),hl
   0A0A 2A 3B 01           2101 	ld hl,(StupidR3)		; SWAP
   0A0D ED 5B 39 01        2102 	ld de,(StupidR2)
   0A11 22 39 01           2103 	ld (StupidR2),hl
   0A14 ED 53 3B 01        2104 	ld (StupidR3),de
   0A18 ED 5B 3B 01        2105 	ld de,(StupidR3)		; -
   0A1C 2A 39 01           2106 	ld hl,(StupidR2)
   0A1F 7D                 2107 	ld a,l
   0A20 93                 2108 	sub a,e
   0A21 6F                 2109 	ld l,a
   0A22 7C                 2110 	ld a,h
   0A23 9A                 2111 	sbc a,d
   0A24 67                 2112 	ld h,a
   0A25 22 39 01           2113 	ld (StupidR2),hl
   0A28 2A 39 01           2114 	ld hl,(StupidR2)		; !
   0A2B ED 5B 37 01        2115 	ld de,(StupidR1)
   0A2F 73                 2116 	ld (hl),e
   0A30 23                 2117 	inc hl
   0A31 72                 2118 	ld (hl),d
   0A32 2A 41 01           2119 	ld hl,(StupidMP)		; MP@
   0A35 22 37 01           2120 	ld (StupidR1),hl
   0A38 2A 37 01           2121 	ld hl,(StupidR1)		; !
   0A3B ED 5B 35 01        2122 	ld de,(StupidR0)
   0A3F 73                 2123 	ld (hl),e
   0A40 23                 2124 	inc hl
   0A41 72                 2125 	ld (hl),d
   0A42 2A CB 01           2126 	ld hl,(StupidNEXT)		; NEXT@
   0A45 22 35 01           2127 	ld (StupidR0),hl
   0A48 2A 35 01           2128 	ld hl,(StupidR0)		; PC!
   0A4B E9                 2129 	jp (hl)
                           2130 
                           2131 
                           2132 ; ----	DROP -- word # 21
                           2133 
   0A4C                    2134 W21_Name:
                           2135 
                           2136 	; stringengize( DROP )
   0A4C 44                 2137 .byte 0x44
   0A4D 52                 2138 .byte 0x52
   0A4E 4F                 2139 .byte 0x4f
   0A4F 50                 2140 .byte 0x50
                           2141 
   0A50 04 00              2142 	.word ( . - W21_Name ) + 0 
   0A52 A0 00              2143 	.word W21_CFA - W20_CFA
   0A54                    2144 W21_CFA:
   0A54 00 00              2145 	.word W21_CFA - .		; DROP
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 40.
Hexidecimal [16-Bits]



   0A56                    2146 W21_PFA:
                           2147 ; DROP - Forget top of stack
                           2148 ; 
                           2149 ; M: ( a -> )
                           2150 ; R: ( -> )
                           2151 ; 
                           2152 ; This could be done as : DROP DUP - - ; but that's just as long as
                           2153 ; the machine code...
                           2154 ; 
                           2155 ; Revisions:
                           2156 ; 07/29/99 RLI - code version
                           2157 ; Drop a from the stack
   0A56 21 02 00           2158 	ld hl,#2		; 2
   0A59 22 35 01           2159 	ld (StupidR0),hl
   0A5C 2A 41 01           2160 	ld hl,(StupidMP)		; MP@
   0A5F 22 37 01           2161 	ld (StupidR1),hl
   0A62 2A 37 01           2162 	ld hl,(StupidR1)		; SWAP
   0A65 ED 5B 35 01        2163 	ld de,(StupidR0)
   0A69 22 35 01           2164 	ld (StupidR0),hl
   0A6C ED 53 37 01        2165 	ld (StupidR1),de
   0A70 ED 5B 37 01        2166 	ld de,(StupidR1)		; -
   0A74 2A 35 01           2167 	ld hl,(StupidR0)
   0A77 7D                 2168 	ld a,l
   0A78 93                 2169 	sub a,e
   0A79 6F                 2170 	ld l,a
   0A7A 7C                 2171 	ld a,h
   0A7B 9A                 2172 	sbc a,d
   0A7C 67                 2173 	ld h,a
   0A7D 22 35 01           2174 	ld (StupidR0),hl
   0A80 2A 35 01           2175 	ld hl,(StupidR0)		; MP!
   0A83 22 41 01           2176 	ld (StupidMP),hl
   0A86 2A CB 01           2177 	ld hl,(StupidNEXT)		; NEXT@
   0A89 22 35 01           2178 	ld (StupidR0),hl
   0A8C 2A 35 01           2179 	ld hl,(StupidR0)		; PC!
   0A8F E9                 2180 	jp (hl)
                           2181 
                           2182 
                           2183 ; ----	>R -- word # 22
                           2184 
   0A90                    2185 W22_Name:
                           2186 
                           2187 	; stringengize( >R )
   0A90 3E                 2188 .byte 0x3e
   0A91 52                 2189 .byte 0x52
                           2190 
   0A92 02 00              2191 	.word ( . - W22_Name ) + 0 
   0A94 42 00              2192 	.word W22_CFA - W21_CFA
   0A96                    2193 W22_CFA:
   0A96 00 00              2194 	.word W22_CFA - .		; >R
   0A98                    2195 W22_PFA:
                           2196 ; >R - Transfer an item from the math stack to the return stack
                           2197 ; 
                           2198 ; M:( a -> )
                           2199 ; R: ( -> a )
                           2200 ; 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 41.
Hexidecimal [16-Bits]



                           2201 ; Revisions:
                           2202 ; 07/29/99 RLI - code version
                           2203 ; Make space for an item on the return stack
   0A98 21 02 00           2204 	ld hl,#2		; 2
   0A9B 22 35 01           2205 	ld (StupidR0),hl
   0A9E 2A 43 01           2206 	ld hl,(StupidRP)		; RP@
   0AA1 22 37 01           2207 	ld (StupidR1),hl
   0AA4 2A 37 01           2208 	ld hl,(StupidR1)		; SWAP
   0AA7 ED 5B 35 01        2209 	ld de,(StupidR0)
   0AAB 22 35 01           2210 	ld (StupidR0),hl
   0AAE ED 53 37 01        2211 	ld (StupidR1),de
   0AB2 ED 5B 37 01        2212 	ld de,(StupidR1)		; -
   0AB6 2A 35 01           2213 	ld hl,(StupidR0)
   0AB9 7D                 2214 	ld a,l
   0ABA 93                 2215 	sub a,e
   0ABB 6F                 2216 	ld l,a
   0ABC 7C                 2217 	ld a,h
   0ABD 9A                 2218 	sbc a,d
   0ABE 67                 2219 	ld h,a
   0ABF 22 35 01           2220 	ld (StupidR0),hl
   0AC2 2A 35 01           2221 	ld hl,(StupidR0)		; RP!
   0AC5 22 43 01           2222 	ld (StupidRP),hl
                           2223 ; Copy a from the math stack to the return stack.
   0AC8 2A 41 01           2224 	ld hl,(StupidMP)		; MP@
   0ACB 22 35 01           2225 	ld (StupidR0),hl
   0ACE 2A 35 01           2226 	ld hl,(StupidR0)		; @
   0AD1 7E                 2227 	ld a,(hl)
   0AD2 5F                 2228 	ld e,a
   0AD3 23                 2229 	inc hl
   0AD4 7E                 2230 	ld a,(hl)
   0AD5 57                 2231 	ld d,a
   0AD6 ED 53 35 01        2232 	ld (StupidR0),de
   0ADA 2A 43 01           2233 	ld hl,(StupidRP)		; RP@
   0ADD 22 37 01           2234 	ld (StupidR1),hl
   0AE0 2A 37 01           2235 	ld hl,(StupidR1)		; !
   0AE3 ED 5B 35 01        2236 	ld de,(StupidR0)
   0AE7 73                 2237 	ld (hl),e
   0AE8 23                 2238 	inc hl
   0AE9 72                 2239 	ld (hl),d
                           2240 ; Drop a from the math stack.
   0AEA 21 02 00           2241 	ld hl,#2		; 2
   0AED 22 35 01           2242 	ld (StupidR0),hl
   0AF0 2A 41 01           2243 	ld hl,(StupidMP)		; MP@
   0AF3 22 37 01           2244 	ld (StupidR1),hl
   0AF6 2A 37 01           2245 	ld hl,(StupidR1)		; SWAP
   0AF9 ED 5B 35 01        2246 	ld de,(StupidR0)
   0AFD 22 35 01           2247 	ld (StupidR0),hl
   0B00 ED 53 37 01        2248 	ld (StupidR1),de
   0B04 ED 5B 37 01        2249 	ld de,(StupidR1)		; -
   0B08 2A 35 01           2250 	ld hl,(StupidR0)
   0B0B 7D                 2251 	ld a,l
   0B0C 93                 2252 	sub a,e
   0B0D 6F                 2253 	ld l,a
   0B0E 7C                 2254 	ld a,h
   0B0F 9A                 2255 	sbc a,d
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 42.
Hexidecimal [16-Bits]



   0B10 67                 2256 	ld h,a
   0B11 22 35 01           2257 	ld (StupidR0),hl
   0B14 2A 35 01           2258 	ld hl,(StupidR0)		; MP!
   0B17 22 41 01           2259 	ld (StupidMP),hl
   0B1A 2A CB 01           2260 	ld hl,(StupidNEXT)		; NEXT@
   0B1D 22 35 01           2261 	ld (StupidR0),hl
   0B20 2A 35 01           2262 	ld hl,(StupidR0)		; PC!
   0B23 E9                 2263 	jp (hl)
                           2264 
                           2265 
                           2266 ; ----	<R -- word # 23
                           2267 
   0B24                    2268 W23_Name:
                           2269 
                           2270 	; stringengize( <R )
   0B24 3C                 2271 .byte 0x3c
   0B25 52                 2272 .byte 0x52
                           2273 
   0B26 02 00              2274 	.word ( . - W23_Name ) + 0 
   0B28 94 00              2275 	.word W23_CFA - W22_CFA
   0B2A                    2276 W23_CFA:
   0B2A 00 00              2277 	.word W23_CFA - .		; <R
   0B2C                    2278 W23_PFA:
                           2279 ; <R - Transfer an item from the return stack to the math stack
                           2280 ; 
                           2281 ; M: ( -> a )
                           2282 ; R: ( a -> )
                           2283 ; 
                           2284 ; Revisions:
                           2285 ; 07/30/99 RLI - code version
                           2286 ; Make space on the math stack for one cell.
   0B2C 21 02 00           2287 	ld hl,#2		; 2
   0B2F 22 35 01           2288 	ld (StupidR0),hl
   0B32 2A 41 01           2289 	ld hl,(StupidMP)		; MP@
   0B35 22 37 01           2290 	ld (StupidR1),hl
   0B38 ED 5B 37 01        2291 	ld de,(StupidR1)		; +
   0B3C 2A 35 01           2292 	ld hl,(StupidR0)
   0B3F 19                 2293 	add hl,de
   0B40 22 35 01           2294 	ld (StupidR0),hl
   0B43 2A 35 01           2295 	ld hl,(StupidR0)		; MP!
   0B46 22 41 01           2296 	ld (StupidMP),hl
                           2297 ; Fetch the top of the return stack
   0B49 2A 43 01           2298 	ld hl,(StupidRP)		; RP@
   0B4C 22 35 01           2299 	ld (StupidR0),hl
   0B4F 2A 35 01           2300 	ld hl,(StupidR0)		; @
   0B52 7E                 2301 	ld a,(hl)
   0B53 5F                 2302 	ld e,a
   0B54 23                 2303 	inc hl
   0B55 7E                 2304 	ld a,(hl)
   0B56 57                 2305 	ld d,a
   0B57 ED 53 35 01        2306 	ld (StupidR0),de
                           2307 ; Store it on the math stack
   0B5B 2A 41 01           2308 	ld hl,(StupidMP)		; MP@
   0B5E 22 37 01           2309 	ld (StupidR1),hl
   0B61 2A 37 01           2310 	ld hl,(StupidR1)		; !
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 43.
Hexidecimal [16-Bits]



   0B64 ED 5B 35 01        2311 	ld de,(StupidR0)
   0B68 73                 2312 	ld (hl),e
   0B69 23                 2313 	inc hl
   0B6A 72                 2314 	ld (hl),d
                           2315 ; Drop a from the return stack.
   0B6B 21 02 00           2316 	ld hl,#2		; 2
   0B6E 22 35 01           2317 	ld (StupidR0),hl
   0B71 2A 43 01           2318 	ld hl,(StupidRP)		; RP@
   0B74 22 37 01           2319 	ld (StupidR1),hl
   0B77 ED 5B 37 01        2320 	ld de,(StupidR1)		; +
   0B7B 2A 35 01           2321 	ld hl,(StupidR0)
   0B7E 19                 2322 	add hl,de
   0B7F 22 35 01           2323 	ld (StupidR0),hl
   0B82 2A 35 01           2324 	ld hl,(StupidR0)		; RP!
   0B85 22 43 01           2325 	ld (StupidRP),hl
   0B88 2A CB 01           2326 	ld hl,(StupidNEXT)		; NEXT@
   0B8B 22 35 01           2327 	ld (StupidR0),hl
   0B8E 2A 35 01           2328 	ld hl,(StupidR0)		; PC!
   0B91 E9                 2329 	jp (hl)
                           2330 
                           2331 
                           2332 ; ----	R -- word # 24
                           2333 
   0B92                    2334 W24_Name:
                           2335 
                           2336 	; stringengize( R )
   0B92 52                 2337 .byte 0x52
                           2338 
   0B93 01 00              2339 	.word ( . - W24_Name ) + 0 
   0B95 6D 00              2340 	.word W24_CFA - W23_CFA
   0B97                    2341 W24_CFA:
   0B97 00 00              2342 	.word W24_CFA - .		; R
   0B99                    2343 W24_PFA:
                           2344 ; R - Transfer an item from the return stack to the math stack, but
                           2345 ;     don't pop the math stack.
                           2346 ; 
                           2347 ; M: ( -> a )
                           2348 ; R: ( a -> a )
                           2349 ; 
                           2350 ; Revisions:
                           2351 ; 07/29/99 RLI - code version.
                           2352 ; Make space on the math stack for one cell.
   0B99 21 02 00           2353 	ld hl,#2		; 2
   0B9C 22 35 01           2354 	ld (StupidR0),hl
   0B9F 2A 41 01           2355 	ld hl,(StupidMP)		; MP@
   0BA2 22 37 01           2356 	ld (StupidR1),hl
   0BA5 ED 5B 37 01        2357 	ld de,(StupidR1)		; +
   0BA9 2A 35 01           2358 	ld hl,(StupidR0)
   0BAC 19                 2359 	add hl,de
   0BAD 22 35 01           2360 	ld (StupidR0),hl
   0BB0 2A 35 01           2361 	ld hl,(StupidR0)		; MP!
   0BB3 22 41 01           2362 	ld (StupidMP),hl
                           2363 ; Copy the top of the return stack over to the math stack.
   0BB6 2A 43 01           2364 	ld hl,(StupidRP)		; RP@
   0BB9 22 35 01           2365 	ld (StupidR0),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 44.
Hexidecimal [16-Bits]



   0BBC 2A 35 01           2366 	ld hl,(StupidR0)		; @
   0BBF 7E                 2367 	ld a,(hl)
   0BC0 5F                 2368 	ld e,a
   0BC1 23                 2369 	inc hl
   0BC2 7E                 2370 	ld a,(hl)
   0BC3 57                 2371 	ld d,a
   0BC4 ED 53 35 01        2372 	ld (StupidR0),de
   0BC8 2A 41 01           2373 	ld hl,(StupidMP)		; MP@
   0BCB 22 37 01           2374 	ld (StupidR1),hl
   0BCE 2A 37 01           2375 	ld hl,(StupidR1)		; !
   0BD1 ED 5B 35 01        2376 	ld de,(StupidR0)
   0BD5 73                 2377 	ld (hl),e
   0BD6 23                 2378 	inc hl
   0BD7 72                 2379 	ld (hl),d
   0BD8 2A CB 01           2380 	ld hl,(StupidNEXT)		; NEXT@
   0BDB 22 35 01           2381 	ld (StupidR0),hl
   0BDE 2A 35 01           2382 	ld hl,(StupidR0)		; PC!
   0BE1 E9                 2383 	jp (hl)
                           2384 
                           2385 
                           2386 ; ----	RP! -- word # 25
                           2387 
   0BE2                    2388 W25_Name:
                           2389 
                           2390 	; stringengize( RP! )
   0BE2 52                 2391 .byte 0x52
   0BE3 50                 2392 .byte 0x50
   0BE4 21                 2393 .byte 0x21
                           2394 
   0BE5 03 00              2395 	.word ( . - W25_Name ) + 0 
   0BE7 52 00              2396 	.word W25_CFA - W24_CFA
   0BE9                    2397 W25_CFA:
   0BE9 00 00              2398 	.word W25_CFA - .		; RP!
   0BEB                    2399 W25_PFA:
                           2400 ; RP! - Initialize the return pointer
                           2401 ; 
                           2402 ; M: ( -> )
                           2403 ; R: Initialized
                           2404 ; 
                           2405 ; This is used during error recovery and system initialization. When
                           2406 ; aborting from an error, the return stack is cleaned and we go back
                           2407 ; to interpreting.
                           2408 ; 
                           2409 ; Revisions:
                           2410 ; 07/29/99 RLI - code version.
   0BEB 2A CD 01           2411 	ld hl,(StupidInitialRP)		; InitialRP@
   0BEE 22 35 01           2412 	ld (StupidR0),hl
   0BF1 2A 35 01           2413 	ld hl,(StupidR0)		; RP!
   0BF4 22 43 01           2414 	ld (StupidRP),hl
   0BF7 2A CB 01           2415 	ld hl,(StupidNEXT)		; NEXT@
   0BFA 22 35 01           2416 	ld (StupidR0),hl
   0BFD 2A 35 01           2417 	ld hl,(StupidR0)		; PC!
   0C00 E9                 2418 	jp (hl)
                           2419 ; --	OVER - Duplicate second item on math stack
                           2420 ; 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 45.
Hexidecimal [16-Bits]



                           2421 ; ( a b -> a b a )
                           2422 ; 
                           2423 ; This is smaller than the equivalent assembly on an i960
                           2424 
                           2425 
                           2426 ; ----	OVER -- word # 26
                           2427 
   0C01                    2428 W26_Name:
                           2429 
                           2430 	; stringengize( OVER )
   0C01 4F                 2431 .byte 0x4f
   0C02 56                 2432 .byte 0x56
   0C03 45                 2433 .byte 0x45
   0C04 52                 2434 .byte 0x52
                           2435 
   0C05 04 00              2436 	.word ( . - W26_Name ) + 0 
   0C07 20 00              2437 	.word W26_CFA - W25_CFA
   0C09                    2438 W26_CFA:
   0C09 49 F7              2439 	.word W2_CFA - .		; (:)
   0C0B                    2440 W26_PFA:
   0C0B 8B FE              2441 	.word W22_CFA - .		; >R
   0C0D 54 FD              2442 	.word W17_CFA - .		; DUP
   0C0F 1B FF              2443 	.word W23_CFA - .		; <R
   0C11 A3 FD              2444 	.word W20_CFA - .		; SWAP
   0C13 B5 F7              2445 	.word W3_CFA - .		; (;)
                           2446 
                           2447 
                           2448 ; ----	MP! -- word # 27
                           2449 
   0C15                    2450 W27_Name:
                           2451 
                           2452 	; stringengize( MP! )
   0C15 4D                 2453 .byte 0x4d
   0C16 50                 2454 .byte 0x50
   0C17 21                 2455 .byte 0x21
                           2456 
   0C18 03 00              2457 	.word ( . - W27_Name ) + 0 
   0C1A 13 00              2458 	.word W27_CFA - W26_CFA
   0C1C                    2459 W27_CFA:
   0C1C 00 00              2460 	.word W27_CFA - .		; MP!
   0C1E                    2461 W27_PFA:
                           2462 ; MP! - Initialize the math stack pointer
                           2463 ; 
                           2464 ; M: Initialized
                           2465 ; R: ( -> )
                           2466 ; 
                           2467 ; This is used during error recovery and system initialization. When
                           2468 ; aborting from an error, the math  stack is cleaned and we go back
                           2469 ; to interpreting.
                           2470 ; 
                           2471 ; Revisions:
                           2472 ; 07/29/99 RLI - code version
                           2473 ; Initialize MP
   0C1E 2A CF 01           2474 	ld hl,(StupidInitialMP)		; InitialMP@
   0C21 22 35 01           2475 	ld (StupidR0),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 46.
Hexidecimal [16-Bits]



   0C24 2A 35 01           2476 	ld hl,(StupidR0)		; MP!
   0C27 22 41 01           2477 	ld (StupidMP),hl
   0C2A 2A CB 01           2478 	ld hl,(StupidNEXT)		; NEXT@
   0C2D 22 35 01           2479 	ld (StupidR0),hl
   0C30 2A 35 01           2480 	ld hl,(StupidR0)		; PC!
   0C33 E9                 2481 	jp (hl)
                           2482 
                           2483 
                           2484 ; ----	MP@ -- word # 28
                           2485 
   0C34                    2486 W28_Name:
                           2487 
                           2488 	; stringengize( MP@ )
   0C34 4D                 2489 .byte 0x4d
   0C35 50                 2490 .byte 0x50
   0C36 40                 2491 .byte 0x40
                           2492 
   0C37 03 00              2493 	.word ( . - W28_Name ) + 0 
   0C39 1F 00              2494 	.word W28_CFA - W27_CFA
   0C3B                    2495 W28_CFA:
   0C3B 00 00              2496 	.word W28_CFA - .		; MP@
   0C3D                    2497 W28_PFA:
                           2498 ; MP@ - Fetch the math stack pointer
                           2499 ; 
                           2500 ; M: ( -> MP )
                           2501 ; R: ( -> )
                           2502 ; 
                           2503 ; This is used by the compiler to verify that the stack has been cleaned
                           2504 ; off at the end of compilation. If the math stack at the start of
                           2505 ; compilation and the math stack at the end of compilation don't match,
                           2506 ; there is probably an unclosed control loop.
                           2507 ; 
                           2508 ; It should not be assumed that the value returned by MP@ can be used
                           2509 ; as an address from which the top item of the math stack can be
                           2510 ; fetched; different implementations will have different levels of
                           2511 ; stack caching and even differing points in MP@ where the pointer
                           2512 ; is updated to make room for a copy of itself.
                           2513 ; 
                           2514 ; Revisions:
                           2515 ; 07/29/99 RLI - code version
                           2516 ; Make space on the math stack for one cell.
   0C3D 21 02 00           2517 	ld hl,#2		; 2
   0C40 22 35 01           2518 	ld (StupidR0),hl
   0C43 2A 41 01           2519 	ld hl,(StupidMP)		; MP@
   0C46 22 37 01           2520 	ld (StupidR1),hl
   0C49 ED 5B 37 01        2521 	ld de,(StupidR1)		; +
   0C4D 2A 35 01           2522 	ld hl,(StupidR0)
   0C50 19                 2523 	add hl,de
   0C51 22 35 01           2524 	ld (StupidR0),hl
   0C54 2A 35 01           2525 	ld hl,(StupidR0)		; MP!
   0C57 22 41 01           2526 	ld (StupidMP),hl
                           2527 ; Store a copy of the MP on the math stack.
   0C5A 2A 41 01           2528 	ld hl,(StupidMP)		; MP@
   0C5D 22 35 01           2529 	ld (StupidR0),hl
   0C60 2A 41 01           2530 	ld hl,(StupidMP)		; MP@
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 47.
Hexidecimal [16-Bits]



   0C63 22 37 01           2531 	ld (StupidR1),hl
   0C66 2A 37 01           2532 	ld hl,(StupidR1)		; !
   0C69 ED 5B 35 01        2533 	ld de,(StupidR0)
   0C6D 73                 2534 	ld (hl),e
   0C6E 23                 2535 	inc hl
   0C6F 72                 2536 	ld (hl),d
   0C70 2A CB 01           2537 	ld hl,(StupidNEXT)		; NEXT@
   0C73 22 35 01           2538 	ld (StupidR0),hl
   0C76 2A 35 01           2539 	ld hl,(StupidR0)		; PC!
   0C79 E9                 2540 	jp (hl)
                           2541 ; ----
                           2542 ; 
                           2543 ; Arithmetic and Logic
                           2544 ; 
                           2545 ; These words perform arithmetic and logic on 32-bit integers.
                           2546 ; 
                           2547 ; ----
                           2548 
                           2549 
                           2550 ; ----	- -- word # 29
                           2551 
   0C7A                    2552 W29_Name:
                           2553 
                           2554 	; stringengize( - )
   0C7A 2D                 2555 .byte 0x2d
                           2556 
   0C7B 01 00              2557 	.word ( . - W29_Name ) + 0 
   0C7D 44 00              2558 	.word W29_CFA - W28_CFA
   0C7F                    2559 W29_CFA:
   0C7F 00 00              2560 	.word W29_CFA - .		; -
   0C81                    2561 W29_PFA:
                           2562 ; - - Integer subtraction
                           2563 ; 
                           2564 ; M: ( a, b -> a-b )
                           2565 ; R: ( -> )
                           2566 ; 
                           2567 ; This word does integer subtraction.
                           2568 ; 
                           2569 ; Revision:
                           2570 ; 07/29/99 RLI - code version
                           2571 ; Fetch a
   0C81 21 02 00           2572 	ld hl,#2		; 2
   0C84 22 35 01           2573 	ld (StupidR0),hl
   0C87 2A 41 01           2574 	ld hl,(StupidMP)		; MP@
   0C8A 22 37 01           2575 	ld (StupidR1),hl
   0C8D 2A 37 01           2576 	ld hl,(StupidR1)		; SWAP
   0C90 ED 5B 35 01        2577 	ld de,(StupidR0)
   0C94 22 35 01           2578 	ld (StupidR0),hl
   0C97 ED 53 37 01        2579 	ld (StupidR1),de
   0C9B ED 5B 37 01        2580 	ld de,(StupidR1)		; -
   0C9F 2A 35 01           2581 	ld hl,(StupidR0)
   0CA2 7D                 2582 	ld a,l
   0CA3 93                 2583 	sub a,e
   0CA4 6F                 2584 	ld l,a
   0CA5 7C                 2585 	ld a,h
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 48.
Hexidecimal [16-Bits]



   0CA6 9A                 2586 	sbc a,d
   0CA7 67                 2587 	ld h,a
   0CA8 22 35 01           2588 	ld (StupidR0),hl
   0CAB 2A 35 01           2589 	ld hl,(StupidR0)		; @
   0CAE 7E                 2590 	ld a,(hl)
   0CAF 5F                 2591 	ld e,a
   0CB0 23                 2592 	inc hl
   0CB1 7E                 2593 	ld a,(hl)
   0CB2 57                 2594 	ld d,a
   0CB3 ED 53 35 01        2595 	ld (StupidR0),de
                           2596 ; Fetch b
   0CB7 2A 41 01           2597 	ld hl,(StupidMP)		; MP@
   0CBA 22 37 01           2598 	ld (StupidR1),hl
   0CBD 2A 37 01           2599 	ld hl,(StupidR1)		; @
   0CC0 7E                 2600 	ld a,(hl)
   0CC1 5F                 2601 	ld e,a
   0CC2 23                 2602 	inc hl
   0CC3 7E                 2603 	ld a,(hl)
   0CC4 57                 2604 	ld d,a
   0CC5 ED 53 37 01        2605 	ld (StupidR1),de
                           2606 ; Form the difference
   0CC9 ED 5B 37 01        2607 	ld de,(StupidR1)		; -
   0CCD 2A 35 01           2608 	ld hl,(StupidR0)
   0CD0 7D                 2609 	ld a,l
   0CD1 93                 2610 	sub a,e
   0CD2 6F                 2611 	ld l,a
   0CD3 7C                 2612 	ld a,h
   0CD4 9A                 2613 	sbc a,d
   0CD5 67                 2614 	ld h,a
   0CD6 22 35 01           2615 	ld (StupidR0),hl
                           2616 ; Drop b from the math stack
   0CD9 21 02 00           2617 	ld hl,#2		; 2
   0CDC 22 37 01           2618 	ld (StupidR1),hl
   0CDF 2A 41 01           2619 	ld hl,(StupidMP)		; MP@
   0CE2 22 39 01           2620 	ld (StupidR2),hl
   0CE5 2A 39 01           2621 	ld hl,(StupidR2)		; SWAP
   0CE8 ED 5B 37 01        2622 	ld de,(StupidR1)
   0CEC 22 37 01           2623 	ld (StupidR1),hl
   0CEF ED 53 39 01        2624 	ld (StupidR2),de
   0CF3 ED 5B 39 01        2625 	ld de,(StupidR2)		; -
   0CF7 2A 37 01           2626 	ld hl,(StupidR1)
   0CFA 7D                 2627 	ld a,l
   0CFB 93                 2628 	sub a,e
   0CFC 6F                 2629 	ld l,a
   0CFD 7C                 2630 	ld a,h
   0CFE 9A                 2631 	sbc a,d
   0CFF 67                 2632 	ld h,a
   0D00 22 37 01           2633 	ld (StupidR1),hl
   0D03 2A 37 01           2634 	ld hl,(StupidR1)		; MP!
   0D06 22 41 01           2635 	ld (StupidMP),hl
                           2636 ; Replace a with the difference
   0D09 2A 41 01           2637 	ld hl,(StupidMP)		; MP@
   0D0C 22 37 01           2638 	ld (StupidR1),hl
   0D0F 2A 37 01           2639 	ld hl,(StupidR1)		; !
   0D12 ED 5B 35 01        2640 	ld de,(StupidR0)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 49.
Hexidecimal [16-Bits]



   0D16 73                 2641 	ld (hl),e
   0D17 23                 2642 	inc hl
   0D18 72                 2643 	ld (hl),d
   0D19 2A CB 01           2644 	ld hl,(StupidNEXT)		; NEXT@
   0D1C 22 35 01           2645 	ld (StupidR0),hl
   0D1F 2A 35 01           2646 	ld hl,(StupidR0)		; PC!
   0D22 E9                 2647 	jp (hl)
                           2648 
                           2649 
                           2650 ; ----	NEG -- word # 30
                           2651 
   0D23                    2652 W30_Name:
                           2653 
                           2654 	; stringengize( NEG )
   0D23 4E                 2655 .byte 0x4e
   0D24 45                 2656 .byte 0x45
   0D25 47                 2657 .byte 0x47
                           2658 
   0D26 03 00              2659 	.word ( . - W30_Name ) + 0 
   0D28 AB 00              2660 	.word W30_CFA - W29_CFA
   0D2A                    2661 W30_CFA:
   0D2A 00 00              2662 	.word W30_CFA - .		; NEG
   0D2C                    2663 W30_PFA:
                           2664 ; NEG - Form 2's complement of the top of the math stack.
                           2665 ; 
                           2666 ; M: ( a -> -a )
                           2667 ; R: ( -> )
                           2668 ; 
                           2669 ; Revision:
                           2670 ; 07/29/99 RLI - code version
   0D2C 2A 41 01           2671 	ld hl,(StupidMP)		; MP@
   0D2F 22 35 01           2672 	ld (StupidR0),hl
   0D32 2A 35 01           2673 	ld hl,(StupidR0)		; @
   0D35 7E                 2674 	ld a,(hl)
   0D36 5F                 2675 	ld e,a
   0D37 23                 2676 	inc hl
   0D38 7E                 2677 	ld a,(hl)
   0D39 57                 2678 	ld d,a
   0D3A ED 53 35 01        2679 	ld (StupidR0),de
   0D3E 2A 35 01           2680 	ld hl,(StupidR0)		; NEG
   0D41 7C                 2681 	ld a,h
   0D42 2F                 2682 	cpl
   0D43 67                 2683 	ld h,a
   0D44 7D                 2684 	ld a,l
   0D45 2F                 2685 	cpl
   0D46 6F                 2686 	ld l,a
   0D47 23                 2687 	inc hl
   0D48 22 35 01           2688 	ld (StupidR0),hl
   0D4B 2A 41 01           2689 	ld hl,(StupidMP)		; MP@
   0D4E 22 37 01           2690 	ld (StupidR1),hl
   0D51 2A 37 01           2691 	ld hl,(StupidR1)		; !
   0D54 ED 5B 35 01        2692 	ld de,(StupidR0)
   0D58 73                 2693 	ld (hl),e
   0D59 23                 2694 	inc hl
   0D5A 72                 2695 	ld (hl),d
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 50.
Hexidecimal [16-Bits]



   0D5B 2A CB 01           2696 	ld hl,(StupidNEXT)		; NEXT@
   0D5E 22 35 01           2697 	ld (StupidR0),hl
   0D61 2A 35 01           2698 	ld hl,(StupidR0)		; PC!
   0D64 E9                 2699 	jp (hl)
                           2700 
                           2701 
                           2702 ; ----	+ -- word # 19
                           2703 
   0D65                    2704 W19_Name:
                           2705 
                           2706 	; stringengize( + )
   0D65 2B                 2707 .byte 0x2b
                           2708 
   0D66 01 00              2709 	.word ( . - W19_Name ) + 0 
   0D68 40 00              2710 	.word W19_CFA - W30_CFA
   0D6A                    2711 W19_CFA:
   0D6A 00 00              2712 	.word W19_CFA - .		; +
   0D6C                    2713 W19_PFA:
                           2714 ; + - Integer addition
                           2715 ; 
                           2716 ; M: ( a, b -> a+b )
                           2717 ; R: ( -> )
                           2718 ; 
                           2719 ; This word does integer addition.
                           2720 ; 
                           2721 ; Revision:
                           2722 ; 07/29/99 RLI - code version
                           2723 ; Fetch a
   0D6C 21 02 00           2724 	ld hl,#2		; 2
   0D6F 22 35 01           2725 	ld (StupidR0),hl
   0D72 2A 41 01           2726 	ld hl,(StupidMP)		; MP@
   0D75 22 37 01           2727 	ld (StupidR1),hl
   0D78 2A 37 01           2728 	ld hl,(StupidR1)		; SWAP
   0D7B ED 5B 35 01        2729 	ld de,(StupidR0)
   0D7F 22 35 01           2730 	ld (StupidR0),hl
   0D82 ED 53 37 01        2731 	ld (StupidR1),de
   0D86 ED 5B 37 01        2732 	ld de,(StupidR1)		; -
   0D8A 2A 35 01           2733 	ld hl,(StupidR0)
   0D8D 7D                 2734 	ld a,l
   0D8E 93                 2735 	sub a,e
   0D8F 6F                 2736 	ld l,a
   0D90 7C                 2737 	ld a,h
   0D91 9A                 2738 	sbc a,d
   0D92 67                 2739 	ld h,a
   0D93 22 35 01           2740 	ld (StupidR0),hl
   0D96 2A 35 01           2741 	ld hl,(StupidR0)		; @
   0D99 7E                 2742 	ld a,(hl)
   0D9A 5F                 2743 	ld e,a
   0D9B 23                 2744 	inc hl
   0D9C 7E                 2745 	ld a,(hl)
   0D9D 57                 2746 	ld d,a
   0D9E ED 53 35 01        2747 	ld (StupidR0),de
                           2748 ; Fetch b
   0DA2 2A 41 01           2749 	ld hl,(StupidMP)		; MP@
   0DA5 22 37 01           2750 	ld (StupidR1),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 51.
Hexidecimal [16-Bits]



   0DA8 2A 37 01           2751 	ld hl,(StupidR1)		; @
   0DAB 7E                 2752 	ld a,(hl)
   0DAC 5F                 2753 	ld e,a
   0DAD 23                 2754 	inc hl
   0DAE 7E                 2755 	ld a,(hl)
   0DAF 57                 2756 	ld d,a
   0DB0 ED 53 37 01        2757 	ld (StupidR1),de
                           2758 ; Form the sum
   0DB4 ED 5B 37 01        2759 	ld de,(StupidR1)		; +
   0DB8 2A 35 01           2760 	ld hl,(StupidR0)
   0DBB 19                 2761 	add hl,de
   0DBC 22 35 01           2762 	ld (StupidR0),hl
                           2763 ; Drop b from the math stack
   0DBF 21 02 00           2764 	ld hl,#2		; 2
   0DC2 22 37 01           2765 	ld (StupidR1),hl
   0DC5 2A 41 01           2766 	ld hl,(StupidMP)		; MP@
   0DC8 22 39 01           2767 	ld (StupidR2),hl
   0DCB 2A 39 01           2768 	ld hl,(StupidR2)		; SWAP
   0DCE ED 5B 37 01        2769 	ld de,(StupidR1)
   0DD2 22 37 01           2770 	ld (StupidR1),hl
   0DD5 ED 53 39 01        2771 	ld (StupidR2),de
   0DD9 ED 5B 39 01        2772 	ld de,(StupidR2)		; -
   0DDD 2A 37 01           2773 	ld hl,(StupidR1)
   0DE0 7D                 2774 	ld a,l
   0DE1 93                 2775 	sub a,e
   0DE2 6F                 2776 	ld l,a
   0DE3 7C                 2777 	ld a,h
   0DE4 9A                 2778 	sbc a,d
   0DE5 67                 2779 	ld h,a
   0DE6 22 37 01           2780 	ld (StupidR1),hl
   0DE9 2A 37 01           2781 	ld hl,(StupidR1)		; MP!
   0DEC 22 41 01           2782 	ld (StupidMP),hl
                           2783 ; Replace a with the sum
   0DEF 2A 41 01           2784 	ld hl,(StupidMP)		; MP@
   0DF2 22 37 01           2785 	ld (StupidR1),hl
   0DF5 2A 37 01           2786 	ld hl,(StupidR1)		; !
   0DF8 ED 5B 35 01        2787 	ld de,(StupidR0)
   0DFC 73                 2788 	ld (hl),e
   0DFD 23                 2789 	inc hl
   0DFE 72                 2790 	ld (hl),d
   0DFF 2A CB 01           2791 	ld hl,(StupidNEXT)		; NEXT@
   0E02 22 35 01           2792 	ld (StupidR0),hl
   0E05 2A 35 01           2793 	ld hl,(StupidR0)		; PC!
   0E08 E9                 2794 	jp (hl)
                           2795 
                           2796 
                           2797 ; ----	AND -- word # 31
                           2798 
   0E09                    2799 W31_Name:
                           2800 
                           2801 	; stringengize( AND )
   0E09 41                 2802 .byte 0x41
   0E0A 4E                 2803 .byte 0x4e
   0E0B 44                 2804 .byte 0x44
                           2805 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 52.
Hexidecimal [16-Bits]



   0E0C 03 00              2806 	.word ( . - W31_Name ) + 0 
   0E0E A6 00              2807 	.word W31_CFA - W19_CFA
   0E10                    2808 W31_CFA:
   0E10 00 00              2809 	.word W31_CFA - .		; AND
   0E12                    2810 W31_PFA:
                           2811 ; AND - Bitwise logical AND
                           2812 ; 
                           2813 ; M: ( a, b -> a&b )
                           2814 ; R: ( -> )
                           2815 ; 
                           2816 ; Revisions:
                           2817 ; 
                           2818 ; 07/29/99 RLI - code version.
                           2819 ; Fetch a and b.
   0E12 2A 41 01           2820 	ld hl,(StupidMP)		; MP@
   0E15 22 35 01           2821 	ld (StupidR0),hl
   0E18 2A 35 01           2822 	ld hl,(StupidR0)		; @
   0E1B 7E                 2823 	ld a,(hl)
   0E1C 5F                 2824 	ld e,a
   0E1D 23                 2825 	inc hl
   0E1E 7E                 2826 	ld a,(hl)
   0E1F 57                 2827 	ld d,a
   0E20 ED 53 35 01        2828 	ld (StupidR0),de
   0E24 21 02 00           2829 	ld hl,#2		; 2
   0E27 22 37 01           2830 	ld (StupidR1),hl
   0E2A 2A 41 01           2831 	ld hl,(StupidMP)		; MP@
   0E2D 22 39 01           2832 	ld (StupidR2),hl
   0E30 2A 39 01           2833 	ld hl,(StupidR2)		; SWAP
   0E33 ED 5B 37 01        2834 	ld de,(StupidR1)
   0E37 22 37 01           2835 	ld (StupidR1),hl
   0E3A ED 53 39 01        2836 	ld (StupidR2),de
   0E3E ED 5B 39 01        2837 	ld de,(StupidR2)		; -
   0E42 2A 37 01           2838 	ld hl,(StupidR1)
   0E45 7D                 2839 	ld a,l
   0E46 93                 2840 	sub a,e
   0E47 6F                 2841 	ld l,a
   0E48 7C                 2842 	ld a,h
   0E49 9A                 2843 	sbc a,d
   0E4A 67                 2844 	ld h,a
   0E4B 22 37 01           2845 	ld (StupidR1),hl
   0E4E 2A 37 01           2846 	ld hl,(StupidR1)		; @
   0E51 7E                 2847 	ld a,(hl)
   0E52 5F                 2848 	ld e,a
   0E53 23                 2849 	inc hl
   0E54 7E                 2850 	ld a,(hl)
   0E55 57                 2851 	ld d,a
   0E56 ED 53 37 01        2852 	ld (StupidR1),de
                           2853 ; Form the result
   0E5A ED 5B 37 01        2854 	ld de,(StupidR1)		; AND
   0E5E 2A 35 01           2855 	ld hl,(StupidR0)
   0E61 7B                 2856 	ld a,e
   0E62 A5                 2857 	and a,l
   0E63 6F                 2858 	ld l,a
   0E64 7A                 2859 	ld a,d
   0E65 A4                 2860 	and a,h
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 53.
Hexidecimal [16-Bits]



   0E66 67                 2861 	ld h,a
   0E67 22 35 01           2862 	ld (StupidR0),hl
                           2863 ; Drop a from the math stack
   0E6A 21 02 00           2864 	ld hl,#2		; 2
   0E6D 22 37 01           2865 	ld (StupidR1),hl
   0E70 2A 41 01           2866 	ld hl,(StupidMP)		; MP@
   0E73 22 39 01           2867 	ld (StupidR2),hl
   0E76 2A 39 01           2868 	ld hl,(StupidR2)		; SWAP
   0E79 ED 5B 37 01        2869 	ld de,(StupidR1)
   0E7D 22 37 01           2870 	ld (StupidR1),hl
   0E80 ED 53 39 01        2871 	ld (StupidR2),de
   0E84 ED 5B 39 01        2872 	ld de,(StupidR2)		; -
   0E88 2A 37 01           2873 	ld hl,(StupidR1)
   0E8B 7D                 2874 	ld a,l
   0E8C 93                 2875 	sub a,e
   0E8D 6F                 2876 	ld l,a
   0E8E 7C                 2877 	ld a,h
   0E8F 9A                 2878 	sbc a,d
   0E90 67                 2879 	ld h,a
   0E91 22 37 01           2880 	ld (StupidR1),hl
   0E94 2A 37 01           2881 	ld hl,(StupidR1)		; MP!
   0E97 22 41 01           2882 	ld (StupidMP),hl
                           2883 ; Replace b with the result
   0E9A 2A 41 01           2884 	ld hl,(StupidMP)		; MP@
   0E9D 22 37 01           2885 	ld (StupidR1),hl
   0EA0 2A 37 01           2886 	ld hl,(StupidR1)		; !
   0EA3 ED 5B 35 01        2887 	ld de,(StupidR0)
   0EA7 73                 2888 	ld (hl),e
   0EA8 23                 2889 	inc hl
   0EA9 72                 2890 	ld (hl),d
                           2891 ; Execute the next FORTH word
   0EAA 2A CB 01           2892 	ld hl,(StupidNEXT)		; NEXT@
   0EAD 22 35 01           2893 	ld (StupidR0),hl
   0EB0 2A 35 01           2894 	ld hl,(StupidR0)		; PC!
   0EB3 E9                 2895 	jp (hl)
                           2896 
                           2897 
                           2898 ; ----	OR -- word # 32
                           2899 
   0EB4                    2900 W32_Name:
                           2901 
                           2902 	; stringengize( OR )
   0EB4 4F                 2903 .byte 0x4f
   0EB5 52                 2904 .byte 0x52
                           2905 
   0EB6 02 00              2906 	.word ( . - W32_Name ) + 0 
   0EB8 AA 00              2907 	.word W32_CFA - W31_CFA
   0EBA                    2908 W32_CFA:
   0EBA 00 00              2909 	.word W32_CFA - .		; OR
   0EBC                    2910 W32_PFA:
                           2911 ; OR - Bitwise logical OR
                           2912 ; 
                           2913 ; M: ( a, b -> a or b )
                           2914 ; R: ( -> )
                           2915 ; 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 54.
Hexidecimal [16-Bits]



                           2916 ; Revisions:
                           2917 ; 07/29/99 RLI - code version
                           2918 ; Fetch a
   0EBC 21 02 00           2919 	ld hl,#2		; 2
   0EBF 22 35 01           2920 	ld (StupidR0),hl
   0EC2 2A 41 01           2921 	ld hl,(StupidMP)		; MP@
   0EC5 22 37 01           2922 	ld (StupidR1),hl
   0EC8 2A 37 01           2923 	ld hl,(StupidR1)		; SWAP
   0ECB ED 5B 35 01        2924 	ld de,(StupidR0)
   0ECF 22 35 01           2925 	ld (StupidR0),hl
   0ED2 ED 53 37 01        2926 	ld (StupidR1),de
   0ED6 ED 5B 37 01        2927 	ld de,(StupidR1)		; -
   0EDA 2A 35 01           2928 	ld hl,(StupidR0)
   0EDD 7D                 2929 	ld a,l
   0EDE 93                 2930 	sub a,e
   0EDF 6F                 2931 	ld l,a
   0EE0 7C                 2932 	ld a,h
   0EE1 9A                 2933 	sbc a,d
   0EE2 67                 2934 	ld h,a
   0EE3 22 35 01           2935 	ld (StupidR0),hl
   0EE6 2A 35 01           2936 	ld hl,(StupidR0)		; @
   0EE9 7E                 2937 	ld a,(hl)
   0EEA 5F                 2938 	ld e,a
   0EEB 23                 2939 	inc hl
   0EEC 7E                 2940 	ld a,(hl)
   0EED 57                 2941 	ld d,a
   0EEE ED 53 35 01        2942 	ld (StupidR0),de
                           2943 ; Fetch b
   0EF2 2A 41 01           2944 	ld hl,(StupidMP)		; MP@
   0EF5 22 37 01           2945 	ld (StupidR1),hl
   0EF8 2A 37 01           2946 	ld hl,(StupidR1)		; @
   0EFB 7E                 2947 	ld a,(hl)
   0EFC 5F                 2948 	ld e,a
   0EFD 23                 2949 	inc hl
   0EFE 7E                 2950 	ld a,(hl)
   0EFF 57                 2951 	ld d,a
   0F00 ED 53 37 01        2952 	ld (StupidR1),de
                           2953 ; Form the result
   0F04 ED 5B 37 01        2954 	ld de,(StupidR1)		; OR
   0F08 2A 35 01           2955 	ld hl,(StupidR0)
   0F0B 7B                 2956 	ld a,e
   0F0C B5                 2957 	or a,l
   0F0D 6F                 2958 	ld l,a
   0F0E 7A                 2959 	ld a,d
   0F0F B4                 2960 	or a,h
   0F10 67                 2961 	ld h,a
   0F11 22 35 01           2962 	ld (StupidR0),hl
                           2963 ; Drop b from the math stack
   0F14 21 02 00           2964 	ld hl,#2		; 2
   0F17 22 37 01           2965 	ld (StupidR1),hl
   0F1A 2A 41 01           2966 	ld hl,(StupidMP)		; MP@
   0F1D 22 39 01           2967 	ld (StupidR2),hl
   0F20 2A 39 01           2968 	ld hl,(StupidR2)		; SWAP
   0F23 ED 5B 37 01        2969 	ld de,(StupidR1)
   0F27 22 37 01           2970 	ld (StupidR1),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 55.
Hexidecimal [16-Bits]



   0F2A ED 53 39 01        2971 	ld (StupidR2),de
   0F2E ED 5B 39 01        2972 	ld de,(StupidR2)		; -
   0F32 2A 37 01           2973 	ld hl,(StupidR1)
   0F35 7D                 2974 	ld a,l
   0F36 93                 2975 	sub a,e
   0F37 6F                 2976 	ld l,a
   0F38 7C                 2977 	ld a,h
   0F39 9A                 2978 	sbc a,d
   0F3A 67                 2979 	ld h,a
   0F3B 22 37 01           2980 	ld (StupidR1),hl
   0F3E 2A 37 01           2981 	ld hl,(StupidR1)		; MP!
   0F41 22 41 01           2982 	ld (StupidMP),hl
                           2983 ; Replace a with the result
   0F44 2A 41 01           2984 	ld hl,(StupidMP)		; MP@
   0F47 22 37 01           2985 	ld (StupidR1),hl
   0F4A 2A 37 01           2986 	ld hl,(StupidR1)		; !
   0F4D ED 5B 35 01        2987 	ld de,(StupidR0)
   0F51 73                 2988 	ld (hl),e
   0F52 23                 2989 	inc hl
   0F53 72                 2990 	ld (hl),d
   0F54 2A CB 01           2991 	ld hl,(StupidNEXT)		; NEXT@
   0F57 22 35 01           2992 	ld (StupidR0),hl
   0F5A 2A 35 01           2993 	ld hl,(StupidR0)		; PC!
   0F5D E9                 2994 	jp (hl)
                           2995 
                           2996 
                           2997 ; ----	NOT -- word # 33
                           2998 
   0F5E                    2999 W33_Name:
                           3000 
                           3001 	; stringengize( NOT )
   0F5E 4E                 3002 .byte 0x4e
   0F5F 4F                 3003 .byte 0x4f
   0F60 54                 3004 .byte 0x54
                           3005 
   0F61 03 00              3006 	.word ( . - W33_Name ) + 0 
   0F63 AB 00              3007 	.word W33_CFA - W32_CFA
   0F65                    3008 W33_CFA:
   0F65 00 00              3009 	.word W33_CFA - .		; NOT
   0F67                    3010 W33_PFA:
                           3011 ; NOT - Form 1's complement of the top of the math stack.
                           3012 ; 
                           3013 ; M: ( a -> ~a )
                           3014 ; R: ( -> )
                           3015 ; 
                           3016 ; Revision:
                           3017 ; 07/29/99 RLI - code version
   0F67 2A 41 01           3018 	ld hl,(StupidMP)		; MP@
   0F6A 22 35 01           3019 	ld (StupidR0),hl
   0F6D 2A 35 01           3020 	ld hl,(StupidR0)		; @
   0F70 7E                 3021 	ld a,(hl)
   0F71 5F                 3022 	ld e,a
   0F72 23                 3023 	inc hl
   0F73 7E                 3024 	ld a,(hl)
   0F74 57                 3025 	ld d,a
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 56.
Hexidecimal [16-Bits]



   0F75 ED 53 35 01        3026 	ld (StupidR0),de
   0F79 2A 35 01           3027 	ld hl,(StupidR0)		; NOT
   0F7C 7C                 3028 	ld a,h
   0F7D 2F                 3029 	cpl
   0F7E 67                 3030 	ld h,a
   0F7F 7D                 3031 	ld a,l
   0F80 2F                 3032 	cpl
   0F81 6F                 3033 	ld l,a
   0F82 22 35 01           3034 	ld (StupidR0),hl
   0F85 2A 41 01           3035 	ld hl,(StupidMP)		; MP@
   0F88 22 37 01           3036 	ld (StupidR1),hl
   0F8B 2A 37 01           3037 	ld hl,(StupidR1)		; !
   0F8E ED 5B 35 01        3038 	ld de,(StupidR0)
   0F92 73                 3039 	ld (hl),e
   0F93 23                 3040 	inc hl
   0F94 72                 3041 	ld (hl),d
   0F95 2A CB 01           3042 	ld hl,(StupidNEXT)		; NEXT@
   0F98 22 35 01           3043 	ld (StupidR0),hl
   0F9B 2A 35 01           3044 	ld hl,(StupidR0)		; PC!
   0F9E E9                 3045 	jp (hl)
                           3046 
                           3047 
                           3048 ; ----	<< -- word # 34
                           3049 
   0F9F                    3050 W34_Name:
                           3051 
                           3052 	; stringengize( << )
   0F9F 3C                 3053 .byte 0x3c
   0FA0 3C                 3054 .byte 0x3c
                           3055 
   0FA1 02 00              3056 	.word ( . - W34_Name ) + 0 
   0FA3 40 00              3057 	.word W34_CFA - W33_CFA
   0FA5                    3058 W34_CFA:
   0FA5 00 00              3059 	.word W34_CFA - .		; <<
   0FA7                    3060 W34_PFA:
                           3061 ; << - Logical left shift
                           3062 ; 
                           3063 ; M: ( a, b -> a<<b )
                           3064 ; 
                           3065 ; Revisions:
                           3066 ; 07/29/99 RLI - code version
                           3067 ; Fetch a
   0FA7 21 02 00           3068 	ld hl,#2		; 2
   0FAA 22 35 01           3069 	ld (StupidR0),hl
   0FAD 2A 41 01           3070 	ld hl,(StupidMP)		; MP@
   0FB0 22 37 01           3071 	ld (StupidR1),hl
   0FB3 2A 37 01           3072 	ld hl,(StupidR1)		; SWAP
   0FB6 ED 5B 35 01        3073 	ld de,(StupidR0)
   0FBA 22 35 01           3074 	ld (StupidR0),hl
   0FBD ED 53 37 01        3075 	ld (StupidR1),de
   0FC1 ED 5B 37 01        3076 	ld de,(StupidR1)		; -
   0FC5 2A 35 01           3077 	ld hl,(StupidR0)
   0FC8 7D                 3078 	ld a,l
   0FC9 93                 3079 	sub a,e
   0FCA 6F                 3080 	ld l,a
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 57.
Hexidecimal [16-Bits]



   0FCB 7C                 3081 	ld a,h
   0FCC 9A                 3082 	sbc a,d
   0FCD 67                 3083 	ld h,a
   0FCE 22 35 01           3084 	ld (StupidR0),hl
   0FD1 2A 35 01           3085 	ld hl,(StupidR0)		; @
   0FD4 7E                 3086 	ld a,(hl)
   0FD5 5F                 3087 	ld e,a
   0FD6 23                 3088 	inc hl
   0FD7 7E                 3089 	ld a,(hl)
   0FD8 57                 3090 	ld d,a
   0FD9 ED 53 35 01        3091 	ld (StupidR0),de
                           3092 ; Fetch b
   0FDD 2A 41 01           3093 	ld hl,(StupidMP)		; MP@
   0FE0 22 37 01           3094 	ld (StupidR1),hl
   0FE3 2A 37 01           3095 	ld hl,(StupidR1)		; @
   0FE6 7E                 3096 	ld a,(hl)
   0FE7 5F                 3097 	ld e,a
   0FE8 23                 3098 	inc hl
   0FE9 7E                 3099 	ld a,(hl)
   0FEA 57                 3100 	ld d,a
   0FEB ED 53 37 01        3101 	ld (StupidR1),de
                           3102 ; Form the result
   0FEF CD FD 01           3103 	call StupidShiftLeft1		; <<
                           3104 ; Drop b from the math stack
   0FF2 21 02 00           3105 	ld hl,#2		; 2
   0FF5 22 37 01           3106 	ld (StupidR1),hl
   0FF8 2A 41 01           3107 	ld hl,(StupidMP)		; MP@
   0FFB 22 39 01           3108 	ld (StupidR2),hl
   0FFE 2A 39 01           3109 	ld hl,(StupidR2)		; SWAP
   1001 ED 5B 37 01        3110 	ld de,(StupidR1)
   1005 22 37 01           3111 	ld (StupidR1),hl
   1008 ED 53 39 01        3112 	ld (StupidR2),de
   100C ED 5B 39 01        3113 	ld de,(StupidR2)		; -
   1010 2A 37 01           3114 	ld hl,(StupidR1)
   1013 7D                 3115 	ld a,l
   1014 93                 3116 	sub a,e
   1015 6F                 3117 	ld l,a
   1016 7C                 3118 	ld a,h
   1017 9A                 3119 	sbc a,d
   1018 67                 3120 	ld h,a
   1019 22 37 01           3121 	ld (StupidR1),hl
   101C 2A 37 01           3122 	ld hl,(StupidR1)		; MP!
   101F 22 41 01           3123 	ld (StupidMP),hl
                           3124 ; Replace a with the result
   1022 2A 41 01           3125 	ld hl,(StupidMP)		; MP@
   1025 22 37 01           3126 	ld (StupidR1),hl
   1028 2A 37 01           3127 	ld hl,(StupidR1)		; !
   102B ED 5B 35 01        3128 	ld de,(StupidR0)
   102F 73                 3129 	ld (hl),e
   1030 23                 3130 	inc hl
   1031 72                 3131 	ld (hl),d
   1032 2A CB 01           3132 	ld hl,(StupidNEXT)		; NEXT@
   1035 22 35 01           3133 	ld (StupidR0),hl
   1038 2A 35 01           3134 	ld hl,(StupidR0)		; PC!
   103B E9                 3135 	jp (hl)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 58.
Hexidecimal [16-Bits]



                           3136 
                           3137 
                           3138 ; ----	>> -- word # 35
                           3139 
   103C                    3140 W35_Name:
                           3141 
                           3142 	; stringengize( >> )
   103C 3E                 3143 .byte 0x3e
   103D 3E                 3144 .byte 0x3e
                           3145 
   103E 02 00              3146 	.word ( . - W35_Name ) + 0 
   1040 9D 00              3147 	.word W35_CFA - W34_CFA
   1042                    3148 W35_CFA:
   1042 00 00              3149 	.word W35_CFA - .		; >>
   1044                    3150 W35_PFA:
                           3151 ; >> - Logical right shift
                           3152 ; 
                           3153 ; M: ( a, b -> a>>b )
                           3154 ; R: ( -> )
                           3155 ; 
                           3156 ; Revisions:
                           3157 ; 07/29/99 RLI - code version
                           3158 ; Fetch a
   1044 21 02 00           3159 	ld hl,#2		; 2
   1047 22 35 01           3160 	ld (StupidR0),hl
   104A 2A 41 01           3161 	ld hl,(StupidMP)		; MP@
   104D 22 37 01           3162 	ld (StupidR1),hl
   1050 2A 37 01           3163 	ld hl,(StupidR1)		; SWAP
   1053 ED 5B 35 01        3164 	ld de,(StupidR0)
   1057 22 35 01           3165 	ld (StupidR0),hl
   105A ED 53 37 01        3166 	ld (StupidR1),de
   105E ED 5B 37 01        3167 	ld de,(StupidR1)		; -
   1062 2A 35 01           3168 	ld hl,(StupidR0)
   1065 7D                 3169 	ld a,l
   1066 93                 3170 	sub a,e
   1067 6F                 3171 	ld l,a
   1068 7C                 3172 	ld a,h
   1069 9A                 3173 	sbc a,d
   106A 67                 3174 	ld h,a
   106B 22 35 01           3175 	ld (StupidR0),hl
   106E 2A 35 01           3176 	ld hl,(StupidR0)		; @
   1071 7E                 3177 	ld a,(hl)
   1072 5F                 3178 	ld e,a
   1073 23                 3179 	inc hl
   1074 7E                 3180 	ld a,(hl)
   1075 57                 3181 	ld d,a
   1076 ED 53 35 01        3182 	ld (StupidR0),de
                           3183 ; Fetch b
   107A 2A 41 01           3184 	ld hl,(StupidMP)		; MP@
   107D 22 37 01           3185 	ld (StupidR1),hl
   1080 2A 37 01           3186 	ld hl,(StupidR1)		; @
   1083 7E                 3187 	ld a,(hl)
   1084 5F                 3188 	ld e,a
   1085 23                 3189 	inc hl
   1086 7E                 3190 	ld a,(hl)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 59.
Hexidecimal [16-Bits]



   1087 57                 3191 	ld d,a
   1088 ED 53 37 01        3192 	ld (StupidR1),de
                           3193 ; Form result
   108C CD 10 02           3194 	call StupidShiftRight1		; >>
                           3195  ; Drop b from the stack
   108F 21 02 00           3196 	ld hl,#2		; 2
   1092 22 37 01           3197 	ld (StupidR1),hl
   1095 2A 41 01           3198 	ld hl,(StupidMP)		; MP@
   1098 22 39 01           3199 	ld (StupidR2),hl
   109B 2A 39 01           3200 	ld hl,(StupidR2)		; SWAP
   109E ED 5B 37 01        3201 	ld de,(StupidR1)
   10A2 22 37 01           3202 	ld (StupidR1),hl
   10A5 ED 53 39 01        3203 	ld (StupidR2),de
   10A9 ED 5B 39 01        3204 	ld de,(StupidR2)		; -
   10AD 2A 37 01           3205 	ld hl,(StupidR1)
   10B0 7D                 3206 	ld a,l
   10B1 93                 3207 	sub a,e
   10B2 6F                 3208 	ld l,a
   10B3 7C                 3209 	ld a,h
   10B4 9A                 3210 	sbc a,d
   10B5 67                 3211 	ld h,a
   10B6 22 37 01           3212 	ld (StupidR1),hl
   10B9 2A 37 01           3213 	ld hl,(StupidR1)		; MP!
   10BC 22 41 01           3214 	ld (StupidMP),hl
                           3215 ; Replace a with the result
   10BF 2A 41 01           3216 	ld hl,(StupidMP)		; MP@
   10C2 22 37 01           3217 	ld (StupidR1),hl
   10C5 2A 37 01           3218 	ld hl,(StupidR1)		; !
   10C8 ED 5B 35 01        3219 	ld de,(StupidR0)
   10CC 73                 3220 	ld (hl),e
   10CD 23                 3221 	inc hl
   10CE 72                 3222 	ld (hl),d
   10CF 2A CB 01           3223 	ld hl,(StupidNEXT)		; NEXT@
   10D2 22 35 01           3224 	ld (StupidR0),hl
   10D5 2A 35 01           3225 	ld hl,(StupidR0)		; PC!
   10D8 E9                 3226 	jp (hl)
                           3227 ; ----
                           3228 ; 
                           3229 ; Comparisons
                           3230 ; 
                           3231 ; ----
                           3232 ; --	0< - Integer comparison to zero
                           3233 ; 
                           3234 ; ( a -> 1 iff a<0 )
                           3235 ; ( a -> 0 otherwise )
                           3236 ; 
                           3237 ; This implementation works by moving the sign bit to bit 0. It
                           3238 ; assumes >> is a logical shift.
                           3239 
                           3240 
                           3241 ; ----	0< -- word # 36
                           3242 
   10D9                    3243 W36_Name:
                           3244 
                           3245 	; stringengize( 0< )
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 60.
Hexidecimal [16-Bits]



   10D9 30                 3246 .byte 0x30
   10DA 3C                 3247 .byte 0x3c
                           3248 
   10DB 02 00              3249 	.word ( . - W36_Name ) + 0 
   10DD 9D 00              3250 	.word W36_CFA - W35_CFA
   10DF                    3251 W36_CFA:
   10DF 73 F2              3252 	.word W2_CFA - .		; (:)
   10E1                    3253 W36_PFA:
   10E1 50 00              3254 	.word W37_CFA - .		; (LIT)
   10E3 0F 00              3255 	.word 15
   10E5 5D FF              3256 	.word W35_CFA - .		; >>
   10E7 E1 F2              3257 	.word W3_CFA - .		; (;)
                           3258 ; --	< - Integer less-than comparison
                           3259 ; 
                           3260 ; ( a b -> 1 iff a<b )
                           3261 ; ( a b -> 0 otherwise )
                           3262 ; 
                           3263 ; This implementation works by changing the problem to 0< which
                           3264 ; is implemented above.
                           3265 
                           3266 
                           3267 ; ----	< -- word # 38
                           3268 
   10E9                    3269 W38_Name:
                           3270 
                           3271 	; stringengize( < )
   10E9 3C                 3272 .byte 0x3c
                           3273 
   10EA 01 00              3274 	.word ( . - W38_Name ) + 0 
   10EC 0F 00              3275 	.word W38_CFA - W36_CFA
   10EE                    3276 W38_CFA:
   10EE 64 F2              3277 	.word W2_CFA - .		; (:)
   10F0                    3278 W38_PFA:
   10F0 8F FB              3279 	.word W29_CFA - .		; -
   10F2 ED FF              3280 	.word W36_CFA - .		; 0<
   10F4 D4 F2              3281 	.word W3_CFA - .		; (;)
                           3282 ; --	> - Integer greater-than comparison
                           3283 ; 
                           3284 ; ( a b -> 1 iff a>b )
                           3285 ; ( a b -> 0 otherwise )
                           3286 ; 
                           3287 ; This implementation works by changing the problem to 0< which is
                           3288 ; implemented above.
                           3289 
                           3290 
                           3291 ; ----	> -- word # 39
                           3292 
   10F6                    3293 W39_Name:
                           3294 
                           3295 	; stringengize( > )
   10F6 3E                 3296 .byte 0x3e
                           3297 
   10F7 01 00              3298 	.word ( . - W39_Name ) + 0 
   10F9 0D 00              3299 	.word W39_CFA - W38_CFA
   10FB                    3300 W39_CFA:
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 61.
Hexidecimal [16-Bits]



   10FB 57 F2              3301 	.word W2_CFA - .		; (:)
   10FD                    3302 W39_PFA:
   10FD 82 FB              3303 	.word W29_CFA - .		; -
                           3304 ; 	Possible results:
                           3305 ; 	  a-b<0 iff b>a, or a<b
                           3306 ; 	  a-b=0 iff b=a, or a=b
                           3307 ; 	  a-b>0 iff b<a, or a>b
   10FF 2B FC              3308 	.word W30_CFA - .		; NEG
                           3309 ; 	Possible results:
                           3310 ; 	  -(a-b)>0 iff b>a, or a<b
                           3311 ; 	  -(a-b)=0 iff b=a, or a=b
                           3312 ; 	  -(a-b)<0 iff b<a, or a>b
   1101 DE FF              3313 	.word W36_CFA - .		; 0<
   1103 C5 F2              3314 	.word W3_CFA - .		; (;)
                           3315 ; --	0= - Integer comparison to zero
                           3316 ; 
                           3317 ; ( a -> 1 iff a=0 )
                           3318 ; ( a -> 0 otherwise )
                           3319 ; 
                           3320 ; Note that this serves as a logical NOT.
                           3321 ; 
                           3322 ; Revisions:	06/25/96 RLI - Oops, didn't work. Made it simpler.
                           3323 ; 		08/26/96 RLI - Oops. Did it backwards. Sigh.
                           3324 ; 
                           3325 ; : 0= if 1 else 0 endif ;
                           3326 
                           3327 
                           3328 ; ----	0= -- word # 40
                           3329 
   1105                    3330 W40_Name:
                           3331 
                           3332 	; stringengize( 0= )
   1105 30                 3333 .byte 0x30
   1106 3D                 3334 .byte 0x3d
                           3335 
   1107 02 00              3336 	.word ( . - W40_Name ) + 0 
   1109 10 00              3337 	.word W40_CFA - W39_CFA
   110B                    3338 W40_CFA:
   110B 47 F2              3339 	.word W2_CFA - .		; (:)
   110D                    3340 W40_PFA:
   110D 0D F4              3341 	.word W7_CFA - .		; (0BRANCH)
   110F 08 00              3342 	.word W40_0 - .
   1111 8D 00              3343 	.word W41_CFA - .		; 0
   1113 C5 F3              3344 	.word W6_CFA - .		; (BRANCH)
   1115 04 00              3345 	.word W40_1 - .
   1117                    3346 W40_0:
   1117 90 00              3347 	.word W18_CFA - .		; 1
   1119                    3348 W40_1:
   1119 AF F2              3349 	.word W3_CFA - .		; (;)
                           3350 ; --	= - Integer equals comparison
                           3351 ; 
                           3352 ; ( a b -> 1 iff a=b )
                           3353 ; ( a b -> 0 otherwise )
                           3354 ; 
                           3355 ; This implementation works by changing the problem to 0= which is
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 62.
Hexidecimal [16-Bits]



                           3356 ; defined above.
                           3357 
                           3358 
                           3359 ; ----	= -- word # 42
                           3360 
   111B                    3361 W42_Name:
                           3362 
                           3363 	; stringengize( = )
   111B 3D                 3364 .byte 0x3d
                           3365 
   111C 01 00              3366 	.word ( . - W42_Name ) + 0 
   111E 15 00              3367 	.word W42_CFA - W40_CFA
   1120                    3368 W42_CFA:
   1120 32 F2              3369 	.word W2_CFA - .		; (:)
   1122                    3370 W42_PFA:
   1122 5D FB              3371 	.word W29_CFA - .		; -
   1124 E7 FF              3372 	.word W40_CFA - .		; 0=
   1126 A2 F2              3373 	.word W3_CFA - .		; (;)
                           3374 ; ----
                           3375 ; 
                           3376 ; Literals in the code
                           3377 ; 
                           3378 ; ----
                           3379 
                           3380 
                           3381 ; ----	(LIT) -- word # 37
                           3382 
   1128                    3383 W37_Name:
                           3384 
                           3385 	; stringengize( (LIT) )
   1128 28                 3386 .byte 0x28
   1129 4C                 3387 .byte 0x4c
   112A 49                 3388 .byte 0x49
   112B 54                 3389 .byte 0x54
   112C 29                 3390 .byte 0x29
                           3391 
   112D 05 00              3392 	.word ( . - W37_Name ) + 0 
   112F 11 00              3393 	.word W37_CFA - W42_CFA
   1131                    3394 W37_CFA:
   1131 00 00              3395 	.word W37_CFA - .		; (LIT)
   1133                    3396 W37_PFA:
                           3397 ; (LIT) - Push a literal on the math stack
                           3398 ; 
                           3399 ; M: ( -> literal )
                           3400 ; R: ( -> )
                           3401 ; 
                           3402 ; This word knows how to push a literal onto the math stack. The 
                           3403 ; reference to (LIT) is followed by a cell containing the literal
                           3404 ; to be pushed; that cell  is fetched and pushed on the stack.
                           3405 ; 
                           3406 ; Revisions:
                           3407 ; 07/29/99 RLI - code version
                           3408 ; Make space for the literal on the math stack.
   1133 21 02 00           3409 	ld hl,#2		; 2
   1136 22 35 01           3410 	ld (StupidR0),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 63.
Hexidecimal [16-Bits]



   1139 2A 41 01           3411 	ld hl,(StupidMP)		; MP@
   113C 22 37 01           3412 	ld (StupidR1),hl
   113F ED 5B 37 01        3413 	ld de,(StupidR1)		; +
   1143 2A 35 01           3414 	ld hl,(StupidR0)
   1146 19                 3415 	add hl,de
   1147 22 35 01           3416 	ld (StupidR0),hl
   114A 2A 35 01           3417 	ld hl,(StupidR0)		; MP!
   114D 22 41 01           3418 	ld (StupidMP),hl
                           3419 ; Fetch the literal and store it on the math stack.
   1150 2A 3F 01           3420 	ld hl,(StupidIP)		; IP@
   1153 22 35 01           3421 	ld (StupidR0),hl
   1156 2A 35 01           3422 	ld hl,(StupidR0)		; @
   1159 7E                 3423 	ld a,(hl)
   115A 5F                 3424 	ld e,a
   115B 23                 3425 	inc hl
   115C 7E                 3426 	ld a,(hl)
   115D 57                 3427 	ld d,a
   115E ED 53 35 01        3428 	ld (StupidR0),de
   1162 2A 41 01           3429 	ld hl,(StupidMP)		; MP@
   1165 22 37 01           3430 	ld (StupidR1),hl
   1168 2A 37 01           3431 	ld hl,(StupidR1)		; !
   116B ED 5B 35 01        3432 	ld de,(StupidR0)
   116F 73                 3433 	ld (hl),e
   1170 23                 3434 	inc hl
   1171 72                 3435 	ld (hl),d
                           3436 ; Bump IP past the literal and continue on.
   1172 2A 3F 01           3437 	ld hl,(StupidIP)		; IP@
   1175 22 35 01           3438 	ld (StupidR0),hl
   1178 21 02 00           3439 	ld hl,#2		; 2
   117B 22 37 01           3440 	ld (StupidR1),hl
   117E ED 5B 37 01        3441 	ld de,(StupidR1)		; +
   1182 2A 35 01           3442 	ld hl,(StupidR0)
   1185 19                 3443 	add hl,de
   1186 22 35 01           3444 	ld (StupidR0),hl
   1189 2A 35 01           3445 	ld hl,(StupidR0)		; IP!
   118C 22 3F 01           3446 	ld (StupidIP),hl
   118F 2A CB 01           3447 	ld hl,(StupidNEXT)		; NEXT@
   1192 22 35 01           3448 	ld (StupidR0),hl
   1195 2A 35 01           3449 	ld hl,(StupidR0)		; PC!
   1198 E9                 3450 	jp (hl)
                           3451 ; ----
                           3452 ; 
                           3453 ; Frequently used constants
                           3454 ; 
                           3455 ; ----
                           3456 
                           3457 
                           3458 ; ----	0 -- word # 41
                           3459 
   1199                    3460 W41_Name:
                           3461 
                           3462 	; stringengize( 0 )
   1199 30                 3463 .byte 0x30
                           3464 
   119A 01 00              3465 	.word ( . - W41_Name ) + 0 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 64.
Hexidecimal [16-Bits]



   119C 6D 00              3466 	.word W41_CFA - W37_CFA
   119E                    3467 W41_CFA:
   119E 79 F2              3468 	.word W4_CFA - .		; (CONSTANT)
   11A0                    3469 W41_PFA:
   11A0 00 00              3470 	.word 0
                           3471 
                           3472 
                           3473 ; ----	1 -- word # 18
                           3474 
   11A2                    3475 W18_Name:
                           3476 
                           3477 	; stringengize( 1 )
   11A2 31                 3478 .byte 0x31
                           3479 
   11A3 01 00              3480 	.word ( . - W18_Name ) + 0 
   11A5 09 00              3481 	.word W18_CFA - W41_CFA
   11A7                    3482 W18_CFA:
   11A7 70 F2              3483 	.word W4_CFA - .		; (CONSTANT)
   11A9                    3484 W18_PFA:
   11A9 01 00              3485 	.word 1
                           3486 ; ----
                           3487 ; 
                           3488 ; Higher level output
                           3489 ; 
                           3490 ; ----
                           3491 ; --	.NYBBLE - Display high-order nybble of top of stack as ASCII hex
                           3492 ; 
                           3493 ; ( a -> a )
                           3494 ; 
                           3495 ; Revisions:	06/28/96 RLI - Removed assumption about word size.
                           3496 ; 		Well, it stell better be less than 256+4 bits.
                           3497 ; 			05/11/01 RLI - Tossed the "65-58" constant, because
                           3498 ; 			there was no elegant way to deal with it in a
                           3499 ; 			stupid conversion to PAL8.
                           3500 
                           3501 
                           3502 ; ----	.NYBBLE -- word # 43
                           3503 
   11AB                    3504 W43_Name:
                           3505 
                           3506 	; stringengize( .NYBBLE )
   11AB 2E                 3507 .byte 0x2e
   11AC 4E                 3508 .byte 0x4e
   11AD 59                 3509 .byte 0x59
   11AE 42                 3510 .byte 0x42
   11AF 42                 3511 .byte 0x42
   11B0 4C                 3512 .byte 0x4c
   11B1 45                 3513 .byte 0x45
                           3514 
   11B2 07 00              3515 	.word ( . - W43_Name ) + 0 
   11B4 0F 00              3516 	.word W43_CFA - W18_CFA
   11B6                    3517 W43_CFA:
   11B6 9C F1              3518 	.word W2_CFA - .		; (:)
   11B8                    3519 W43_PFA:
   11B8 A9 F7              3520 	.word W17_CFA - .		; DUP
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 65.
Hexidecimal [16-Bits]



   11BA 77 FF              3521 	.word W37_CFA - .		; (LIT)
   11BC 0C 00              3522 	.word 12
   11BE 84 FE              3523 	.word W35_CFA - .		; >>
   11C0 71 FF              3524 	.word W37_CFA - .		; (LIT)
   11C2 30 00              3525 	.word 48
   11C4 A6 FB              3526 	.word W19_CFA - .		; +
   11C6 9B F7              3527 	.word W17_CFA - .		; DUP
   11C8 69 FF              3528 	.word W37_CFA - .		; (LIT)
   11CA 39 00              3529 	.word 57
   11CC 2F FF              3530 	.word W39_CFA - .		; >
   11CE 4C F3              3531 	.word W7_CFA - .		; (0BRANCH)
   11D0 0E 00              3532 	.word W43_0 - .
   11D2 5F FF              3533 	.word W37_CFA - .		; (LIT)
   11D4 41 00              3534 	.word 65
   11D6 5B FF              3535 	.word W37_CFA - .		; (LIT)
   11D8 3A 00              3536 	.word 58
   11DA A5 FA              3537 	.word W29_CFA - .		; -
   11DC 8E FB              3538 	.word W19_CFA - .		; +
   11DE                    3539 W43_0:
   11DE BC 0D              3540 	.word W44_CFA - .		; EMIT
   11E0 E8 F1              3541 	.word W3_CFA - .		; (;)
                           3542 ; --	.NYBBLES - Display a specified number of nybbles of the top of stack
                           3543 ; 	in hex.
                           3544 ; 
                           3545 ; ( a b -> )
                           3546 
                           3547 
                           3548 ; ----	.NYBBLES -- word # 45
                           3549 
   11E2                    3550 W45_Name:
                           3551 
                           3552 	; stringengize( .NYBBLES )
   11E2 2E                 3553 .byte 0x2e
   11E3 4E                 3554 .byte 0x4e
   11E4 59                 3555 .byte 0x59
   11E5 42                 3556 .byte 0x42
   11E6 42                 3557 .byte 0x42
   11E7 4C                 3558 .byte 0x4c
   11E8 45                 3559 .byte 0x45
   11E9 53                 3560 .byte 0x53
                           3561 
   11EA 08 00              3562 	.word ( . - W45_Name ) + 0 
   11EC 38 00              3563 	.word W45_CFA - W43_CFA
   11EE                    3564 W45_CFA:
   11EE 64 F1              3565 	.word W2_CFA - .		; (:)
   11F0                    3566 W45_PFA:
                           3567 ; We need to move the high-order nybble of the value we're going to
                           3568 ; display to the high-order nybble of the longword we're going to
                           3569 ; display. To do that, we need to dork with b; since we need a copy
                           3570 ; later, we'll have to save it on the return stack.
   11F0 71 F7              3571 	.word W17_CFA - .		; DUP
   11F2 A4 F8              3572 	.word W22_CFA - .		; >R
                           3573 ; Now we need to calculate how many nybbles we need to shift the value
                           3574 ; to the left so that the high-order bit of the first nybble we need
                           3575 ; to display is at the high-order bit of the top of the math stack.
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 66.
Hexidecimal [16-Bits]



   11F4 3D FF              3576 	.word W37_CFA - .		; (LIT)
   11F6 04 00              3577 	.word 4
   11F8 BC F7              3578 	.word W20_CFA - .		; SWAP
   11FA 85 FA              3579 	.word W29_CFA - .		; -
   11FC 35 FF              3580 	.word W37_CFA - .		; (LIT)
   11FE 02 00              3581 	.word 2
   1200 A5 FD              3582 	.word W34_CFA - .		; <<
   1202 A3 FD              3583 	.word W34_CFA - .		; <<
                           3584 ; Now we need to display b nybbles.
   1204 26 F9              3585 	.word W23_CFA - .		; <R
   1206 98 FF              3586 	.word W41_CFA - .		; 0
   1208 2B 07              3587 	.word W46_CFA - .		; (DO)
   120A                    3588 W45_0:
   120A AC FF              3589 	.word W43_CFA - .		; .NYBBLE
   120C 25 FF              3590 	.word W37_CFA - .		; (LIT)
   120E 04 00              3591 	.word 4
   1210 95 FD              3592 	.word W34_CFA - .		; <<
   1212 4A 05              3593 	.word W47_CFA - .		; (LOOP)
   1214 F6 FF              3594 	.word W45_0 - .
                           3595 ; We've now displayed the value, but we have a zero left on top of the
                           3596 ; stack. Drop it and exit.
   1216 3E F8              3597 	.word W21_CFA - .		; DROP
   1218 B0 F1              3598 	.word W3_CFA - .		; (;)
                           3599 ; --	. - Display all of the nybbles in the top of stack in hex.
                           3600 ; 
                           3601 ; ( a -> )
                           3602 ; 
                           3603 ; Revisions:	06/26/96 RLI - Added a space after the number
                           3604 ; 		06/28/96 RLI - Removed assumption about word size
                           3605 
                           3606 
                           3607 ; ----	. -- word # 48
                           3608 
   121A                    3609 W48_Name:
                           3610 
                           3611 	; stringengize( . )
   121A 2E                 3612 .byte 0x2e
                           3613 
   121B 01 00              3614 	.word ( . - W48_Name ) + 0 
   121D 31 00              3615 	.word W48_CFA - W45_CFA
   121F                    3616 W48_CFA:
   121F 33 F1              3617 	.word W2_CFA - .		; (:)
   1221                    3618 W48_PFA:
   1221 10 FF              3619 	.word W37_CFA - .		; (LIT)
   1223 04 00              3620 	.word 4
   1225 C9 FF              3621 	.word W45_CFA - .		; .NYBBLES
   1227 0A FF              3622 	.word W37_CFA - .		; (LIT)
   1229 20 00              3623 	.word 32
   122B 6F 0D              3624 	.word W44_CFA - .		; EMIT
   122D 9B F1              3625 	.word W3_CFA - .		; (;)
                           3626 ; --	TYPE - Display a counted string
                           3627 ; 
                           3628 ; ( a c -> )
                           3629 ; 
                           3630 ; c characters are displayed from memory starting at address a.
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 67.
Hexidecimal [16-Bits]



                           3631 
                           3632 
                           3633 ; ----	TYPE -- word # 49
                           3634 
   122F                    3635 W49_Name:
                           3636 
                           3637 	; stringengize( TYPE )
   122F 54                 3638 .byte 0x54
   1230 59                 3639 .byte 0x59
   1231 50                 3640 .byte 0x50
   1232 45                 3641 .byte 0x45
                           3642 
   1233 04 00              3643 	.word ( . - W49_Name ) + 0 
   1235 18 00              3644 	.word W49_CFA - W48_CFA
   1237                    3645 W49_CFA:
   1237 1B F1              3646 	.word W2_CFA - .		; (:)
   1239                    3647 W49_PFA:
   1239 F8 FE              3648 	.word W37_CFA - .		; (LIT)
   123B 00 00              3649 	.word 0
   123D F6 06              3650 	.word W46_CFA - .		; (DO)
   123F                    3651 W49_0:
   123F 22 F7              3652 	.word W17_CFA - .		; DUP
   1241 5C F4              3653 	.word W10_CFA - .		; B@
   1243 57 0D              3654 	.word W44_CFA - .		; EMIT
   1245 EC FE              3655 	.word W37_CFA - .		; (LIT)
   1247 01 00              3656 	.word 1
   1249 21 FB              3657 	.word W19_CFA - .		; +
   124B 11 05              3658 	.word W47_CFA - .		; (LOOP)
   124D F2 FF              3659 	.word W49_0 - .
   124F 05 F8              3660 	.word W21_CFA - .		; DROP
   1251 77 F1              3661 	.word W3_CFA - .		; (;)
                           3662 ; --	COUNT - Extract info about a conted string in memory
                           3663 ; 
                           3664 ; ( a -> a+1 c )
                           3665 ; 
                           3666 ; Given the address of a counted string in memory, returns the
                           3667 ; address of the start of the string and the length of the string
                           3668 ; on the stack.
                           3669 
                           3670 
                           3671 ; ----	COUNT -- word # 50
                           3672 
   1253                    3673 W50_Name:
                           3674 
                           3675 	; stringengize( COUNT )
   1253 43                 3676 .byte 0x43
   1254 4F                 3677 .byte 0x4f
   1255 55                 3678 .byte 0x55
   1256 4E                 3679 .byte 0x4e
   1257 54                 3680 .byte 0x54
                           3681 
   1258 05 00              3682 	.word ( . - W50_Name ) + 0 
   125A 25 00              3683 	.word W50_CFA - W49_CFA
   125C                    3684 W50_CFA:
   125C F6 F0              3685 	.word W2_CFA - .		; (:)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 68.
Hexidecimal [16-Bits]



   125E                    3686 W50_PFA:
   125E 03 F7              3687 	.word W17_CFA - .		; DUP
   1260 3D F4              3688 	.word W10_CFA - .		; B@
   1262 52 F7              3689 	.word W20_CFA - .		; SWAP
   1264 43 FF              3690 	.word W18_CFA - .		; 1
   1266 04 FB              3691 	.word W19_CFA - .		; +
   1268 4C F7              3692 	.word W20_CFA - .		; SWAP
   126A 5E F1              3693 	.word W3_CFA - .		; (;)
                           3694 ; ----
                           3695 ; 
                           3696 ;     Higher level input
                           3697 ; 
                           3698 ; These words are concerned with accepting a line of text from the user
                           3699 ; and chopping that line of text up into pieces.
                           3700 ; 
                           3701 ; The project-specific dictionary must provide a definition for
                           3702 ; INBUF, an array of at least 81 bytes (count byte, 79 character
                           3703 ; bytes, and space for the terminating NULL required by TOKEN).
                           3704 ; 
                           3705 ; ----
                           3706 ; --	?ABORT - Aborts if a key has been typed at the console
                           3707 ; 
                           3708 ; ( -> )
                           3709 ; 
                           3710 ; This word is handy for the bottom of a scope loop. It will break out
                           3711 ; of whatever is going on if a key is available at the console.
                           3712 
                           3713 
                           3714 ; ----	?ABORT -- word # 51
                           3715 
   126C                    3716 W51_Name:
                           3717 
                           3718 	; stringengize( ?ABORT )
   126C 3F                 3719 .byte 0x3f
   126D 41                 3720 .byte 0x41
   126E 42                 3721 .byte 0x42
   126F 4F                 3722 .byte 0x4f
   1270 52                 3723 .byte 0x52
   1271 54                 3724 .byte 0x54
                           3725 
   1272 06 00              3726 	.word ( . - W51_Name ) + 0 
   1274 1A 00              3727 	.word W51_CFA - W50_CFA
   1276                    3728 W51_CFA:
   1276 DC F0              3729 	.word W2_CFA - .		; (:)
   1278                    3730 W51_PFA:
   1278 36 0D              3731 	.word W52_CFA - .		; ?KEY
   127A A0 F2              3732 	.word W7_CFA - .		; (0BRANCH)
   127C 04 00              3733 	.word W51_0 - .
   127E FD 07              3734 	.word W53_CFA - .		; ABORT
   1280                    3735 W51_0:
   1280 48 F1              3736 	.word W3_CFA - .		; (;)
                           3737 ; --	CR - Displays a carriage return on the console
                           3738 ; 
                           3739 ; ( -> )
                           3740 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 69.
Hexidecimal [16-Bits]



                           3741 
                           3742 ; ----	CR -- word # 54
                           3743 
   1282                    3744 W54_Name:
                           3745 
                           3746 	; stringengize( CR )
   1282 43                 3747 .byte 0x43
   1283 52                 3748 .byte 0x52
                           3749 
   1284 02 00              3750 	.word ( . - W54_Name ) + 0 
   1286 12 00              3751 	.word W54_CFA - W51_CFA
   1288                    3752 W54_CFA:
   1288 CA F0              3753 	.word W2_CFA - .		; (:)
   128A                    3754 W54_PFA:
   128A A7 FE              3755 	.word W37_CFA - .		; (LIT)
   128C 0D 00              3756 	.word 13
   128E 0C 0D              3757 	.word W44_CFA - .		; EMIT
   1290 38 F1              3758 	.word W3_CFA - .		; (;)
                           3759 ; --	NL - Displays a newline ( <CR><LF> ) on the console
                           3760 ; 
                           3761 ; ( -> )
                           3762 
                           3763 
                           3764 ; ----	NL -- word # 55
                           3765 
   1292                    3766 W55_Name:
                           3767 
                           3768 	; stringengize( NL )
   1292 4E                 3769 .byte 0x4e
   1293 4C                 3770 .byte 0x4c
                           3771 
   1294 02 00              3772 	.word ( . - W55_Name ) + 0 
   1296 10 00              3773 	.word W55_CFA - W54_CFA
   1298                    3774 W55_CFA:
   1298 BA F0              3775 	.word W2_CFA - .		; (:)
   129A                    3776 W55_PFA:
   129A EE FF              3777 	.word W54_CFA - .		; CR
   129C 95 FE              3778 	.word W37_CFA - .		; (LIT)
   129E 0A 00              3779 	.word 10
   12A0 FA 0C              3780 	.word W44_CFA - .		; EMIT
   12A2 26 F1              3781 	.word W3_CFA - .		; (;)
                           3782 
                           3783 
                           3784 ; ----	INBUF -- word # 56
                           3785 
   12A4                    3786 W56_Name:
                           3787 
                           3788 	; stringengize( INBUF )
   12A4 49                 3789 .byte 0x49
   12A5 4E                 3790 .byte 0x4e
   12A6 42                 3791 .byte 0x42
   12A7 55                 3792 .byte 0x55
   12A8 46                 3793 .byte 0x46
                           3794 
   12A9 05 00              3795 	.word ( . - W56_Name ) + 0 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 70.
Hexidecimal [16-Bits]



   12AB 15 00              3796 	.word W56_CFA - W55_CFA
   12AD                    3797 W56_CFA:
   12AD CF F1              3798 	.word W5_CFA - .		; (VAR)
   12AF                    3799 W56_PFA:
   12AF                    3800 	.blkb 81
                           3801 
                           3802 
                           3803 ; ----	IN -- word # 57
                           3804 
   1300                    3805 W57_Name:
                           3806 
                           3807 	; stringengize( IN )
   1300 49                 3808 .byte 0x49
   1301 4E                 3809 .byte 0x4e
                           3810 
   1302 02 00              3811 	.word ( . - W57_Name ) + 0 
   1304 59 00              3812 	.word W57_CFA - W56_CFA
   1306                    3813 W57_CFA:
   1306 76 F1              3814 	.word W5_CFA - .		; (VAR)
   1308                    3815 W57_PFA:
   1308                    3816 	.blkb 2
                           3817 ; --	GETLINE - Accept a line of input from the console.
                           3818 ; 
                           3819 ; This word reads a line of input from the console, storing it in the
                           3820 ; string array INBUF. INBUF is arranged as a standard counted string;
                           3821 ; the first byte ( INBUF B@ ) is the length of the line and the
                           3822 ; remaining bytes are the data from the line.
                           3823 ; 
                           3824 ; The only control chracters recognized are <CR>, <BS>, and <DEL>.
                           3825 ; All other control characters are ignored.
                           3826 ; 
                           3827 ; Revisions:
                           3828 ; 
                           3829 ; 06/25/96 RLI - State K was drawn with its decision backwards (i.e.,
                           3830 ; 	it was going to state L if it received a non-control char).
                           3831 ; 06/26/96 RLI - Changed state R's CR to an NL. MOved a DUP in state
                           3832 ; 	D.
                           3833 ; 07/23/96 RLI - Typo in state F.
                           3834 
                           3835 
                           3836 ; ----	GETLINE -- word # 58
                           3837 
   130A                    3838 W58_Name:
                           3839 
                           3840 	; stringengize( GETLINE )
   130A 47                 3841 .byte 0x47
   130B 45                 3842 .byte 0x45
   130C 54                 3843 .byte 0x54
   130D 4C                 3844 .byte 0x4c
   130E 49                 3845 .byte 0x49
   130F 4E                 3846 .byte 0x4e
   1310 45                 3847 .byte 0x45
                           3848 
   1311 07 00              3849 	.word ( . - W58_Name ) + 0 
   1313 0F 00              3850 	.word W58_CFA - W57_CFA
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 71.
Hexidecimal [16-Bits]



   1315                    3851 W58_CFA:
   1315 3D F0              3852 	.word W2_CFA - .		; (:)
   1317                    3853 W58_PFA:
                           3854 ; State A: iNitialize the current pointer into the INBUF array. IN
                           3855 ; contains the offset of the next byte to be stored into INBUF.
   1317                    3856 W58_a:
   1317 1A FE              3857 	.word W37_CFA - .		; (LIT)
   1319 01 00              3858 	.word 1
   131B EB FF              3859 	.word W57_CFA - .		; IN
   131D 40 F4              3860 	.word W13_CFA - .		; !
                           3861 ; State B: Accept input when we're at the beginning of the line.
                           3862 ; 
                           3863 ; At the beginning of the line, <BS> and <DEL> have no meaning; they
                           3864 ; need to be ignored. When one comes in, go to state C to decide
                           3865 ; whether it should be ignored. Non-control charactrs need to be
                           3866 ; accepted into the buffer; when one comes in, go to state D.
   131F                    3867 W58_b:
   131F B7 0C              3868 	.word W59_CFA - .		; KEY
   1321 F7 00              3869 	.word W60_CFA - .		; ISCONTROL
   1323 F7 F1              3870 	.word W7_CFA - .		; (0BRANCH)
   1325 10 00              3871 	.word W58_d - .
                           3872 ; State C: A control character has arrived when we're at the beginning
                           3873 ; of the line. The only character of interest is <CR>; if the 
                           3874 ; character is <CR>, go to state R. Otherwise, go back to state B
                           3875 ; without doing anything with the control character.
   1327                    3876 W58_c:
   1327 0A FE              3877 	.word W37_CFA - .		; (LIT)
   1329 0D 00              3878 	.word 13
   132B 54 F9              3879 	.word W29_CFA - .		; -
   132D ED F1              3880 	.word W7_CFA - .		; (0BRANCH)
   132F BA 00              3881 	.word W58_r - .
   1331 A7 F1              3882 	.word W6_CFA - .		; (BRANCH)
   1333 EC FF              3883 	.word W58_b - .
                           3884 ; State D: We've received a non-control character. Append it to the
                           3885 ; buffer and bump the pointer into the buffer. If the pointer has gone
                           3886 ; past position 79 (we don't have to have to worry about whether or
                           3887 ; not the terminal wrapped), go to state E. Otherwise, go to state K.
   1335                    3888 W58_d:
   1335 2C F6              3889 	.word W17_CFA - .		; DUP
   1337 CF FF              3890 	.word W57_CFA - .		; IN
   1339 24 F3              3891 	.word W9_CFA - .		; @
   133B 72 FF              3892 	.word W56_CFA - .		; INBUF
   133D 2D FA              3893 	.word W19_CFA - .		; +
   133F C3 F4              3894 	.word W14_CFA - .		; B!
   1341 59 0C              3895 	.word W44_CFA - .		; EMIT
   1343 C3 FF              3896 	.word W57_CFA - .		; IN
   1345 05 F6              3897 	.word W16_CFA - .		; ++
   1347 BF FF              3898 	.word W57_CFA - .		; IN
   1349 14 F3              3899 	.word W9_CFA - .		; @
   134B E6 FD              3900 	.word W37_CFA - .		; (LIT)
   134D 4F 00              3901 	.word 79
   134F AC FD              3902 	.word W39_CFA - .		; >
   1351 C9 F1              3903 	.word W7_CFA - .		; (0BRANCH)
   1353 38 00              3904 	.word W58_k - .
                           3905 ; State E: Accept input when we're at the end of the line.
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 72.
Hexidecimal [16-Bits]



                           3906 ; 
                           3907 ; At the end of the line, only the control characters have meaning.
                           3908 ; Since there's no space left in the buffer to store printing
                           3909 ; characters, we'll just ignore them. When one comes in, go to state
                           3910 ; F. When a control character comes in, go to state G.
   1355                    3911 W58_e:
   1355 81 0C              3912 	.word W59_CFA - .		; KEY
   1357 C1 00              3913 	.word W60_CFA - .		; ISCONTROL
   1359 B2 FD              3914 	.word W40_CFA - .		; 0=
   135B BF F1              3915 	.word W7_CFA - .		; (0BRANCH)
   135D 08 00              3916 	.word W58_g - .
                           3917 ; State F: Ignore a printing character at the end of the line.
                           3918 ; 
                           3919 ; We've received a printing character at the end of the line. There's
                           3920 ; no space for it in the buffer, so just toss it and go back to
                           3921 ; state E.
   135F                    3922 W58_f:
   135F F5 F6              3923 	.word W21_CFA - .		; DROP
   1361 77 F1              3924 	.word W6_CFA - .		; (BRANCH)
   1363 F2 FF              3925 	.word W58_e - .
                           3926 ; State G: We have a control character at the end of the line. Look
                           3927 ; to see if it's <CR>; if so, go to state Q. Otherwise, go to
                           3928 ; state H.
   1365                    3929 W58_g:
   1365 FC F5              3930 	.word W17_CFA - .		; DUP
   1367 CA FD              3931 	.word W37_CFA - .		; (LIT)
   1369 0D 00              3932 	.word 13
   136B 14 F9              3933 	.word W29_CFA - .		; -
   136D AD F1              3934 	.word W7_CFA - .		; (0BRANCH)
   136F 78 00              3935 	.word W58_q - .
                           3936 ; State H: It's not <CR>. check for <BS>. If it's <BS>, go to state P.
                           3937 ; Otherwise, go to state I.
   1371                    3938 W58_h:
   1371 F0 F5              3939 	.word W17_CFA - .		; DUP
   1373 BE FD              3940 	.word W37_CFA - .		; (LIT)
   1375 08 00              3941 	.word 8
   1377 08 F9              3942 	.word W29_CFA - .		; -
   1379 A1 F1              3943 	.word W7_CFA - .		; (0BRANCH)
   137B 66 00              3944 	.word W58_p - .
                           3945 ; State I: It's not <BS>. Check for <DEL>. If it's <DEL>, go to state
                           3946 ; O. Otherwise, go back to state E.
   137D                    3947 W58_i:
   137D B4 FD              3948 	.word W37_CFA - .		; (LIT)
   137F 7F 00              3949 	.word 127
   1381 FE F8              3950 	.word W29_CFA - .		; -
   1383 97 F1              3951 	.word W7_CFA - .		; (0BRANCH)
   1385 32 00              3952 	.word W58_o - .
   1387 51 F1              3953 	.word W6_CFA - .		; (BRANCH)
   1389 CC FF              3954 	.word W58_e - .
                           3955 ; State J: (deleted)
                           3956 ; State K: Accept a character in the middle of the buffer. All of the
                           3957 ; control characters and printing characters have meaning. If a
                           3958 ; control character comes in, go to state L. Otherwise, go to
                           3959 ; state D.
   138B                    3960 W58_k:
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 73.
Hexidecimal [16-Bits]



   138B 4B 0C              3961 	.word W59_CFA - .		; KEY
   138D 8B 00              3962 	.word W60_CFA - .		; ISCONTROL
   138F 8B F1              3963 	.word W7_CFA - .		; (0BRANCH)
   1391 A4 FF              3964 	.word W58_d - .
                           3965 ; State L: We've received a control character in the middle of the
                           3966 ; buffer. Look to see if it's <CR>. If so, go to staet Q. Otherwise,
                           3967 ; go to state M.
   1393                    3968 W58_l:
   1393 CE F5              3969 	.word W17_CFA - .		; DUP
   1395 9C FD              3970 	.word W37_CFA - .		; (LIT)
   1397 0D 00              3971 	.word 13
   1399 E6 F8              3972 	.word W29_CFA - .		; -
   139B 7F F1              3973 	.word W7_CFA - .		; (0BRANCH)
   139D 4A 00              3974 	.word W58_q - .
                           3975 ; State M: Look to see if it's <BS>. If so, go to state P. Otherwise,
                           3976 ; go to state N.
   139F                    3977 W58_m:
   139F C2 F5              3978 	.word W17_CFA - .		; DUP
   13A1 90 FD              3979 	.word W37_CFA - .		; (LIT)
   13A3 08 00              3980 	.word 8
   13A5 DA F8              3981 	.word W29_CFA - .		; -
   13A7 73 F1              3982 	.word W7_CFA - .		; (0BRANCH)
   13A9 38 00              3983 	.word W58_p - .
                           3984 ; State N: Look to see if it's <DEL>. If so, go to state O. Otherwise,
                           3985 ; go to state K.
   13AB                    3986 W58_n:
   13AB 86 FD              3987 	.word W37_CFA - .		; (LIT)
   13AD 7F 00              3988 	.word 127
   13AF D0 F8              3989 	.word W29_CFA - .		; -
   13B1 5A FD              3990 	.word W40_CFA - .		; 0=
   13B3 67 F1              3991 	.word W7_CFA - .		; (0BRANCH)
   13B5 D6 FF              3992 	.word W58_k - .
                           3993 ; State O: We've received either a <BS> or a <DEL>. Echo <BS> <BS> to
                           3994 ; erase the last printable character from the screen. Decrement IN to
                           3995 ; erase the last printable character from INBUF. If IN has gone to
                           3996 ; the beginning of the line, go to state B. Otherwise, go to state K.
   13B7                    3997 W58_o:
   13B7 7A FD              3998 	.word W37_CFA - .		; (LIT)
   13B9 08 00              3999 	.word 8
   13BB A6 F5              4000 	.word W17_CFA - .		; DUP
   13BD DD 0B              4001 	.word W44_CFA - .		; EMIT
   13BF 72 FD              4002 	.word W37_CFA - .		; (LIT)
   13C1 20 00              4003 	.word 32
   13C3 D7 0B              4004 	.word W44_CFA - .		; EMIT
   13C5 D5 0B              4005 	.word W44_CFA - .		; EMIT
   13C7 3F FF              4006 	.word W57_CFA - .		; IN
   13C9 94 F2              4007 	.word W9_CFA - .		; @
   13CB DC FD              4008 	.word W18_CFA - .		; 1
   13CD B2 F8              4009 	.word W29_CFA - .		; -
   13CF 92 F5              4010 	.word W17_CFA - .		; DUP
   13D1 35 FF              4011 	.word W57_CFA - .		; IN
   13D3 8A F3              4012 	.word W13_CFA - .		; !
   13D5 D2 FD              4013 	.word W18_CFA - .		; 1
   13D7 A8 F8              4014 	.word W29_CFA - .		; -
   13D9 41 F1              4015 	.word W7_CFA - .		; (0BRANCH)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 74.
Hexidecimal [16-Bits]



   13DB 44 FF              4016 	.word W58_b - .
   13DD FB F0              4017 	.word W6_CFA - .		; (BRANCH)
   13DF AC FF              4018 	.word W58_k - .
                           4019 ; State P: We've received a <BS>. We need to go to state O, but we've
                           4020 ; still got the character on the stack so it could be checked for
                           4021 ; <DEL> if it wasn't <BS>. Drop the character from the stack and go
                           4022 ; to state O.
   13E1                    4023 W58_p:
   13E1 73 F6              4024 	.word W21_CFA - .		; DROP
   13E3 F5 F0              4025 	.word W6_CFA - .		; (BRANCH)
   13E5 D2 FF              4026 	.word W58_o - .
                           4027 ; State Q: We've received a <CR>. We need to go to state R, but we've
                           4028 ; still got the character on the stack so it could be checked for
                           4029 ; <BS> and <DEL> if it wasn't <CR>. Drop the character from the stack
                           4030 ; and go to state R.
   13E7                    4031 W58_q:
   13E7 6D F6              4032 	.word W21_CFA - .		; DROP
                           4033 ; State R: We're done. Ensure the line is null-termianted becasue
                           4034 ; TOKEN requires this. Update the count byte of INBUF from IN; since
                           4035 ; IN points at the _next_ character that would be filled by a non-
                           4036 ; printing character, the number of characters in INBUF is IN-1.
                           4037 ; 
                           4038 ; After we're done, IN is initialized to 1 to make TOKEN's life
                           4039 ; easier.
   13E9                    4040 W58_r:
   13E9 B5 FD              4041 	.word W41_CFA - .		; 0
   13EB 1B FF              4042 	.word W57_CFA - .		; IN
   13ED 70 F2              4043 	.word W9_CFA - .		; @
   13EF BE FE              4044 	.word W56_CFA - .		; INBUF
   13F1 79 F9              4045 	.word W19_CFA - .		; +
   13F3 0F F4              4046 	.word W14_CFA - .		; B!
   13F5 11 FF              4047 	.word W57_CFA - .		; IN
   13F7 66 F2              4048 	.word W9_CFA - .		; @
   13F9 AE FD              4049 	.word W18_CFA - .		; 1
   13FB 84 F8              4050 	.word W29_CFA - .		; -
   13FD B0 FE              4051 	.word W56_CFA - .		; INBUF
   13FF 03 F4              4052 	.word W14_CFA - .		; B!
   1401 A6 FD              4053 	.word W18_CFA - .		; 1
   1403 03 FF              4054 	.word W57_CFA - .		; IN
   1405 58 F3              4055 	.word W13_CFA - .		; !
   1407 91 FE              4056 	.word W55_CFA - .		; NL
   1409                    4057 W58_z:
   1409 BF EF              4058 	.word W3_CFA - .		; (;)
                           4059 ; --	ISCONTROL - See if an ASCII character is a control character
                           4060 ; 
                           4061 ; ( c -> c f )
                           4062 ; 
                           4063 ; f = 0 if c is not a control character
                           4064 ; f = 1 if c is a control character
                           4065 ; 
                           4066 ; A control character is either smaller than ` ' or <DEL>.
                           4067 ; 
                           4068 ; Revisions:
                           4069 ; 
                           4070 ; 06/25/96 RLI - Ambiguous state diagramming turned into an oops in
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 75.
Hexidecimal [16-Bits]



                           4071 ; 	state A. Swapped states B and C to compensate without
                           4072 ; 	adding extra code.
                           4073 
                           4074 
                           4075 ; ----	ISCONTROL -- word # 60
                           4076 
   140B                    4077 W60_Name:
                           4078 
                           4079 	; stringengize( ISCONTROL )
   140B 49                 4080 .byte 0x49
   140C 53                 4081 .byte 0x53
   140D 43                 4082 .byte 0x43
   140E 4F                 4083 .byte 0x4f
   140F 4E                 4084 .byte 0x4e
   1410 54                 4085 .byte 0x54
   1411 52                 4086 .byte 0x52
   1412 4F                 4087 .byte 0x4f
   1413 4C                 4088 .byte 0x4c
                           4089 
   1414 09 00              4090 	.word ( . - W60_Name ) + 0 
   1416 03 01              4091 	.word W60_CFA - W58_CFA
   1418                    4092 W60_CFA:
   1418 3A EF              4093 	.word W2_CFA - .		; (:)
   141A                    4094 W60_PFA:
                           4095 ; State A: Look to see if it's smaller than ' '. If so, go to C.
                           4096 ; Otherwise, go to B.
   141A                    4097 W60_a:
   141A 47 F5              4098 	.word W17_CFA - .		; DUP
   141C 15 FD              4099 	.word W37_CFA - .		; (LIT)
   141E 20 00              4100 	.word 32
   1420 CE FC              4101 	.word W38_CFA - .		; <
   1422 F8 F0              4102 	.word W7_CFA - .		; (0BRANCH)
   1424 08 00              4103 	.word W60_c - .
                           4104 ; State B: It's smaller than ' ', but we lost that fact when we did
                           4105 ; the (0BRANCH). Push a true back on the stack and exit.
   1426                    4106 W60_b:
   1426 81 FD              4107 	.word W18_CFA - .		; 1
   1428 B0 F0              4108 	.word W6_CFA - .		; (BRANCH)
   142A 0A 00              4109 	.word W60_z - .
                           4110 ; State C: It's not smaller than ' '; is it <DEL>? Check and exit.
   142C                    4111 W60_c:
   142C 35 F5              4112 	.word W17_CFA - .		; DUP
   142E 03 FD              4113 	.word W37_CFA - .		; (LIT)
   1430 7F 00              4114 	.word 127
   1432 EE FC              4115 	.word W42_CFA - .		; =
   1434                    4116 W60_z:
   1434 94 EF              4117 	.word W3_CFA - .		; (;)
                           4118 ; --	NEXTCHAR - Returns the next character from the input buffer
                           4119 ; 
                           4120 ; ( -> c )
                           4121 ; 
                           4122 ; The character at INBUF[ IN ] is fetched. IN is bumped if the
                           4123 ; character was not null.
                           4124 
                           4125 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 76.
Hexidecimal [16-Bits]



                           4126 ; ----	NEXTCHAR -- word # 61
                           4127 
   1436                    4128 W61_Name:
                           4129 
                           4130 	; stringengize( NEXTCHAR )
   1436 4E                 4131 .byte 0x4e
   1437 45                 4132 .byte 0x45
   1438 58                 4133 .byte 0x58
   1439 54                 4134 .byte 0x54
   143A 43                 4135 .byte 0x43
   143B 48                 4136 .byte 0x48
   143C 41                 4137 .byte 0x41
   143D 52                 4138 .byte 0x52
                           4139 
   143E 08 00              4140 	.word ( . - W61_Name ) + 0 
   1440 2A 00              4141 	.word W61_CFA - W60_CFA
   1442                    4142 W61_CFA:
   1442 10 EF              4143 	.word W2_CFA - .		; (:)
   1444                    4144 W61_PFA:
   1444 69 FE              4145 	.word W56_CFA - .		; INBUF
   1446 C0 FE              4146 	.word W57_CFA - .		; IN
   1448 15 F2              4147 	.word W9_CFA - .		; @
   144A 20 F9              4148 	.word W19_CFA - .		; +
   144C 51 F2              4149 	.word W10_CFA - .		; B@
   144E 13 F5              4150 	.word W17_CFA - .		; DUP
   1450 CA F0              4151 	.word W7_CFA - .		; (0BRANCH)
   1452 06 00              4152 	.word W61_0 - .
   1454 B2 FE              4153 	.word W57_CFA - .		; IN
   1456 F4 F4              4154 	.word W16_CFA - .		; ++
   1458                    4155 W61_0:
   1458 70 EF              4156 	.word W3_CFA - .		; (;)
                           4157 ; --	TOKEN - return the next token from INBUF
                           4158 ; 
                           4159 ; ( -> a c )
                           4160 ; 
                           4161 ; This word looks at the next string from INBUF to find the next
                           4162 ; token. Blanks are skipped until a non-blank is found; the address
                           4163 ; of the first non-blank is 'a'. The non-blanks are then counted until
                           4164 ; a blank is found; the count of non-blanks is 'c'.
                           4165 ; 
                           4166 ; NEXTCHAR is used to fetch characters from INBUF. NEXTCHAR uses IN
                           4167 ; to tell it where the next character is and updates IN after it
                           4168 ; fetches a character. Both NEXTCHAR and TOKEN assume there is a
                           4169 ; null following INBUF.
                           4170 ; 
                           4171 ; TOKEN assumes the only whitespace characters it will encounter
                           4172 ; in INBUF are NULL and space.
                           4173 
                           4174 
                           4175 ; ----	TOKEN -- word # 62
                           4176 
   145A                    4177 W62_Name:
                           4178 
                           4179 	; stringengize( TOKEN )
   145A 54                 4180 .byte 0x54
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 77.
Hexidecimal [16-Bits]



   145B 4F                 4181 .byte 0x4f
   145C 4B                 4182 .byte 0x4b
   145D 45                 4183 .byte 0x45
   145E 4E                 4184 .byte 0x4e
                           4185 
   145F 05 00              4186 	.word ( . - W62_Name ) + 0 
   1461 21 00              4187 	.word W62_CFA - W61_CFA
   1463                    4188 W62_CFA:
   1463 EF EE              4189 	.word W2_CFA - .		; (:)
   1465                    4190 W62_PFA:
                           4191 ; State A: Form the address of the first character we'll examine and
                           4192 ; go to state B.
   1465                    4193 W62_a:
   1465 48 FE              4194 	.word W56_CFA - .		; INBUF
   1467 9F FE              4195 	.word W57_CFA - .		; IN
   1469 F4 F1              4196 	.word W9_CFA - .		; @
   146B FF F8              4197 	.word W19_CFA - .		; +
                           4198 ; State B: We've not yet seen a non-space character.
                           4199 ; 
                           4200 ; Get the next character and check for the null terminator. If we've
                           4201 ; hit the null terminator, just exit; the copy of the null we would
                           4202 ; need for state C if it weren't null will be a zero to tell the
                           4203 ; caller that we hit the null before seeing anything. If the
                           4204 ; character is not null, go to state C.
   146D                    4205 W62_b:
   146D D5 FF              4206 	.word W61_CFA - .		; NEXTCHAR
   146F F2 F4              4207 	.word W17_CFA - .		; DUP
   1471 A9 F0              4208 	.word W7_CFA - .		; (0BRANCH)
   1473 32 00              4209 	.word W62_z - .
                           4210 ; State C: It's not a null, look for a space. If it's a space, go to
                           4211 ; state H. Otherwise, go to state D.
   1475                    4212 W62_c:
   1475 BC FC              4213 	.word W37_CFA - .		; (LIT)
   1477 20 00              4214 	.word 32
   1479 06 F8              4215 	.word W29_CFA - .		; -
   147B 9F F0              4216 	.word W7_CFA - .		; (0BRANCH)
   147D 1E 00              4217 	.word W62_h - .
                           4218 ; State D: We've found our first non-space character. The token is
                           4219 ; at least one character long. Put the initial count on the stack
                           4220 ; and go to state E.
   147F                    4221 W62_d:
   147F 28 FD              4222 	.word W18_CFA - .		; 1
                           4223 ; State E: Get the next character and look to see if it's the null
                           4224 ; at the end of the buffer. If so, go to state I. Otherwise, go to
                           4225 ; state F.
   1481                    4226 W62_e:
   1481 C1 FF              4227 	.word W61_CFA - .		; NEXTCHAR
   1483 DE F4              4228 	.word W17_CFA - .		; DUP
   1485 95 F0              4229 	.word W7_CFA - .		; (0BRANCH)
   1487 1C 00              4230 	.word W62_i - .
                           4231 ; State F: We've not found the end of the string, but have we found
                           4232 ; the end of the token? If the character is space, exit; the correct
                           4233 ; count will be on top of the stack. Otherwise, go to state G.
   1489                    4234 W62_f:
   1489 A8 FC              4235 	.word W37_CFA - .		; (LIT)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 78.
Hexidecimal [16-Bits]



   148B 20 00              4236 	.word 32
   148D F2 F7              4237 	.word W29_CFA - .		; -
   148F 8B F0              4238 	.word W7_CFA - .		; (0BRANCH)
   1491 14 00              4239 	.word W62_z - .
                           4240 ; State G: We have another non-space character. Count it and go back
                           4241 ; to state E.
   1493                    4242 W62_g:
   1493 14 FD              4243 	.word W18_CFA - .		; 1
   1495 D5 F8              4244 	.word W19_CFA - .		; +
   1497 41 F0              4245 	.word W6_CFA - .		; (BRANCH)
   1499 E8 FF              4246 	.word W62_e - .
                           4247 ; State H: We have another space character before the token. Bump the
                           4248 ; pointer to the first non-space character and go back to state B.
   149B                    4249 W62_h:
   149B 0C FD              4250 	.word W18_CFA - .		; 1
   149D CD F8              4251 	.word W19_CFA - .		; +
   149F 39 F0              4252 	.word W6_CFA - .		; (BRANCH)
   14A1 CC FF              4253 	.word W62_b - .
                           4254 ; State I: We've found the null at the end of the buffer immediately
                           4255 ; following the token. We have an extry copy of the null on the stack
                           4256 ; so that state F could check for a space. Drop the extra copy and
                           4257 ; exit.
   14A3                    4258 W62_i:
   14A3 B1 F5              4259 	.word W21_CFA - .		; DROP
                           4260 ; *** EXIT ***
   14A5                    4261 W62_z:
   14A5 23 EF              4262 	.word W3_CFA - .		; (;)
                           4263 ; ----
                           4264 ; 
                           4265 ; String comparisons
                           4266 ; 
                           4267 ; These are primarily used when looking up a word in the dictionary
                           4268 ; 
                           4269 ; ----
                           4270 ; --	$= - String comparison
                           4271 ; 
                           4272 ; ( a2 c2 a1 c1 -> f )
                           4273 ; 
                           4274 ; 'f' is 0 if the string described by a1,c1 is not equal to the
                           4275 ; string described by a2,c2. 'f' is 1 if they are equal.
                           4276 
                           4277 
                           4278 ; ----	$= -- word # 63
                           4279 
   14A7                    4280 W63_Name:
                           4281 
                           4282 	; stringengize( $= )
   14A7 24                 4283 .byte 0x24
   14A8 3D                 4284 .byte 0x3d
                           4285 
   14A9 02 00              4286 	.word ( . - W63_Name ) + 0 
   14AB 4A 00              4287 	.word W63_CFA - W62_CFA
   14AD                    4288 W63_CFA:
   14AD A5 EE              4289 	.word W2_CFA - .		; (:)
   14AF                    4290 W63_PFA:
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 79.
Hexidecimal [16-Bits]



                           4291 ; State A: Compare the lengths of the strings; if the strings are
                           4292 ; equal, they must have the same length. If the lengths differ,
                           4293 ; go to stae E. Othewrise, go to state B.
   14AF                    4294 W63_a:
   14AF 05 F5              4295 	.word W20_CFA - .		; SWAP
   14B1 E5 F5              4296 	.word W22_CFA - .		; >R
   14B3 56 F7              4297 	.word W26_CFA - .		; OVER
   14B5 CA F7              4298 	.word W29_CFA - .		; -
   14B7 54 FC              4299 	.word W40_CFA - .		; 0=
   14B9 61 F0              4300 	.word W7_CFA - .		; (0BRANCH)
   14BB 38 00              4301 	.word W63_e - .
                           4302 ; State B: Arrange the stack such that the number of characters to be
                           4303 ; compared is the top of the math staack and the addresses of the two
                           4304 ; strings are next on the math stack. If the number of characters to
                           4305 ; compare is zero, we're trying to compare two null strings; go to
                           4306 ; state F since the strings are obviously equal. Otherwise, go to 
                           4307 ; state C.
   14BD                    4308 W63_b:
   14BD 6D F6              4309 	.word W23_CFA - .		; <R
   14BF F5 F4              4310 	.word W20_CFA - .		; SWAP
   14C1 A0 F4              4311 	.word W17_CFA - .		; DUP
   14C3 57 F0              4312 	.word W7_CFA - .		; (0BRANCH)
   14C5 3C 00              4313 	.word W63_f - .
                           4314 ; State C: Stash the number of characters to compare on the return
                           4315 ; stack where it'll be safe for a moment. Fetch the next character
                           4316 ; from both strings and compare that character. If they are equal,
                           4317 ; go to state D. Otherwise, go to state E.
   14C7                    4318 W63_c:
   14C7 CF F5              4319 	.word W22_CFA - .		; >R
   14C9 40 F7              4320 	.word W26_CFA - .		; OVER
   14CB D2 F1              4321 	.word W10_CFA - .		; B@
   14CD 3C F7              4322 	.word W26_CFA - .		; OVER
   14CF CE F1              4323 	.word W10_CFA - .		; B@
   14D1 AE F7              4324 	.word W29_CFA - .		; -
   14D3 38 FC              4325 	.word W40_CFA - .		; 0=
   14D5 45 F0              4326 	.word W7_CFA - .		; (0BRANCH)
   14D7 1C 00              4327 	.word W63_e - .
                           4328 ; State D: The strings are equal so far. Bump the pointers into the
                           4329 ; strings and decrement the count of characters left to compare.
                           4330 ; If we've compared all of the characters, go to state F. Otherwise,
                           4331 ; go to state B.
   14D9                    4332 W63_d:
   14D9 CE FC              4333 	.word W18_CFA - .		; 1
   14DB 8F F8              4334 	.word W19_CFA - .		; +
   14DD D7 F4              4335 	.word W20_CFA - .		; SWAP
   14DF C8 FC              4336 	.word W18_CFA - .		; 1
   14E1 89 F8              4337 	.word W19_CFA - .		; +
   14E3 47 F6              4338 	.word W23_CFA - .		; <R
   14E5 C2 FC              4339 	.word W18_CFA - .		; 1
   14E7 98 F7              4340 	.word W29_CFA - .		; -
   14E9 78 F4              4341 	.word W17_CFA - .		; DUP
   14EB 2F F0              4342 	.word W7_CFA - .		; (0BRANCH)
   14ED 14 00              4343 	.word W63_f - .
   14EF E9 EF              4344 	.word W6_CFA - .		; (BRANCH)
   14F1 D6 FF              4345 	.word W63_c - .
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 80.
Hexidecimal [16-Bits]



                           4346 ; State E: We've found a difference between the strings; they aren't
                           4347 ; equal. Clean up the math and return stacks and push a zero onto
                           4348 ; the math stack to indicate the inequality. Exit.
   14F3                    4349 W63_e:
   14F3 37 F6              4350 	.word W23_CFA - .		; <R
   14F5 5F F5              4351 	.word W21_CFA - .		; DROP
   14F7 5D F5              4352 	.word W21_CFA - .		; DROP
   14F9 5B F5              4353 	.word W21_CFA - .		; DROP
   14FB A3 FC              4354 	.word W41_CFA - .		; 0
   14FD DB EF              4355 	.word W6_CFA - .		; (BRANCH)
   14FF 0A 00              4356 	.word W63_z - .
                           4357 ; State F: We've made it to the end of the strings without finding a
                           4358 ; difference; they must be equal. Clean up the math stack and push a
                           4359 ; 1 to indicate the equality. Exit.
   1501                    4360 W63_f:
   1501 53 F5              4361 	.word W21_CFA - .		; DROP
   1503 51 F5              4362 	.word W21_CFA - .		; DROP
   1505 4F F5              4363 	.word W21_CFA - .		; DROP
   1507 A0 FC              4364 	.word W18_CFA - .		; 1
                           4365 ; *** EXIT ***
   1509                    4366 W63_z:
   1509 BF EE              4367 	.word W3_CFA - .		; (;)
                           4368 ; ----
                           4369 ; 
                           4370 ; Simple directory manipulation
                           4371 ; 
                           4372 ; ----
                           4373 
                           4374 
                           4375 ; ----	LAST -- word # 64
                           4376 
   150B                    4377 W64_Name:
                           4378 
                           4379 	; stringengize( LAST )
   150B 4C                 4380 .byte 0x4c
   150C 41                 4381 .byte 0x41
   150D 53                 4382 .byte 0x53
   150E 54                 4383 .byte 0x54
                           4384 
   150F 04 00              4385 	.word ( . - W64_Name ) + 0 
   1511 66 00              4386 	.word W64_CFA - W63_CFA
   1513                    4387 W64_CFA:
   1513 69 EF              4388 	.word W5_CFA - .		; (VAR)
   1515                    4389 W64_PFA:
   1515                    4390 	.blkb 2
                           4391 ; --	ID>$ - Turn a word name into a counted string description
                           4392 ; 
                           4393 ; ( cfa -> a c )
                           4394 ; 
                           4395 ; Given the address of a word's CFA, this word returns the address of
                           4396 ; the word's name (a) and the length of the word's name (c).
                           4397 ; 
                           4398 ; Revisions:
                           4399 ; 
                           4400 ; 06/26/96 RLI - Number of small oopses. First, the value for
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 81.
Hexidecimal [16-Bits]



                           4401 ; 	%flagoffset is given as a byte offset from the CFA. This
                           4402 ; 	value is negative, so we need to _add_ it to the CFA instead
                           4403 ; 	of subtracting it. Second, the SWAP was accidentally omitted
                           4404 ; 	from state A. Third, the SWAP in stateh C was not necessary
                           4405 ; 	as the address of the name is smaller than the address of
                           4406 ; 	the end of the string, not vice-versa.
                           4407 
                           4408 
                           4409 ; ----	ID>$ -- word # 65
                           4410 
   1517                    4411 W65_Name:
                           4412 
                           4413 	; stringengize( ID>$ )
   1517 49                 4414 .byte 0x49
   1518 44                 4415 .byte 0x44
   1519 3E                 4416 .byte 0x3e
   151A 24                 4417 .byte 0x24
                           4418 
   151B 04 00              4419 	.word ( . - W65_Name ) + 0 
   151D 0C 00              4420 	.word W65_CFA - W64_CFA
   151F                    4421 W65_CFA:
   151F 33 EE              4422 	.word W2_CFA - .		; (:)
   1521                    4423 W65_PFA:
                           4424 ; State A: Given the CFA, calculate the address of the word's name.
                           4425 ; First calculate the address of the flags byte (which contains the
                           4426 ; name's length) then fetch the flags byte and strip off the flags.
                           4427 ; From that, calculate the address of the start of the word's name.
                           4428 ; 
                           4429 ; Since a name may be padded with nulls to longword align the
                           4430 ; definition, the length of the word's name given in the word's header
                           4431 ; may not be the actual length of the word's name; we have to strip
                           4432 ; any nulls that may follow the name.
   1521                    4433 W65_a:
   1521 10 FC              4434 	.word W37_CFA - .		; (LIT)
   1523 FC FF              4435 	.word -4
   1525 45 F8              4436 	.word W19_CFA - .		; +
   1527 3A F4              4437 	.word W17_CFA - .		; DUP
   1529 38 F4              4438 	.word W17_CFA - .		; DUP
   152B 32 F1              4439 	.word W9_CFA - .		; @
   152D 04 FC              4440 	.word W37_CFA - .		; (LIT)
   152F 3F 00              4441 	.word 63
   1531 DF F8              4442 	.word W31_CFA - .		; AND
   1533 4C F7              4443 	.word W29_CFA - .		; -
   1535 7F F4              4444 	.word W20_CFA - .		; SWAP
                           4445 ; State B: Move to the previous character (the first time, this will
                           4446 ; move from the Flag byte to the last byte of the name). If the new
                           4447 ; character is a null, do it again. Otherwise, go to state C.
   1537                    4448 W65_b:
   1537 70 FC              4449 	.word W18_CFA - .		; 1
   1539 46 F7              4450 	.word W29_CFA - .		; -
   153B 26 F4              4451 	.word W17_CFA - .		; DUP
   153D 60 F1              4452 	.word W10_CFA - .		; B@
   153F DB EF              4453 	.word W7_CFA - .		; (0BRANCH)
   1541 F6 FF              4454 	.word W65_b - .
                           4455 ; State C: We've found the address of the last non-null character of
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 82.
Hexidecimal [16-Bits]



                           4456 ; the name, now calculate the length of the name. Exit.
   1543                    4457 W65_c:
   1543 C6 F6              4458 	.word W26_CFA - .		; OVER
   1545 3A F7              4459 	.word W29_CFA - .		; -
   1547 60 FC              4460 	.word W18_CFA - .		; 1
   1549 21 F8              4461 	.word W19_CFA - .		; +
                           4462 ; *** EXIT ***
   154B                    4463 W65_z:
   154B 7D EE              4464 	.word W3_CFA - .		; (;)
                           4465 ; --	PREV - Return the address of the previous word's CFA
                           4466 ; 
                           4467 ; 	( cfa -> cfa )
                           4468 ; 
                           4469 ; Given the address of a word's CFA, this word will return either the
                           4470 ; address of the CFA of the previous word in the dictionary or zero if
                           4471 ; the given word is the first word in the dictionary.
                           4472 ; 
                           4473 ; Since this word returns zero when it encounters the first word, you
                           4474 ; cannot have a word which has its CFA at address zero. Since there
                           4475 ; are header items before the CFA, I don't think this is a problem.
                           4476 ; 
                           4477 ; Revisions:
                           4478 ; 
                           4479 ; 06/25/96 RLI - Fixed state C, which was coded to assume the CFA
                           4480 ; 	address pointed to a 16-bit link field. Sigh.
                           4481 ; 06/28/96 RLI - Modified to use cell-sized link field.
                           4482 
                           4483 
                           4484 ; ----	PREV -- word # 66
                           4485 
   154D                    4486 W66_Name:
                           4487 
                           4488 	; stringengize( PREV )
   154D 50                 4489 .byte 0x50
   154E 52                 4490 .byte 0x52
   154F 45                 4491 .byte 0x45
   1550 56                 4492 .byte 0x56
                           4493 
   1551 04 00              4494 	.word ( . - W66_Name ) + 0 
   1553 36 00              4495 	.word W66_CFA - W65_CFA
   1555                    4496 W66_CFA:
   1555 FD ED              4497 	.word W2_CFA - .		; (:)
   1557                    4498 W66_PFA:
                           4499 ; State A: Fetch the flag word for this word and examine the End flag.
                           4500 ; If it's set, go to state B. Otherwise, go to state C.
   1557                    4501 W66_a:
   1557 0A F4              4502 	.word W17_CFA - .		; DUP
   1559 D8 FB              4503 	.word W37_CFA - .		; (LIT)
   155B FC FF              4504 	.word -4
   155D 0D F8              4505 	.word W19_CFA - .		; +
   155F FE F0              4506 	.word W9_CFA - .		; @
   1561 D0 FB              4507 	.word W37_CFA - .		; (LIT)
   1563 40 00              4508 	.word 64
   1565 AB F8              4509 	.word W31_CFA - .		; AND
   1567 B3 EF              4510 	.word W7_CFA - .		; (0BRANCH)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 83.
Hexidecimal [16-Bits]



   1569 0A 00              4511 	.word W66_c - .
                           4512 ; State B: This is the first word in the dictionary. Return a zero.
   156B                    4513 W66_b:
   156B E9 F4              4514 	.word W21_CFA - .		; DROP
   156D 31 FC              4515 	.word W41_CFA - .		; 0
   156F 69 EF              4516 	.word W6_CFA - .		; (BRANCH)
   1571 0E 00              4517 	.word W66_z - .
                           4518 ; State C: This is not the first word in the dictionary. Fetch the
                           4519 ; address of the previous word and exit.
   1573                    4520 W66_c:
   1573 EE F3              4521 	.word W17_CFA - .		; DUP
   1575 BC FB              4522 	.word W37_CFA - .		; (LIT)
   1577 FE FF              4523 	.word -2
   1579 F1 F7              4524 	.word W19_CFA - .		; +
   157B E2 F0              4525 	.word W9_CFA - .		; @
   157D 02 F7              4526 	.word W29_CFA - .		; -
                           4527 ; *** EXIT ***
   157F                    4528 W66_z:
   157F 49 EE              4529 	.word W3_CFA - .		; (;)
                           4530 ; --	VLIST - Display the names of all words in the dictionary
                           4531 ; 
                           4532 ; ( -> )
                           4533 ; 
                           4534 ; This word traverses the dictionary, displaying the name of each
                           4535 ; word in the dictionary.
                           4536 ; 
                           4537 ; Revisions:
                           4538 ; 
                           4539 ; 06/26/96 RLI - Added a space after each name is displayed.
                           4540 
                           4541 
                           4542 ; ----	VLIST -- word # 67
                           4543 
   1581                    4544 W67_Name:
                           4545 
                           4546 	; stringengize( VLIST )
   1581 56                 4547 .byte 0x56
   1582 4C                 4548 .byte 0x4c
   1583 49                 4549 .byte 0x49
   1584 53                 4550 .byte 0x53
   1585 54                 4551 .byte 0x54
                           4552 
   1586 05 00              4553 	.word ( . - W67_Name ) + 0 
   1588 35 00              4554 	.word W67_CFA - W66_CFA
   158A                    4555 W67_CFA:
   158A C8 ED              4556 	.word W2_CFA - .		; (:)
   158C                    4557 W67_PFA:
                           4558 ; State A: Begin at LAST. Go to state B.
   158C                    4559 W67_a:
   158C 87 FF              4560 	.word W64_CFA - .		; LAST
   158E CF F0              4561 	.word W9_CFA - .		; @
                           4562 ; State B: Look to see if we've found the end of the dictionary. If
                           4563 ; so, go to state D. Otherwise, go to state C.
   1590                    4564 W67_b:
   1590 D1 F3              4565 	.word W17_CFA - .		; DUP
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 84.
Hexidecimal [16-Bits]



   1592 88 EF              4566 	.word W7_CFA - .		; (0BRANCH)
   1594 14 00              4567 	.word W67_d - .
                           4568 ; State C: We've not found the end of the dictionary. Display this
                           4569 ; word's name and move to the previous word. Go back to state B.
   1596                    4570 W67_c:
   1596 CB F3              4571 	.word W17_CFA - .		; DUP
   1598 87 FF              4572 	.word W65_CFA - .		; ID>$
   159A 9D FC              4573 	.word W49_CFA - .		; TYPE
   159C 95 FB              4574 	.word W37_CFA - .		; (LIT)
   159E 20 00              4575 	.word 32
   15A0 FA 09              4576 	.word W44_CFA - .		; EMIT
   15A2 B3 FF              4577 	.word W66_CFA - .		; PREV
   15A4 34 EF              4578 	.word W6_CFA - .		; (BRANCH)
   15A6 EA FF              4579 	.word W67_b - .
                           4580 ; State D: We've found the end of the dictionary. Drop the zero from
                           4581 ; the stack and exit.
   15A8                    4582 W67_d:
   15A8 AC F4              4583 	.word W21_CFA - .		; DROP
                           4584 ; *** EXIT ***
   15AA                    4585 W67_z:
   15AA 1E EE              4586 	.word W3_CFA - .		; (;)
                           4587 ; --	FIND - Find a word in the dictionary given its name
                           4588 ; 
                           4589 ; ( a c -> a c cfa )
                           4590 ; 
                           4591 ; Given a counted string containing the name of a word, this word
                           4592 ; looks it up in the dictionary and returns its CFA. If the word is
                           4593 ; not in the dictionary, zero is returned for the CFA.
                           4594 
                           4595 
                           4596 ; ----	FIND -- word # 68
                           4597 
   15AC                    4598 W68_Name:
                           4599 
                           4600 	; stringengize( FIND )
   15AC 46                 4601 .byte 0x46
   15AD 49                 4602 .byte 0x49
   15AE 4E                 4603 .byte 0x4e
   15AF 44                 4604 .byte 0x44
                           4605 
   15B0 04 00              4606 	.word ( . - W68_Name ) + 0 
   15B2 2A 00              4607 	.word W68_CFA - W67_CFA
   15B4                    4608 W68_CFA:
   15B4 9E ED              4609 	.word W2_CFA - .		; (:)
   15B6                    4610 W68_PFA:
                           4611 ; State A: Begin at the last word in the dictionary.
   15B6                    4612 W68_a:
   15B6 5D FF              4613 	.word W64_CFA - .		; LAST
   15B8 A5 F0              4614 	.word W9_CFA - .		; @
   15BA DC F4              4615 	.word W22_CFA - .		; >R
                           4616 ; State B: Take a look at the next word we're going to examine. If 
                           4617 ; we've found the end of the dictionary, go to state D. Otherwise,
                           4618 ; go to state C.
   15BC                    4619 W68_b:
   15BC DB F5              4620 	.word W24_CFA - .		; R
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 85.
Hexidecimal [16-Bits]



   15BE 5C EF              4621 	.word W7_CFA - .		; (0BRANCH)
   15C0 10 00              4622 	.word W68_d - .
                           4623 ; State C: We've not found the word yet. Compare the string with the
                           4624 ; word's name. If they matched, go to state D. Otherwise, go to state
                           4625 ; E.
   15C2                    4626 W68_c:
   15C2 47 F6              4627 	.word W26_CFA - .		; OVER
   15C4 45 F6              4628 	.word W26_CFA - .		; OVER
   15C6 D1 F5              4629 	.word W24_CFA - .		; R
   15C8 57 FF              4630 	.word W65_CFA - .		; ID>$
   15CA E3 FE              4631 	.word W63_CFA - .		; $=
   15CC 4E EF              4632 	.word W7_CFA - .		; (0BRANCH)
   15CE 08 00              4633 	.word W68_e - .
                           4634 ; State D: We've reached the end of the search; either we've found the
                           4635 ; word (and the address of the word's CFA is on the return stack) or
                           4636 ; we've hit the end of the dictionary (and zero is on the return
                           4637 ; stack). In either case, we need to return whatever is on the
                           4638 ; return stack; pop it into the math stack and exit.
   15D0                    4639 W68_d:
   15D0 5A F5              4640 	.word W23_CFA - .		; <R
   15D2 06 EF              4641 	.word W6_CFA - .		; (BRANCH)
   15D4 0C 00              4642 	.word W68_z - .
                           4643 ; State E: This word didn't match. Advance to the previous word and go
                           4644 ; to state B.
   15D6                    4645 W68_e:
   15D6 54 F5              4646 	.word W23_CFA - .		; <R
   15D8 7D FF              4647 	.word W66_CFA - .		; PREV
   15DA BC F4              4648 	.word W22_CFA - .		; >R
   15DC FC EE              4649 	.word W6_CFA - .		; (BRANCH)
   15DE DE FF              4650 	.word W68_b - .
                           4651 ; *** EXIT ***
   15E0                    4652 W68_z:
   15E0 E8 ED              4653 	.word W3_CFA - .		; (;)
                           4654 
                           4655 
                           4656 ; ----	DIGITMAP -- word # 69
                           4657 
   15E2                    4658 W69_Name:
                           4659 
                           4660 	; stringengize( DIGITMAP )
   15E2 44                 4661 .byte 0x44
   15E3 49                 4662 .byte 0x49
   15E4 47                 4663 .byte 0x47
   15E5 49                 4664 .byte 0x49
   15E6 54                 4665 .byte 0x54
   15E7 4D                 4666 .byte 0x4d
   15E8 41                 4667 .byte 0x41
   15E9 50                 4668 .byte 0x50
                           4669 
   15EA 08 00              4670 	.word ( . - W69_Name ) + 0 
   15EC 3A 00              4671 	.word W69_CFA - W68_CFA
   15EE                    4672 W69_CFA:
   15EE 8E EE              4673 	.word W5_CFA - .		; (VAR)
   15F0                    4674 W69_PFA:
                           4675 ; DIGITMAP
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 86.
Hexidecimal [16-Bits]



                           4676 ; 
                           4677 ; M: ( -> Address of DIGITMAP's definition )
                           4678 ; R: ( -> )
                           4679 ; 
                           4680 ; DIGITMAP is a word containing a bitmap identifying characters as
                           4681 ; being digits; a bit set in DIGITMAP indicates the character will be
                           4682 ; identified as a digit.
                           4683 ; 
                           4684 ; Revisions:
                           4685 ; 07/29/99 RLI - code version
                           4686 ; Character codes 00 through 0f; control characters.
   15F0 00                 4687 	.byte 00
   15F1 00                 4688 	.byte 00
                           4689 ; Character codes 01 through 1f; more control characters.
   15F2 00                 4690 	.byte 00
   15F3 00                 4691 	.byte 00
                           4692 ; Character codes 20 through 2f; punctuation. '.' will be accepted as
                           4693 ; a digit so it may be used as a separator for 32-bit hex numbers to make
                           4694 ; typing them easier.
   15F4 00                 4695 	.byte 00
   15F5 40                 4696 	.byte 64
                           4697 ; Character codes 30 through 3f; decimal digits and more punctuation
   15F6 FF                 4698 	.byte 255
   15F7 03                 4699 	.byte 3
                           4700 ; Character codes 40 through 4f; @ and uppercase letters
   15F8 7E                 4701 	.byte 126
   15F9 00                 4702 	.byte 0
                           4703 ; Character codes 50 through 5f; more uppercase letters
   15FA 00                 4704 	.byte 0
   15FB 00                 4705 	.byte 0
                           4706 ; Character codes 60 through 6f; lower case letters
   15FC 7E                 4707 	.byte 126
   15FD 00                 4708 	.byte 0
                           4709 ; Character codes 70 through 7f; more lower case letters
   15FE 00                 4710 	.byte 0
   15FF 00                 4711 	.byte 0
                           4712 ; --	ISDIGIT - Look to see if a character is a hexadecimal digit
                           4713 ; 
                           4714 ; ( c -> f )
                           4715 ; 
                           4716 ; 'f' is 0 if the character 'c' is not a hex digit. 'f' is non-zero
                           4717 ; if 'c' is a hex digit.
                           4718 ; 
                           4719 ; ISDIGIT works by turning the character into a byte offset into
                           4720 ; DIGITMAP and a bit mask for that byte. 'f' will actually be the
                           4721 ; result of ANDingthe selected by of DIGITMAP with the bitmask
                           4722 ; generated from 'c', so don't count on it being 1 if it's not 0.
                           4723 
                           4724 
                           4725 ; ----	ISDIGIT -- word # 70
                           4726 
   1600                    4727 W70_Name:
                           4728 
                           4729 	; stringengize( ISDIGIT )
   1600 49                 4730 .byte 0x49
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 87.
Hexidecimal [16-Bits]



   1601 53                 4731 .byte 0x53
   1602 44                 4732 .byte 0x44
   1603 49                 4733 .byte 0x49
   1604 47                 4734 .byte 0x47
   1605 49                 4735 .byte 0x49
   1606 54                 4736 .byte 0x54
                           4737 
   1607 07 00              4738 	.word ( . - W70_Name ) + 0 
   1609 1D 00              4739 	.word W70_CFA - W69_CFA
   160B                    4740 W70_CFA:
   160B 47 ED              4741 	.word W2_CFA - .		; (:)
   160D                    4742 W70_PFA:
   160D 54 F3              4743 	.word W17_CFA - .		; DUP
   160F 22 FB              4744 	.word W37_CFA - .		; (LIT)
   1611 03 00              4745 	.word 3
   1613 2F FA              4746 	.word W35_CFA - .		; >>
   1615 9F F3              4747 	.word W20_CFA - .		; SWAP
   1617 1A FB              4748 	.word W37_CFA - .		; (LIT)
   1619 07 00              4749 	.word 7
   161B F5 F7              4750 	.word W31_CFA - .		; AND
   161D 8A FB              4751 	.word W18_CFA - .		; 1
   161F 95 F3              4752 	.word W20_CFA - .		; SWAP
   1621 84 F9              4753 	.word W34_CFA - .		; <<
   1623 91 F3              4754 	.word W20_CFA - .		; SWAP
   1625 C9 FF              4755 	.word W69_CFA - .		; DIGITMAP
   1627 43 F7              4756 	.word W19_CFA - .		; +
   1629 74 F0              4757 	.word W10_CFA - .		; B@
   162B E5 F7              4758 	.word W31_CFA - .		; AND
   162D 9B ED              4759 	.word W3_CFA - .		; (;)
                           4760 ; --	>NYBBLE - Convert a character to a binary hex nybble
                           4761 ; 
                           4762 ; ( c -> n )
                           4763 
                           4764 
                           4765 ; ----	>NYBBLE -- word # 71
                           4766 
   162F                    4767 W71_Name:
                           4768 
                           4769 	; stringengize( >NYBBLE )
   162F 3E                 4770 .byte 0x3e
   1630 4E                 4771 .byte 0x4e
   1631 59                 4772 .byte 0x59
   1632 42                 4773 .byte 0x42
   1633 42                 4774 .byte 0x42
   1634 4C                 4775 .byte 0x4c
   1635 45                 4776 .byte 0x45
                           4777 
   1636 07 00              4778 	.word ( . - W71_Name ) + 0 
   1638 2F 00              4779 	.word W71_CFA - W70_CFA
   163A                    4780 W71_CFA:
   163A 18 ED              4781 	.word W2_CFA - .		; (:)
   163C                    4782 W71_PFA:
                           4783 ; State A: Look to see if we have a decimal digit or an alphabetic
                           4784 ; hext digit. If we have a decimal digit, go to state C.
   163C                    4785 W71_a:
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 88.
Hexidecimal [16-Bits]



   163C 25 F3              4786 	.word W17_CFA - .		; DUP
   163E F3 FA              4787 	.word W37_CFA - .		; (LIT)
   1640 40 00              4788 	.word 64
   1642 CE F7              4789 	.word W31_CFA - .		; AND
   1644 D6 EE              4790 	.word W7_CFA - .		; (0BRANCH)
   1646 0A 00              4791 	.word W71_c - .
                           4792 ; State B: We have an alphabetix hex digit. We'll have to add 9 when
                           4793 ; we're done to get the proper value. Go to state D.
   1648                    4794 W71_b:
   1648 E9 FA              4795 	.word W37_CFA - .		; (LIT)
   164A 09 00              4796 	.word 9
   164C 8C EE              4797 	.word W6_CFA - .		; (BRANCH)
   164E 04 00              4798 	.word W71_d - .
                           4799 ; State C: We have a decimal digit. We'll have to add 0 when we're
                           4800 ; done to get the proper value. Go to state D.
   1650                    4801 W71_c:
   1650 4E FB              4802 	.word W41_CFA - .		; 0
                           4803 ; State D: Extract the low nybble and add the fudge factor. Exit.
   1652                    4804 W71_d:
   1652 62 F3              4805 	.word W20_CFA - .		; SWAP
   1654 DD FA              4806 	.word W37_CFA - .		; (LIT)
   1656 0F 00              4807 	.word 15
   1658 B8 F7              4808 	.word W31_CFA - .		; AND
   165A 10 F7              4809 	.word W19_CFA - .		; +
                           4810 ; *** EXIT ***
   165C                    4811 W71_z:
   165C 6C ED              4812 	.word W3_CFA - .		; (;)
                           4813 ; --	>NYBBLES - Convert a counted string to a binary integer
                           4814 ; 
                           4815 ; ( a c -> n )
                           4816 ; 
                           4817 ; This word assumes every character in the string is either a valid
                           4818 ; digit or '.'; that is, it does not checking on the characters other
                           4819 ; than skipping perios.
                           4820 ; 
                           4821 ; Revisions:
                           4822 ; 
                           4823 ; 06/26/96 RLI - Both state B and E were advancing the pointer into
                           4824 ; 	the digit string.
                           4825 
                           4826 
                           4827 ; ----	>NYBBLES -- word # 72
                           4828 
   165E                    4829 W72_Name:
                           4830 
                           4831 	; stringengize( >NYBBLES )
   165E 3E                 4832 .byte 0x3e
   165F 4E                 4833 .byte 0x4e
   1660 59                 4834 .byte 0x59
   1661 42                 4835 .byte 0x42
   1662 42                 4836 .byte 0x42
   1663 4C                 4837 .byte 0x4c
   1664 45                 4838 .byte 0x45
   1665 53                 4839 .byte 0x53
                           4840 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 89.
Hexidecimal [16-Bits]



   1666 08 00              4841 	.word ( . - W72_Name ) + 0 
   1668 30 00              4842 	.word W72_CFA - W71_CFA
   166A                    4843 W72_CFA:
   166A E8 EC              4844 	.word W2_CFA - .		; (:)
   166C                    4845 W72_PFA:
                           4846 ; State A: Stuff an initial value for n (0) onto th emath stack and
                           4847 ; start the do loop stuff. Go to state B.
   166C                    4848 W72_a:
   166C 32 FB              4849 	.word W41_CFA - .		; 0
   166E 46 F3              4850 	.word W20_CFA - .		; SWAP
   1670 2E FB              4851 	.word W41_CFA - .		; 0
   1672 C1 02              4852 	.word W46_CFA - .		; (DO)
   1674                    4853 W72_0:
                           4854 ; State B: We have to add another digit to the value. Fetch the
                           4855 ; character to be converted and look to see if it's a '.'. If it is,
                           4856 ; go to state D to ignore the character. Otherwise, go to state C.
   1674                    4857 W72_b:
   1674 95 F5              4858 	.word W26_CFA - .		; OVER
   1676 27 F0              4859 	.word W10_CFA - .		; B@
   1678 E9 F2              4860 	.word W17_CFA - .		; DUP
   167A B7 FA              4861 	.word W37_CFA - .		; (LIT)
   167C 2E 00              4862 	.word 46
   167E 01 F6              4863 	.word W29_CFA - .		; -
   1680 9A EE              4864 	.word W7_CFA - .		; (0BRANCH)
   1682 12 00              4865 	.word W72_d - .
                           4866 ; State C: We have a digit to convert. Convert the digit, make space
                           4867 ; for the new nybble (by shifting the old value over a nybble), and
                           4868 ; add the new nybble into the value. Go to state E.
   1684                    4869 W72_c:
   1684 B6 FF              4870 	.word W71_CFA - .		; >NYBBLE
   1686 2E F3              4871 	.word W20_CFA - .		; SWAP
   1688 A9 FA              4872 	.word W37_CFA - .		; (LIT)
   168A 04 00              4873 	.word 4
   168C 19 F9              4874 	.word W34_CFA - .		; <<
   168E DC F6              4875 	.word W19_CFA - .		; +
   1690 48 EE              4876 	.word W6_CFA - .		; (BRANCH)
   1692 04 00              4877 	.word W72_e - .
                           4878 ; State D: We need to ignore this character. Drop it from the stack
                           4879 ; and go to state E.
   1694                    4880 W72_d:
   1694 C0 F3              4881 	.word W21_CFA - .		; DROP
                           4882 ; State E: Bump the address from which we will fetch the next
                           4883 ; character. If we're not done, go to state B. Otherwise, go to
                           4884 ; state F.
   1696                    4885 W72_e:
   1696 1E F3              4886 	.word W20_CFA - .		; SWAP
   1698 0F FB              4887 	.word W18_CFA - .		; 1
   169A D0 F6              4888 	.word W19_CFA - .		; +
   169C 18 F3              4889 	.word W20_CFA - .		; SWAP
   169E BE 00              4890 	.word W47_CFA - .		; (LOOP)
   16A0 D4 FF              4891 	.word W72_0 - .
                           4892 ; State F: We're done. Drop the character address from the stack and
                           4893 ; exit.
   16A2                    4894 W72_f:
   16A2 12 F3              4895 	.word W20_CFA - .		; SWAP
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 90.
Hexidecimal [16-Bits]



   16A4 B0 F3              4896 	.word W21_CFA - .		; DROP
                           4897 ; *** EXIT ***
   16A6                    4898 W72_z:
   16A6 22 ED              4899 	.word W3_CFA - .		; (;)
                           4900 ; --	ISNUMBER - Examine a counted string to see if it's a number
                           4901 ; 
                           4902 ; ( a c -> a c f )
                           4903 ; 
                           4904 ; 'f' is 0 if any character in the string is not a digit. 'f'. is a 1
                           4905 ; if all characters in the string are digits.
                           4906 
                           4907 
                           4908 ; ----	ISNUMBER -- word # 73
                           4909 
   16A8                    4910 W73_Name:
                           4911 
                           4912 	; stringengize( ISNUMBER )
   16A8 49                 4913 .byte 0x49
   16A9 53                 4914 .byte 0x53
   16AA 4E                 4915 .byte 0x4e
   16AB 55                 4916 .byte 0x55
   16AC 4D                 4917 .byte 0x4d
   16AD 42                 4918 .byte 0x42
   16AE 45                 4919 .byte 0x45
   16AF 52                 4920 .byte 0x52
                           4921 
   16B0 08 00              4922 	.word ( . - W73_Name ) + 0 
   16B2 4A 00              4923 	.word W73_CFA - W72_CFA
   16B4                    4924 W73_CFA:
   16B4 9E EC              4925 	.word W2_CFA - .		; (:)
   16B6                    4926 W73_PFA:
                           4927 ; State A: Copy the string particulars and start the do loop. Go to
                           4928 ; state B.
   16B6                    4929 W73_a:
   16B6 53 F5              4930 	.word W26_CFA - .		; OVER
   16B8 51 F5              4931 	.word W26_CFA - .		; OVER
   16BA E4 FA              4932 	.word W41_CFA - .		; 0
   16BC 77 02              4933 	.word W46_CFA - .		; (DO)
   16BE                    4934 W73_0:
                           4935 ; State B: Grap the next character and see if it's a digit. If so,
                           4936 ; go to state C. Otherwise, go to state E.
   16BE                    4937 W73_b:
   16BE A3 F2              4938 	.word W17_CFA - .		; DUP
   16C0 DD EF              4939 	.word W10_CFA - .		; B@
   16C2 49 FF              4940 	.word W70_CFA - .		; ISDIGIT
   16C4 56 EE              4941 	.word W7_CFA - .		; (0BRANCH)
   16C6 12 00              4942 	.word W73_e - .
                           4943 ; State C: We have a digit. Bump the character address. If we're
                           4944 ; done, go to staet D. Otherwise, go back to state B.
   16C8                    4945 W73_c:
   16C8 DF FA              4946 	.word W18_CFA - .		; 1
   16CA A0 F6              4947 	.word W19_CFA - .		; +
   16CC 90 00              4948 	.word W47_CFA - .		; (LOOP)
   16CE F0 FF              4949 	.word W73_0 - .
                           4950 ; State D: All characters in the string are digits. Clean the address
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 91.
Hexidecimal [16-Bits]



                           4951 ; from the stack and stack a 1. Exit.
   16D0                    4952 W73_d:
   16D0 84 F3              4953 	.word W21_CFA - .		; DROP
   16D2 D5 FA              4954 	.word W18_CFA - .		; 1
   16D4 04 EE              4955 	.word W6_CFA - .		; (BRANCH)
   16D6 0E 00              4956 	.word W73_z - .
                           4957 ; State E: At least one character in teh string is not a digit. Clean
                           4958 ; the do loop off the return stack, the address from the math stack,
                           4959 ; and stack a 0. Exit.
   16D8                    4960 W73_e:
   16D8 52 F4              4961 	.word W23_CFA - .		; <R
   16DA 7A F3              4962 	.word W21_CFA - .		; DROP
   16DC 4E F4              4963 	.word W23_CFA - .		; <R
   16DE 76 F3              4964 	.word W21_CFA - .		; DROP
   16E0 74 F3              4965 	.word W21_CFA - .		; DROP
   16E2 BC FA              4966 	.word W41_CFA - .		; 0
                           4967 ; *** EXIT ***
   16E4                    4968 W73_z:
   16E4 E4 EC              4969 	.word W3_CFA - .		; (;)
                           4970 
                           4971 
                           4972 ; ----	PROMPT -- word # 74
                           4973 
   16E6                    4974 W74_Name:
                           4975 
                           4976 	; stringengize( PROMPT )
   16E6 50                 4977 .byte 0x50
   16E7 52                 4978 .byte 0x52
   16E8 4F                 4979 .byte 0x4f
   16E9 4D                 4980 .byte 0x4d
   16EA 50                 4981 .byte 0x50
   16EB 54                 4982 .byte 0x54
                           4983 
   16EC 06 00              4984 	.word ( . - W74_Name ) + 0 
   16EE 3C 00              4985 	.word W74_CFA - W73_CFA
   16F0                    4986 W74_CFA:
   16F0 A1 EE              4987 	.word W8_CFA - .		; ($)
   16F2                    4988 W74_PFA:
                           4989 ;<\r\nOK\r\n>
   16F2 06                 4990 	.byte W74_End - W74_Begin
   16F3                    4991 	W74_Begin:
                           4992 
                           4993 	; stringengize( \r\nOK\r\n )
   16F3 0D                 4994 .byte 0xd
   16F4 0A                 4995 .byte 0xa
   16F5 4F                 4996 .byte 0x4f
   16F6 4B                 4997 .byte 0x4b
   16F7 0D                 4998 .byte 0xd
   16F8 0A                 4999 .byte 0xa
                           5000 
   16F9                    5001 W74_End:
                           5002 ; --	INTERPRET - The "outer text interpreter"
                           5003 ; 
                           5004 ; ( -> [varies] )
                           5005 ; 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 92.
Hexidecimal [16-Bits]



                           5006 ; This is the user interface for the system. It prompts the user and
                           5007 ; accepts a line of input. The line of input is broken up into
                           5008 ; tokens. Each token is looked up in the dictionary; if it is found,
                           5009 ; the word is executed. If the token is not found, an attempt is made
                           5010 ; to convert the word to a number. If that works, the number is left
                           5011 ; on the stack and the whole shebang starts over.
                           5012 ; 
                           5013 ; Revisions:
                           5014 ; 
                           5015 ; 06/26/96 RLI - State E needs to drop the 0 returned by FIND if the
                           5016 ; 	word is not in the dictionary
                           5017 ; 07/23/96 RLI - Assumed string variables such as prompt execute
                           5018 ; 	as ( -> a c )
                           5019 
                           5020 
                           5021 ; ----	INTERPRET -- word # 75
                           5022 
   16F9                    5023 W75_Name:
                           5024 
                           5025 	; stringengize( INTERPRET )
   16F9 49                 5026 .byte 0x49
   16FA 4E                 5027 .byte 0x4e
   16FB 54                 5028 .byte 0x54
   16FC 45                 5029 .byte 0x45
   16FD 52                 5030 .byte 0x52
   16FE 50                 5031 .byte 0x50
   16FF 52                 5032 .byte 0x52
   1700 45                 5033 .byte 0x45
   1701 54                 5034 .byte 0x54
                           5035 
   1702 09 00              5036 	.word ( . - W75_Name ) + 0 
   1704 16 00              5037 	.word W75_CFA - W74_CFA
   1706                    5038 W75_CFA:
   1706 4C EC              5039 	.word W2_CFA - .		; (:)
   1708                    5040 W75_PFA:
                           5041 ; State A: Prompt the user and accept a command line. Go to state B.
   1708                    5042 W75_a:
   1708 E8 FF              5043 	.word W74_CFA - .		; PROMPT
   170A 2D FB              5044 	.word W49_CFA - .		; TYPE
   170C 09 FC              5045 	.word W58_CFA - .		; GETLINE
                           5046 ; State B: Get the next token. If there are no tokens left on the
                           5047 ; line, go to state H. Otherwise, go to state C.
   170E                    5048 W75_b:
   170E 55 FD              5049 	.word W62_CFA - .		; TOKEN
   1710 51 F2              5050 	.word W17_CFA - .		; DUP
   1712 08 EE              5051 	.word W7_CFA - .		; (0BRANCH)
   1714 34 00              5052 	.word W75_h - .
                           5053 ; State C: We have a token. Look it up in the dictionary. If the 
                           5054 ; lookup succeeded, go to state D. Otherwise, go to state E.
   1716                    5055 W75_c:
   1716 9E FE              5056 	.word W68_CFA - .		; FIND
   1718 49 F2              5057 	.word W17_CFA - .		; DUP
   171A 00 EE              5058 	.word W7_CFA - .		; (0BRANCH)
   171C 10 00              5059 	.word W75_e - .
                           5060 ; State D: There is a word by this name in the dictionary. Strip the
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 93.
Hexidecimal [16-Bits]



                           5061 ; token info from  the stack (we don't need it anymore since we've
                           5062 ; just figured out what to do about the token) and execute the word.
                           5063 ; Go back to state B.
   171E                    5064 W75_d:
   171E 96 F2              5065 	.word W20_CFA - .		; SWAP
   1720 34 F3              5066 	.word W21_CFA - .		; DROP
   1722 92 F2              5067 	.word W20_CFA - .		; SWAP
   1724 30 F3              5068 	.word W21_CFA - .		; DROP
   1726 D8 EB              5069 	.word W1_CFA - .		; EXEC
   1728 B0 ED              5070 	.word W6_CFA - .		; (BRANCH)
   172A E4 FF              5071 	.word W75_b - .
                           5072 ; State E: There is no word by this name in the dictionary. Is the
                           5073 ; word a number? If so, go to state F. Otherwise, go to state G.
   172C                    5074 W75_e:
   172C 28 F3              5075 	.word W21_CFA - .		; DROP
   172E 86 FF              5076 	.word W73_CFA - .		; ISNUMBER
   1730 EA ED              5077 	.word W7_CFA - .		; (0BRANCH)
   1732 08 00              5078 	.word W75_g - .
                           5079 ; State F: The word is a number. Convert it to a number and go to 
                           5080 ; state B.
   1734                    5081 W75_f:
   1734 36 FF              5082 	.word W72_CFA - .		; >NYBBLES
   1736 A2 ED              5083 	.word W6_CFA - .		; (BRANCH)
   1738 D6 FF              5084 	.word W75_b - .
                           5085 ; State G: The word is neither in the dictionary nor a number. It must
                           5086 ; be an error. Yell at the user and go back to state A.
   173A                    5087 W75_g:
   173A 5E FB              5088 	.word W55_CFA - .		; NL
   173C FB FA              5089 	.word W49_CFA - .		; TYPE
   173E F3 F9              5090 	.word W37_CFA - .		; (LIT)
   1740 3F 00              5091 	.word 63
   1742 58 08              5092 	.word W44_CFA - .		; EMIT
   1744 94 ED              5093 	.word W6_CFA - .		; (BRANCH)
   1746 C2 FF              5094 	.word W75_a - .
                           5095 ; State H: We've found the end of the line. Drop the null token from
                           5096 ; the stack and go back to state A.
   1748                    5097 W75_h:
   1748 0C F3              5098 	.word W21_CFA - .		; DROP
   174A 0A F3              5099 	.word W21_CFA - .		; DROP
   174C 8C ED              5100 	.word W6_CFA - .		; (BRANCH)
   174E BA FF              5101 	.word W75_a - .
                           5102 ; This routine doesn't exit, but we need a ; to tell QDL to leave
                           5103 ; compile mode.
   1750 78 EC              5104 	.word W3_CFA - .		; (;)
                           5105 ; ----
                           5106 ; 
                           5107 ; DO loop primitives
                           5108 ; 
                           5109 ; These words deal with executing a DO ... LOOP construct. They are
                           5110 ; required by other words in the vocabulary as well.
                           5111 ; 
                           5112 ; ----
                           5113 
                           5114 
                           5115 ; ----	(LOOP) -- word # 47
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 94.
Hexidecimal [16-Bits]



                           5116 
   1752                    5117 W47_Name:
                           5118 
                           5119 	; stringengize( (LOOP) )
   1752 28                 5120 .byte 0x28
   1753 4C                 5121 .byte 0x4c
   1754 4F                 5122 .byte 0x4f
   1755 4F                 5123 .byte 0x4f
   1756 50                 5124 .byte 0x50
   1757 29                 5125 .byte 0x29
                           5126 
   1758 06 00              5127 	.word ( . - W47_Name ) + 0 
   175A 56 00              5128 	.word W47_CFA - W75_CFA
   175C                    5129 W47_CFA:
   175C 00 00              5130 	.word W47_CFA - .		; (LOOP)
   175E                    5131 W47_PFA:
                           5132 ; (LOOP) - Add one to the index of a do loop.
                           5133 ; 
                           5134 ; M: ( -> )
                           5135 ; R: ( limit, index -> limit, index+1 ) if loop loops
                           5136 ;    ( limit, index -> ) if loop exits
                           5137 ; 
                           5138 ; Assumes the return stack contains:
                           5139 ;  (sp) = index
                           5140 ; 4(sp) = limit
                           5141 ; 
                           5142 ; This procedure adds one to the loop index and then decides whether
                           5143 ; the loop should be repeated or aborted. The loop is repeated if
                           5144 ; the incremented index is less than the limit.
                           5145 ; 
                           5146 ; The reference to (LOOP) is followed by a cell containing the relative
                           5147 ; offset to the top of the loop.
                           5148 ; 
                           5149 ; This code references a label in (BRANCH) called pBranch.
                           5150 ; 
                           5151 ; Revisions:
                           5152 ; 07/30/99 RLI - code version
                           5153 ; Update the index.
   175E 2A 43 01           5154 	ld hl,(StupidRP)		; RP@
   1761 22 35 01           5155 	ld (StupidR0),hl
   1764 2A 35 01           5156 	ld hl,(StupidR0)		; @
   1767 7E                 5157 	ld a,(hl)
   1768 5F                 5158 	ld e,a
   1769 23                 5159 	inc hl
   176A 7E                 5160 	ld a,(hl)
   176B 57                 5161 	ld d,a
   176C ED 53 35 01        5162 	ld (StupidR0),de
   1770 21 01 00           5163 	ld hl,#1		; 1
   1773 22 37 01           5164 	ld (StupidR1),hl
   1776 ED 5B 37 01        5165 	ld de,(StupidR1)		; +
   177A 2A 35 01           5166 	ld hl,(StupidR0)
   177D 19                 5167 	add hl,de
   177E 22 35 01           5168 	ld (StupidR0),hl
   1781 2A 43 01           5169 	ld hl,(StupidRP)		; RP@
   1784 22 37 01           5170 	ld (StupidR1),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 95.
Hexidecimal [16-Bits]



   1787 2A 37 01           5171 	ld hl,(StupidR1)		; !
   178A ED 5B 35 01        5172 	ld de,(StupidR0)
   178E 73                 5173 	ld (hl),e
   178F 23                 5174 	inc hl
   1790 72                 5175 	ld (hl),d
                           5176 ; Fetch the limit and index
   1791 2A 43 01           5177 	ld hl,(StupidRP)		; RP@
   1794 22 35 01           5178 	ld (StupidR0),hl
   1797 2A 35 01           5179 	ld hl,(StupidR0)		; @
   179A 7E                 5180 	ld a,(hl)
   179B 5F                 5181 	ld e,a
   179C 23                 5182 	inc hl
   179D 7E                 5183 	ld a,(hl)
   179E 57                 5184 	ld d,a
   179F ED 53 35 01        5185 	ld (StupidR0),de
   17A3 21 02 00           5186 	ld hl,#2		; 2
   17A6 22 37 01           5187 	ld (StupidR1),hl
   17A9 2A 43 01           5188 	ld hl,(StupidRP)		; RP@
   17AC 22 39 01           5189 	ld (StupidR2),hl
   17AF ED 5B 39 01        5190 	ld de,(StupidR2)		; +
   17B3 2A 37 01           5191 	ld hl,(StupidR1)
   17B6 19                 5192 	add hl,de
   17B7 22 37 01           5193 	ld (StupidR1),hl
   17BA 2A 37 01           5194 	ld hl,(StupidR1)		; @
   17BD 7E                 5195 	ld a,(hl)
   17BE 5F                 5196 	ld e,a
   17BF 23                 5197 	inc hl
   17C0 7E                 5198 	ld a,(hl)
   17C1 57                 5199 	ld d,a
   17C2 ED 53 37 01        5200 	ld (StupidR1),de
                           5201 ; If the index is less than the limit, go to pBranch.
   17C6 CD E4 01           5202 	call StupidLessGo1		; <GO pBranch
   17C9 DA 04              5203 	.word pBranch
                           5204 ; The loop is exiting. We need to pop two cells (the limit and index)
                           5205 ; from the return stack.
   17CB 21 02 00           5206 	ld hl,#2		; 2
   17CE 22 35 01           5207 	ld (StupidR0),hl
   17D1 2A 35 01           5208 	ld hl,(StupidR0)		; DUP
   17D4 22 37 01           5209 	ld (StupidR1),hl
   17D7 ED 5B 37 01        5210 	ld de,(StupidR1)		; +
   17DB 2A 35 01           5211 	ld hl,(StupidR0)
   17DE 19                 5212 	add hl,de
   17DF 22 35 01           5213 	ld (StupidR0),hl
   17E2 2A 43 01           5214 	ld hl,(StupidRP)		; RP@
   17E5 22 37 01           5215 	ld (StupidR1),hl
   17E8 ED 5B 37 01        5216 	ld de,(StupidR1)		; +
   17EC 2A 35 01           5217 	ld hl,(StupidR0)
   17EF 19                 5218 	add hl,de
   17F0 22 35 01           5219 	ld (StupidR0),hl
   17F3 2A 35 01           5220 	ld hl,(StupidR0)		; RP!
   17F6 22 43 01           5221 	ld (StupidRP),hl
                           5222 ; We also have to skip the offset to the top of the loop, which 
                           5223 ; immediately follows the reference to (LOOP) in the FORTH code.
                           5224 ; To do this, we bump IP by a cell.
   17F9 2A 3F 01           5225 	ld hl,(StupidIP)		; IP@
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 96.
Hexidecimal [16-Bits]



   17FC 22 35 01           5226 	ld (StupidR0),hl
   17FF 21 02 00           5227 	ld hl,#2		; 2
   1802 22 37 01           5228 	ld (StupidR1),hl
   1805 ED 5B 37 01        5229 	ld de,(StupidR1)		; +
   1809 2A 35 01           5230 	ld hl,(StupidR0)
   180C 19                 5231 	add hl,de
   180D 22 35 01           5232 	ld (StupidR0),hl
   1810 2A 35 01           5233 	ld hl,(StupidR0)		; IP!
   1813 22 3F 01           5234 	ld (StupidIP),hl
   1816 2A CB 01           5235 	ld hl,(StupidNEXT)		; NEXT@
   1819 22 35 01           5236 	ld (StupidR0),hl
   181C 2A 35 01           5237 	ld hl,(StupidR0)		; PC!
   181F E9                 5238 	jp (hl)
                           5239 
                           5240 
                           5241 ; ----	(+LOOP) -- word # 76
                           5242 
   1820                    5243 W76_Name:
                           5244 
                           5245 	; stringengize( (+LOOP) )
   1820 28                 5246 .byte 0x28
   1821 2B                 5247 .byte 0x2b
   1822 4C                 5248 .byte 0x4c
   1823 4F                 5249 .byte 0x4f
   1824 4F                 5250 .byte 0x4f
   1825 50                 5251 .byte 0x50
   1826 29                 5252 .byte 0x29
                           5253 
   1827 07 00              5254 	.word ( . - W76_Name ) + 0 
   1829 CF 00              5255 	.word W76_CFA - W47_CFA
   182B                    5256 W76_CFA:
   182B 00 00              5257 	.word W76_CFA - .		; (+LOOP)
   182D                    5258 W76_PFA:
                           5259 ; (+LOOP) - Add a specified amount to the index of a do loop.
                           5260 ; 
                           5261 ; M: ( update -> )
                           5262 ; R: ( limit, index -> limit, index + update ) if the loop loops
                           5263 ; R: ( limit, index -> ) if the loop exits
                           5264 ; 
                           5265 ; Assumes the return stack contains:
                           5266 ;  (sp) = index
                           5267 ; 4(sp) = limit
                           5268 ; 
                           5269 ; This procedure adds the value on top of the math stack to the loop
                           5270 ; index and then does the rest of (LOOP); it's like (LOOP) except you
                           5271 ; can specify an increment other than one.
                           5272 ; 
                           5273 ; The increment is discarded from the math stack.
                           5274 ; 
                           5275 ; Like (LOOP), (+LOOP) is followed by a cell  containing the relative
                           5276 ; offset to the top of the loop. Also like (LOOP), the branch is
                           5277 ; performed by entering (BRANCH) at pBranch.
                           5278 ; 
                           5279 ; Revisions:
                           5280 ; 07/30/99 RLI - code version.
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 97.
Hexidecimal [16-Bits]



                           5281 ; Update the index, which is on the top of the return stack.
   182D 2A 43 01           5282 	ld hl,(StupidRP)		; RP@
   1830 22 35 01           5283 	ld (StupidR0),hl
   1833 2A 35 01           5284 	ld hl,(StupidR0)		; @
   1836 7E                 5285 	ld a,(hl)
   1837 5F                 5286 	ld e,a
   1838 23                 5287 	inc hl
   1839 7E                 5288 	ld a,(hl)
   183A 57                 5289 	ld d,a
   183B ED 53 35 01        5290 	ld (StupidR0),de
   183F 2A 41 01           5291 	ld hl,(StupidMP)		; MP@
   1842 22 37 01           5292 	ld (StupidR1),hl
   1845 2A 37 01           5293 	ld hl,(StupidR1)		; @
   1848 7E                 5294 	ld a,(hl)
   1849 5F                 5295 	ld e,a
   184A 23                 5296 	inc hl
   184B 7E                 5297 	ld a,(hl)
   184C 57                 5298 	ld d,a
   184D ED 53 37 01        5299 	ld (StupidR1),de
   1851 ED 5B 37 01        5300 	ld de,(StupidR1)		; +
   1855 2A 35 01           5301 	ld hl,(StupidR0)
   1858 19                 5302 	add hl,de
   1859 22 35 01           5303 	ld (StupidR0),hl
   185C 2A 43 01           5304 	ld hl,(StupidRP)		; RP@
   185F 22 37 01           5305 	ld (StupidR1),hl
   1862 2A 37 01           5306 	ld hl,(StupidR1)		; !
   1865 ED 5B 35 01        5307 	ld de,(StupidR0)
   1869 73                 5308 	ld (hl),e
   186A 23                 5309 	inc hl
   186B 72                 5310 	ld (hl),d
                           5311 ; Drop the update value from the math stack.
   186C 21 02 00           5312 	ld hl,#2		; 2
   186F 22 35 01           5313 	ld (StupidR0),hl
   1872 2A 41 01           5314 	ld hl,(StupidMP)		; MP@
   1875 22 37 01           5315 	ld (StupidR1),hl
   1878 2A 37 01           5316 	ld hl,(StupidR1)		; SWAP
   187B ED 5B 35 01        5317 	ld de,(StupidR0)
   187F 22 35 01           5318 	ld (StupidR0),hl
   1882 ED 53 37 01        5319 	ld (StupidR1),de
   1886 ED 5B 37 01        5320 	ld de,(StupidR1)		; -
   188A 2A 35 01           5321 	ld hl,(StupidR0)
   188D 7D                 5322 	ld a,l
   188E 93                 5323 	sub a,e
   188F 6F                 5324 	ld l,a
   1890 7C                 5325 	ld a,h
   1891 9A                 5326 	sbc a,d
   1892 67                 5327 	ld h,a
   1893 22 35 01           5328 	ld (StupidR0),hl
   1896 2A 35 01           5329 	ld hl,(StupidR0)		; MP!
   1899 22 41 01           5330 	ld (StupidMP),hl
                           5331 ; If the index is still less than the limit, branch to the top of
                           5332 ; the loop.
   189C 2A 43 01           5333 	ld hl,(StupidRP)		; RP@
   189F 22 35 01           5334 	ld (StupidR0),hl
   18A2 2A 35 01           5335 	ld hl,(StupidR0)		; @
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 98.
Hexidecimal [16-Bits]



   18A5 7E                 5336 	ld a,(hl)
   18A6 5F                 5337 	ld e,a
   18A7 23                 5338 	inc hl
   18A8 7E                 5339 	ld a,(hl)
   18A9 57                 5340 	ld d,a
   18AA ED 53 35 01        5341 	ld (StupidR0),de
   18AE 21 02 00           5342 	ld hl,#2		; 2
   18B1 22 37 01           5343 	ld (StupidR1),hl
   18B4 2A 43 01           5344 	ld hl,(StupidRP)		; RP@
   18B7 22 39 01           5345 	ld (StupidR2),hl
   18BA ED 5B 39 01        5346 	ld de,(StupidR2)		; +
   18BE 2A 37 01           5347 	ld hl,(StupidR1)
   18C1 19                 5348 	add hl,de
   18C2 22 37 01           5349 	ld (StupidR1),hl
   18C5 2A 37 01           5350 	ld hl,(StupidR1)		; @
   18C8 7E                 5351 	ld a,(hl)
   18C9 5F                 5352 	ld e,a
   18CA 23                 5353 	inc hl
   18CB 7E                 5354 	ld a,(hl)
   18CC 57                 5355 	ld d,a
   18CD ED 53 37 01        5356 	ld (StupidR1),de
   18D1 CD E4 01           5357 	call StupidLessGo1		; <GO pBranch
   18D4 DA 04              5358 	.word pBranch
                           5359 ; Otherwise, we need to exit the loop. Pop the limit and the index
                           5360 ; from the return stack.
   18D6 21 02 00           5361 	ld hl,#2		; 2
   18D9 22 35 01           5362 	ld (StupidR0),hl
   18DC 2A 35 01           5363 	ld hl,(StupidR0)		; DUP
   18DF 22 37 01           5364 	ld (StupidR1),hl
   18E2 ED 5B 37 01        5365 	ld de,(StupidR1)		; +
   18E6 2A 35 01           5366 	ld hl,(StupidR0)
   18E9 19                 5367 	add hl,de
   18EA 22 35 01           5368 	ld (StupidR0),hl
   18ED 2A 43 01           5369 	ld hl,(StupidRP)		; RP@
   18F0 22 37 01           5370 	ld (StupidR1),hl
   18F3 ED 5B 37 01        5371 	ld de,(StupidR1)		; +
   18F7 2A 35 01           5372 	ld hl,(StupidR0)
   18FA 19                 5373 	add hl,de
   18FB 22 35 01           5374 	ld (StupidR0),hl
   18FE 2A 35 01           5375 	ld hl,(StupidR0)		; RP!
   1901 22 43 01           5376 	ld (StupidRP),hl
                           5377 ; We also need to skip the branch offset, which we are not using this
                           5378 ; time.
   1904 2A 3F 01           5379 	ld hl,(StupidIP)		; IP@
   1907 22 35 01           5380 	ld (StupidR0),hl
   190A 21 02 00           5381 	ld hl,#2		; 2
   190D 22 37 01           5382 	ld (StupidR1),hl
   1910 ED 5B 37 01        5383 	ld de,(StupidR1)		; +
   1914 2A 35 01           5384 	ld hl,(StupidR0)
   1917 19                 5385 	add hl,de
   1918 22 35 01           5386 	ld (StupidR0),hl
   191B 2A 35 01           5387 	ld hl,(StupidR0)		; IP!
   191E 22 3F 01           5388 	ld (StupidIP),hl
   1921 2A CB 01           5389 	ld hl,(StupidNEXT)		; NEXT@
   1924 22 35 01           5390 	ld (StupidR0),hl
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 99.
Hexidecimal [16-Bits]



   1927 2A 35 01           5391 	ld hl,(StupidR0)		; PC!
   192A E9                 5392 	jp (hl)
                           5393 ; --	(DO) - Initialize a do loop
                           5394 ; 
                           5395 ; ( limit initial -- [pushed to return stack )
                           5396 ; 
                           5397 ; This procedure is the run-time initialization of a do loop; it takes
                           5398 ; the limit and initial value from the math stack and pushes them on
                           5399 ; the return stack in the order required by (LOOP) and (+LOOP).
                           5400 ; 
                           5401 ; Revisions:
                           5402 ; 
                           5403 ; 06/24/96 RLI - Oops! Before I can push things on the return stack,
                           5404 ; 	I need to make certain I understand what I'm doing with
                           5405 ; 	the return address! Sigh.
                           5406 
                           5407 
                           5408 ; ----	(DO) -- word # 46
                           5409 
   192B                    5410 W46_Name:
                           5411 
                           5412 	; stringengize( (DO) )
   192B 28                 5413 .byte 0x28
   192C 44                 5414 .byte 0x44
   192D 4F                 5415 .byte 0x4f
   192E 29                 5416 .byte 0x29
                           5417 
   192F 04 00              5418 	.word ( . - W46_Name ) + 0 
   1931 08 01              5419 	.word W46_CFA - W76_CFA
   1933                    5420 W46_CFA:
   1933 1F EA              5421 	.word W2_CFA - .		; (:)
   1935                    5422 W46_PFA:
   1935 7F F0              5423 	.word W20_CFA - .		; SWAP
   1937 F3 F1              5424 	.word W23_CFA - .		; <R
   1939 7B F0              5425 	.word W20_CFA - .		; SWAP
   193B 5B F1              5426 	.word W22_CFA - .		; >R
   193D 77 F0              5427 	.word W20_CFA - .		; SWAP
   193F 57 F1              5428 	.word W22_CFA - .		; >R
   1941 55 F1              5429 	.word W22_CFA - .		; >R
   1943 85 EA              5430 	.word W3_CFA - .		; (;)
                           5431 ; --	(DP@) - Fetch the initial value for the dictionary pointer
                           5432 ; 
                           5433 ; M: ( -> InitialDP )
                           5434 ; R: ( -> )
                           5435 ; 
                           5436 ; Revisions:
                           5437 
                           5438 
                           5439 ; ----	(DP@) -- word # 77
                           5440 
   1945                    5441 W77_Name:
                           5442 
                           5443 	; stringengize( (DP@) )
   1945 28                 5444 .byte 0x28
   1946 44                 5445 .byte 0x44
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 100.
Hexidecimal [16-Bits]



   1947 50                 5446 .byte 0x50
   1948 40                 5447 .byte 0x40
   1949 29                 5448 .byte 0x29
                           5449 
   194A 05 00              5450 	.word ( . - W77_Name ) + 0 
   194C 1B 00              5451 	.word W77_CFA - W46_CFA
   194E                    5452 W77_CFA:
   194E 00 00              5453 	.word W77_CFA - .		; (DP@)
   1950                    5454 W77_PFA:
                           5455 ; Make space on the math stack for InitialDP
   1950 21 02 00           5456 	ld hl,#2		; 2
   1953 22 35 01           5457 	ld (StupidR0),hl
   1956 2A 41 01           5458 	ld hl,(StupidMP)		; MP@
   1959 22 37 01           5459 	ld (StupidR1),hl
   195C ED 5B 37 01        5460 	ld de,(StupidR1)		; +
   1960 2A 35 01           5461 	ld hl,(StupidR0)
   1963 19                 5462 	add hl,de
   1964 22 35 01           5463 	ld (StupidR0),hl
   1967 2A 35 01           5464 	ld hl,(StupidR0)		; MP!
   196A 22 41 01           5465 	ld (StupidMP),hl
                           5466 ; Copy InitialDP into the space on the math stack
   196D 2A C7 01           5467 	ld hl,(StupidInitialDP)		; InitialDP@
   1970 22 35 01           5468 	ld (StupidR0),hl
   1973 2A 41 01           5469 	ld hl,(StupidMP)		; MP@
   1976 22 37 01           5470 	ld (StupidR1),hl
   1979 2A 37 01           5471 	ld hl,(StupidR1)		; !
   197C ED 5B 35 01        5472 	ld de,(StupidR0)
   1980 73                 5473 	ld (hl),e
   1981 23                 5474 	inc hl
   1982 72                 5475 	ld (hl),d
   1983 2A CB 01           5476 	ld hl,(StupidNEXT)		; NEXT@
   1986 22 35 01           5477 	ld (StupidR0),hl
   1989 2A 35 01           5478 	ld hl,(StupidR0)		; PC!
   198C E9                 5479 	jp (hl)
                           5480 ; --	(LAST@) - Fetch the initial value for LAST
                           5481 ; 
                           5482 ; M: ( -> InitialLAST )
                           5483 ; R: ( -> )
                           5484 ; 
                           5485 ; Revisions:
                           5486 
                           5487 
                           5488 ; ----	(LAST@) -- word # 78
                           5489 
   198D                    5490 W78_Name:
                           5491 
                           5492 	; stringengize( (LAST@) )
   198D 28                 5493 .byte 0x28
   198E 4C                 5494 .byte 0x4c
   198F 41                 5495 .byte 0x41
   1990 53                 5496 .byte 0x53
   1991 54                 5497 .byte 0x54
   1992 40                 5498 .byte 0x40
   1993 29                 5499 .byte 0x29
                           5500 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 101.
Hexidecimal [16-Bits]



   1994 07 00              5501 	.word ( . - W78_Name ) + 0 
   1996 4A 00              5502 	.word W78_CFA - W77_CFA
   1998                    5503 W78_CFA:
   1998 00 00              5504 	.word W78_CFA - .		; (LAST@)
   199A                    5505 W78_PFA:
                           5506 ; Make space on the math stack for InitialLAST
   199A 21 02 00           5507 	ld hl,#2		; 2
   199D 22 35 01           5508 	ld (StupidR0),hl
   19A0 2A 41 01           5509 	ld hl,(StupidMP)		; MP@
   19A3 22 37 01           5510 	ld (StupidR1),hl
   19A6 ED 5B 37 01        5511 	ld de,(StupidR1)		; +
   19AA 2A 35 01           5512 	ld hl,(StupidR0)
   19AD 19                 5513 	add hl,de
   19AE 22 35 01           5514 	ld (StupidR0),hl
   19B1 2A 35 01           5515 	ld hl,(StupidR0)		; MP!
   19B4 22 41 01           5516 	ld (StupidMP),hl
                           5517 ; Copy InitialLAST into the space on the math stack
   19B7 2A C9 01           5518 	ld hl,(StupidInitialLAST)		; InitialLAST@
   19BA 22 35 01           5519 	ld (StupidR0),hl
   19BD 2A 41 01           5520 	ld hl,(StupidMP)		; MP@
   19C0 22 37 01           5521 	ld (StupidR1),hl
   19C3 2A 37 01           5522 	ld hl,(StupidR1)		; !
   19C6 ED 5B 35 01        5523 	ld de,(StupidR0)
   19CA 73                 5524 	ld (hl),e
   19CB 23                 5525 	inc hl
   19CC 72                 5526 	ld (hl),d
   19CD 2A CB 01           5527 	ld hl,(StupidNEXT)		; NEXT@
   19D0 22 35 01           5528 	ld (StupidR0),hl
   19D3 2A 35 01           5529 	ld hl,(StupidR0)		; PC!
   19D6 E9                 5530 	jp (hl)
                           5531 ; --	Messages to be displayed by IDENTIFY
                           5532 
                           5533 
                           5534 ; ----	IDMSG1 -- word # 79
                           5535 
   19D7                    5536 W79_Name:
                           5537 
                           5538 	; stringengize( IDMSG1 )
   19D7 49                 5539 .byte 0x49
   19D8 44                 5540 .byte 0x44
   19D9 4D                 5541 .byte 0x4d
   19DA 53                 5542 .byte 0x53
   19DB 47                 5543 .byte 0x47
   19DC 31                 5544 .byte 0x31
                           5545 
   19DD 06 00              5546 	.word ( . - W79_Name ) + 0 
   19DF 49 00              5547 	.word W79_CFA - W78_CFA
   19E1                    5548 W79_CFA:
   19E1 B0 EB              5549 	.word W8_CFA - .		; ($)
   19E3                    5550 W79_PFA:
                           5551 ;<THIRD V0.0 CellSize >
   19E3 14                 5552 	.byte W79_End - W79_Begin
   19E4                    5553 	W79_Begin:
                           5554 
                           5555 	; stringengize( THIRD V0.0 CellSize  )
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 102.
Hexidecimal [16-Bits]



   19E4 54                 5556 .byte 0x54
   19E5 48                 5557 .byte 0x48
   19E6 49                 5558 .byte 0x49
   19E7 52                 5559 .byte 0x52
   19E8 44                 5560 .byte 0x44
   19E9 20                 5561 .byte 0x20
   19EA 56                 5562 .byte 0x56
   19EB 30                 5563 .byte 0x30
   19EC 2E                 5564 .byte 0x2e
   19ED 30                 5565 .byte 0x30
   19EE 20                 5566 .byte 0x20
   19EF 43                 5567 .byte 0x43
   19F0 65                 5568 .byte 0x65
   19F1 6C                 5569 .byte 0x6c
   19F2 6C                 5570 .byte 0x6c
   19F3 53                 5571 .byte 0x53
   19F4 69                 5572 .byte 0x69
   19F5 7A                 5573 .byte 0x7a
   19F6 65                 5574 .byte 0x65
   19F7 20                 5575 .byte 0x20
                           5576 
   19F8                    5577 W79_End:
                           5578 
                           5579 
                           5580 ; ----	IDMSG2 -- word # 80
                           5581 
   19F8                    5582 W80_Name:
                           5583 
                           5584 	; stringengize( IDMSG2 )
   19F8 49                 5585 .byte 0x49
   19F9 44                 5586 .byte 0x44
   19FA 4D                 5587 .byte 0x4d
   19FB 53                 5588 .byte 0x53
   19FC 47                 5589 .byte 0x47
   19FD 32                 5590 .byte 0x32
                           5591 
   19FE 06 00              5592 	.word ( . - W80_Name ) + 0 
   1A00 21 00              5593 	.word W80_CFA - W79_CFA
   1A02                    5594 W80_CFA:
   1A02 8F EB              5595 	.word W8_CFA - .		; ($)
   1A04                    5596 W80_PFA:
                           5597 ;<WordSize >
   1A04 09                 5598 	.byte W80_End - W80_Begin
   1A05                    5599 	W80_Begin:
                           5600 
                           5601 	; stringengize( WordSize  )
   1A05 57                 5602 .byte 0x57
   1A06 6F                 5603 .byte 0x6f
   1A07 72                 5604 .byte 0x72
   1A08 64                 5605 .byte 0x64
   1A09 53                 5606 .byte 0x53
   1A0A 69                 5607 .byte 0x69
   1A0B 7A                 5608 .byte 0x7a
   1A0C 65                 5609 .byte 0x65
   1A0D 20                 5610 .byte 0x20
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 103.
Hexidecimal [16-Bits]



                           5611 
   1A0E                    5612 W80_End:
                           5613 
                           5614 
                           5615 ; ----	IDMSG3 -- word # 81
                           5616 
   1A0E                    5617 W81_Name:
                           5618 
                           5619 	; stringengize( IDMSG3 )
   1A0E 49                 5620 .byte 0x49
   1A0F 44                 5621 .byte 0x44
   1A10 4D                 5622 .byte 0x4d
   1A11 53                 5623 .byte 0x53
   1A12 47                 5624 .byte 0x47
   1A13 33                 5625 .byte 0x33
                           5626 
   1A14 06 00              5627 	.word ( . - W81_Name ) + 0 
   1A16 16 00              5628 	.word W81_CFA - W80_CFA
   1A18                    5629 W81_CFA:
   1A18 79 EB              5630 	.word W8_CFA - .		; ($)
   1A1A                    5631 W81_PFA:
                           5632 ;<Bits >
   1A1A 05                 5633 	.byte W81_End - W81_Begin
   1A1B                    5634 	W81_Begin:
                           5635 
                           5636 	; stringengize( Bits  )
   1A1B 42                 5637 .byte 0x42
   1A1C 69                 5638 .byte 0x69
   1A1D 74                 5639 .byte 0x74
   1A1E 73                 5640 .byte 0x73
   1A1F 20                 5641 .byte 0x20
                           5642 
   1A20                    5643 W81_End:
                           5644 ; --	IDENTIFY - Display info about this system
                           5645 ; 
                           5646 ; 	( -- )
                           5647 ; 
                           5648 ; Revisions:
                           5649 
                           5650 
                           5651 ; ----	IDENTIFY -- word # 82
                           5652 
   1A20                    5653 W82_Name:
                           5654 
                           5655 	; stringengize( IDENTIFY )
   1A20 49                 5656 .byte 0x49
   1A21 44                 5657 .byte 0x44
   1A22 45                 5658 .byte 0x45
   1A23 4E                 5659 .byte 0x4e
   1A24 54                 5660 .byte 0x54
   1A25 49                 5661 .byte 0x49
   1A26 46                 5662 .byte 0x46
   1A27 59                 5663 .byte 0x59
                           5664 
   1A28 08 00              5665 	.word ( . - W82_Name ) + 0 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 104.
Hexidecimal [16-Bits]



   1A2A 14 00              5666 	.word W82_CFA - W81_CFA
   1A2C                    5667 W82_CFA:
   1A2C 26 E9              5668 	.word W2_CFA - .		; (:)
   1A2E                    5669 W82_PFA:
   1A2E B3 FF              5670 	.word W79_CFA - .		; IDMSG1
   1A30 07 F8              5671 	.word W49_CFA - .		; TYPE
   1A32 FF F6              5672 	.word W37_CFA - .		; (LIT)
   1A34 02 00              5673 	.word 2
   1A36 E9 F7              5674 	.word W48_CFA - .		; .
   1A38 CA FF              5675 	.word W80_CFA - .		; IDMSG2
   1A3A FD F7              5676 	.word W49_CFA - .		; TYPE
   1A3C F5 F6              5677 	.word W37_CFA - .		; (LIT)
   1A3E 02 00              5678 	.word 2
   1A40 DF F7              5679 	.word W48_CFA - .		; .
   1A42 D6 FF              5680 	.word W81_CFA - .		; IDMSG3
   1A44 F3 F7              5681 	.word W49_CFA - .		; TYPE
   1A46 EB F6              5682 	.word W37_CFA - .		; (LIT)
   1A48 10 00              5683 	.word 16
   1A4A D5 F7              5684 	.word W48_CFA - .		; .
   1A4C 4C F8              5685 	.word W55_CFA - .		; NL
   1A4E 7A E9              5686 	.word W3_CFA - .		; (;)
                           5687 ; --	(COLD) - Perform final power-on initialization
                           5688 ; 
                           5689 ; 	This word performs initialization that should be done once at
                           5690 ; power-on. It is assumed that the low-level initialization code
                           5691 ; has initialized the UART and the various low-level registers
                           5692 ; (NEXT, InitialRP, InitialMP, etc.) needed by the system. This
                           5693 ; word initializes the math and return stacks, identifies the
                           5694 ; system, and then does an ABORT.
                           5695 ; 
                           5696 ; Revisions:
                           5697 
                           5698 
                           5699 ; ----	(COLD) -- word # 1000
                           5700 
   1A50                    5701 W1000_Name:
                           5702 
                           5703 	; stringengize( (COLD) )
   1A50 28                 5704 .byte 0x28
   1A51 43                 5705 .byte 0x43
   1A52 4F                 5706 .byte 0x4f
   1A53 4C                 5707 .byte 0x4c
   1A54 44                 5708 .byte 0x44
   1A55 29                 5709 .byte 0x29
                           5710 
   1A56 06 00              5711 	.word ( . - W1000_Name ) + 0 
   1A58 2E 00              5712 	.word W1000_CFA - W82_CFA
   1A5A                    5713 W1000_CFA:
   1A5A F8 E8              5714 	.word W2_CFA - .		; (:)
   1A5C                    5715 W1000_PFA:
   1A5C C0 F1              5716 	.word W27_CFA - .		; MP!
   1A5E 8B F1              5717 	.word W25_CFA - .		; RP!
   1A60 EE FE              5718 	.word W77_CFA - .		; (DP@)
   1A62 29 00              5719 	.word W83_CFA - .		; DP
   1A64 F9 EC              5720 	.word W13_CFA - .		; !
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 105.
Hexidecimal [16-Bits]



   1A66 32 FF              5721 	.word W78_CFA - .		; (LAST@)
   1A68 AB FA              5722 	.word W64_CFA - .		; LAST
   1A6A F3 EC              5723 	.word W13_CFA - .		; !
   1A6C C0 FF              5724 	.word W82_CFA - .		; IDENTIFY
   1A6E 0D 00              5725 	.word W53_CFA - .		; ABORT
   1A70 58 E9              5726 	.word W3_CFA - .		; (;)
                           5727 ; -----
                           5728 ; 
                           5729 ; ABORT
                           5730 ; 
                           5731 ; -----
                           5732 
                           5733 
                           5734 ; ----	ABORT -- word # 53
                           5735 
   1A72                    5736 W53_Name:
                           5737 
                           5738 	; stringengize( ABORT )
   1A72 41                 5739 .byte 0x41
   1A73 42                 5740 .byte 0x42
   1A74 4F                 5741 .byte 0x4f
   1A75 52                 5742 .byte 0x52
   1A76 54                 5743 .byte 0x54
                           5744 
   1A77 05 00              5745 	.word ( . - W53_Name ) + 0 
   1A79 21 00              5746 	.word W53_CFA - W1000_CFA
   1A7B                    5747 W53_CFA:
   1A7B D7 E8              5748 	.word W2_CFA - .		; (:)
   1A7D                    5749 W53_PFA:
   1A7D 9F F1              5750 	.word W27_CFA - .		; MP!
   1A7F 6A F1              5751 	.word W25_CFA - .		; RP!
   1A81 85 FC              5752 	.word W75_CFA - .		; INTERPRET
   1A83 45 E9              5753 	.word W3_CFA - .		; (;)
                           5754 ; ----
                           5755 ; 
                           5756 ; Dictionary manipulation primitives
                           5757 ; 
                           5758 ; These words do the very basic work of adding things to the
                           5759 ; dictionary.
                           5760 ; 
                           5761 ; Revisions:	04/21/97 RLI - Changed flag byte to be a flag longword.
                           5762 ; 
                           5763 ; 		05/11/01 RLI - Fixed bogus blank line comments.
                           5764 ; 
                           5765 ; ----
                           5766 
                           5767 
                           5768 ; ----	DP -- word # 83
                           5769 
   1A85                    5770 W83_Name:
                           5771 
                           5772 	; stringengize( DP )
   1A85 44                 5773 .byte 0x44
   1A86 50                 5774 .byte 0x50
                           5775 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 106.
Hexidecimal [16-Bits]



   1A87 02 00              5776 	.word ( . - W83_Name ) + 0 
   1A89 10 00              5777 	.word W83_CFA - W53_CFA
   1A8B                    5778 W83_CFA:
   1A8B F1 E9              5779 	.word W5_CFA - .		; (VAR)
   1A8D                    5780 W83_PFA:
   1A8D                    5781 	.blkb 2
                           5782 
                           5783 
                           5784 ; ----	(OLIT) -- word # 84
                           5785 
   1A8F                    5786 W84_Name:
                           5787 
                           5788 	; stringengize( (OLIT) )
   1A8F 28                 5789 .byte 0x28
   1A90 4F                 5790 .byte 0x4f
   1A91 4C                 5791 .byte 0x4c
   1A92 49                 5792 .byte 0x49
   1A93 54                 5793 .byte 0x54
   1A94 29                 5794 .byte 0x29
                           5795 
   1A95 06 00              5796 	.word ( . - W84_Name ) + 0 
   1A97 0E 00              5797 	.word W84_CFA - W83_CFA
   1A99                    5798 W84_CFA:
   1A99 00 00              5799 	.word W84_CFA - .		; (OLIT)
   1A9B                    5800 W84_PFA:
                           5801 ; (OLIT) - Extend and relocate a relative literal
                           5802 ; 
                           5803 ; M: ( -> literal )
                           5804 ; R: ( -> )
                           5805 ; 
                           5806 ; This word is used to create references to words in the code which, at
                           5807 ; execution, will result in the address of the word being pushed on the
                           5808 ; stack.
                           5809 ; 
                           5810 ; The reference to (OLIT) is followed by a relative offset that is
                           5811 ; relocated into the target address referenced by the offset and
                           5812 ; pushed on the stack.
                           5813 ; 
                           5814 ; Revisions:
                           5815 ; 07/29/99 RLI - code version
                           5816 ; Make space on the math stack for the literal
   1A9B 21 02 00           5817 	ld hl,#2		; 2
   1A9E 22 35 01           5818 	ld (StupidR0),hl
   1AA1 2A 41 01           5819 	ld hl,(StupidMP)		; MP@
   1AA4 22 37 01           5820 	ld (StupidR1),hl
   1AA7 ED 5B 37 01        5821 	ld de,(StupidR1)		; +
   1AAB 2A 35 01           5822 	ld hl,(StupidR0)
   1AAE 19                 5823 	add hl,de
   1AAF 22 35 01           5824 	ld (StupidR0),hl
   1AB2 2A 35 01           5825 	ld hl,(StupidR0)		; MP!
   1AB5 22 41 01           5826 	ld (StupidMP),hl
                           5827 ; Fetch the offset and relocate it.
   1AB8 2A 3F 01           5828 	ld hl,(StupidIP)		; IP@
   1ABB 22 35 01           5829 	ld (StupidR0),hl
   1ABE 2A 35 01           5830 	ld hl,(StupidR0)		; @
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 107.
Hexidecimal [16-Bits]



   1AC1 7E                 5831 	ld a,(hl)
   1AC2 5F                 5832 	ld e,a
   1AC3 23                 5833 	inc hl
   1AC4 7E                 5834 	ld a,(hl)
   1AC5 57                 5835 	ld d,a
   1AC6 ED 53 35 01        5836 	ld (StupidR0),de
   1ACA 2A 3F 01           5837 	ld hl,(StupidIP)		; IP@
   1ACD 22 37 01           5838 	ld (StupidR1),hl
   1AD0 ED 5B 37 01        5839 	ld de,(StupidR1)		; +
   1AD4 2A 35 01           5840 	ld hl,(StupidR0)
   1AD7 19                 5841 	add hl,de
   1AD8 22 35 01           5842 	ld (StupidR0),hl
                           5843 ; Store the offset on the math stack
   1ADB 2A 41 01           5844 	ld hl,(StupidMP)		; MP@
   1ADE 22 37 01           5845 	ld (StupidR1),hl
   1AE1 2A 37 01           5846 	ld hl,(StupidR1)		; !
   1AE4 ED 5B 35 01        5847 	ld de,(StupidR0)
   1AE8 73                 5848 	ld (hl),e
   1AE9 23                 5849 	inc hl
   1AEA 72                 5850 	ld (hl),d
                           5851 ; Advance IP over the literal and continue on.
   1AEB 2A 3F 01           5852 	ld hl,(StupidIP)		; IP@
   1AEE 22 35 01           5853 	ld (StupidR0),hl
   1AF1 21 02 00           5854 	ld hl,#2		; 2
   1AF4 22 37 01           5855 	ld (StupidR1),hl
   1AF7 ED 5B 37 01        5856 	ld de,(StupidR1)		; +
   1AFB 2A 35 01           5857 	ld hl,(StupidR0)
   1AFE 19                 5858 	add hl,de
   1AFF 22 35 01           5859 	ld (StupidR0),hl
   1B02 2A 35 01           5860 	ld hl,(StupidR0)		; IP!
   1B05 22 3F 01           5861 	ld (StupidIP),hl
   1B08 2A CB 01           5862 	ld hl,(StupidNEXT)		; NEXT@
   1B0B 22 35 01           5863 	ld (StupidR0),hl
   1B0E 2A 35 01           5864 	ld hl,(StupidR0)		; PC!
   1B11 E9                 5865 	jp (hl)
                           5866 ; --	O@ - Fetch the value of a relative offset
                           5867 ; 
                           5868 ; ( a -> b )
                           5869 ; 
                           5870 ; The word address by 'a' is fetched, sign-extended, and added
                           5871 ; to 'a'. This converts the word addressed by 'a' to the absolute
                           5872 ; address 'b'.
                           5873 ; 
                           5874 ; Revisions:
                           5875 ; 
                           5876 ; 06/28/96 RLI - Modified to use cell-sized offset.
                           5877 
                           5878 
                           5879 ; ----	O@ -- word # 85
                           5880 
   1B12                    5881 W85_Name:
                           5882 
                           5883 	; stringengize( O@ )
   1B12 4F                 5884 .byte 0x4f
   1B13 40                 5885 .byte 0x40
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 108.
Hexidecimal [16-Bits]



                           5886 
   1B14 02 00              5887 	.word ( . - W85_Name ) + 0 
   1B16 7F 00              5888 	.word W85_CFA - W84_CFA
   1B18                    5889 W85_CFA:
   1B18 3A E8              5890 	.word W2_CFA - .		; (:)
   1B1A                    5891 W85_PFA:
   1B1A 47 EE              5892 	.word W17_CFA - .		; DUP
   1B1C 41 EB              5893 	.word W9_CFA - .		; @
   1B1E 4C F2              5894 	.word W19_CFA - .		; +
   1B20 A8 E8              5895 	.word W3_CFA - .		; (;)
                           5896 ; --	O! - Store a relative offset
                           5897 ; 
                           5898 ; 	( target address -> )
                           5899 ; 
                           5900 ; This word stores a 16-bit relative offset from address to target
                           5901 ; at address.
                           5902 ; 
                           5903 ; Revisions:
                           5904 ; 
                           5905 ; 06/28/96 RLI - Modified to use cell-size offset.
                           5906 
                           5907 
                           5908 ; ----	O! -- word # 86
                           5909 
   1B22                    5910 W86_Name:
                           5911 
                           5912 	; stringengize( O! )
   1B22 4F                 5913 .byte 0x4f
   1B23 21                 5914 .byte 0x21
                           5915 
   1B24 02 00              5916 	.word ( . - W86_Name ) + 0 
   1B26 10 00              5917 	.word W86_CFA - W85_CFA
   1B28                    5918 W86_CFA:
   1B28 2A E8              5919 	.word W2_CFA - .		; (:)
   1B2A                    5920 W86_PFA:
   1B2A 8A EE              5921 	.word W20_CFA - .		; SWAP
   1B2C DD F0              5922 	.word W26_CFA - .		; OVER
   1B2E 51 F1              5923 	.word W29_CFA - .		; -
   1B30 84 EE              5924 	.word W20_CFA - .		; SWAP
   1B32 2B EC              5925 	.word W13_CFA - .		; !
   1B34 94 E8              5926 	.word W3_CFA - .		; (;)
                           5927 ; --	B, - Append a byte to the dictionary
                           5928 ; 
                           5929 ; ( a -> )
                           5930 ; 
                           5931 ; a is stored in the first unused byte after the dictionary and
                           5932 ; the dictionary pointer is advanced to the next byte; this makes
                           5933 ; a the last byte in the dictionary.
                           5934 
                           5935 
                           5936 ; ----	B, -- word # 87
                           5937 
   1B36                    5938 W87_Name:
                           5939 
                           5940 	; stringengize( B, )
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 109.
Hexidecimal [16-Bits]



   1B36 42                 5941 .byte 0x42
   1B37 2C                 5942 .byte 0x2c
                           5943 
   1B38 02 00              5944 	.word ( . - W87_Name ) + 0 
   1B3A 14 00              5945 	.word W87_CFA - W86_CFA
   1B3C                    5946 W87_CFA:
   1B3C 16 E8              5947 	.word W2_CFA - .		; (:)
   1B3E                    5948 W87_PFA:
   1B3E 4D FF              5949 	.word W83_CFA - .		; DP
   1B40 1D EB              5950 	.word W9_CFA - .		; @
   1B42 C0 EC              5951 	.word W14_CFA - .		; B!
   1B44 47 FF              5952 	.word W83_CFA - .		; DP
   1B46 04 EE              5953 	.word W16_CFA - .		; ++
   1B48 80 E8              5954 	.word W3_CFA - .		; (;)
                           5955 ; --	W, - Append a word to the dictionary
                           5956 ; 
                           5957 ; ( a -> )
                           5958 ; 
                           5959 ; a is stored in the first unused word after the dictionary and
                           5960 ; the dictionary pointer is advanced to the next word; this makes
                           5961 ; a the last word in the dictionary.
                           5962 
                           5963 
                           5964 ; ----	W, -- word # 88
                           5965 
   1B4A                    5966 W88_Name:
                           5967 
                           5968 	; stringengize( W, )
   1B4A 57                 5969 .byte 0x57
   1B4B 2C                 5970 .byte 0x2c
                           5971 
   1B4C 02 00              5972 	.word ( . - W88_Name ) + 0 
   1B4E 14 00              5973 	.word W88_CFA - W87_CFA
   1B50                    5974 W88_CFA:
   1B50 02 E8              5975 	.word W2_CFA - .		; (:)
   1B52                    5976 W88_PFA:
   1B52 39 FF              5977 	.word W83_CFA - .		; DP
   1B54 09 EB              5978 	.word W9_CFA - .		; @
   1B56 4F ED              5979 	.word W15_CFA - .		; W!
   1B58 33 FF              5980 	.word W83_CFA - .		; DP
   1B5A 03 EB              5981 	.word W9_CFA - .		; @
   1B5C D5 F5              5982 	.word W37_CFA - .		; (LIT)
   1B5E 02 00              5983 	.word 2
   1B60 0A F2              5984 	.word W19_CFA - .		; +
   1B62 29 FF              5985 	.word W83_CFA - .		; DP
   1B64 F9 EB              5986 	.word W13_CFA - .		; !
   1B66 62 E8              5987 	.word W3_CFA - .		; (;)
                           5988 ; --	, - Append a longword to the dictionary
                           5989 ; 
                           5990 ; ( a -> )
                           5991 ; 
                           5992 ; a is stored in the first longword after the dictionary and
                           5993 ; the dictionary pointer is advanced to the next longword; this makes
                           5994 ; a the last longword in the dictionary
                           5995 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 110.
Hexidecimal [16-Bits]



                           5996 
                           5997 ; ----	, -- word # 89
                           5998 
   1B68                    5999 W89_Name:
                           6000 
                           6001 	; stringengize( , )
   1B68 2C                 6002 .byte 0x2c
                           6003 
   1B69 01 00              6004 	.word ( . - W89_Name ) + 0 
   1B6B 1D 00              6005 	.word W89_CFA - W88_CFA
   1B6D                    6006 W89_CFA:
   1B6D E5 E7              6007 	.word W2_CFA - .		; (:)
   1B6F                    6008 W89_PFA:
   1B6F 1C FF              6009 	.word W83_CFA - .		; DP
   1B71 EC EA              6010 	.word W9_CFA - .		; @
   1B73 EA EB              6011 	.word W13_CFA - .		; !
   1B75 16 FF              6012 	.word W83_CFA - .		; DP
   1B77 E6 EA              6013 	.word W9_CFA - .		; @
   1B79 B8 F5              6014 	.word W37_CFA - .		; (LIT)
   1B7B 02 00              6015 	.word 2
   1B7D ED F1              6016 	.word W19_CFA - .		; +
   1B7F 0C FF              6017 	.word W83_CFA - .		; DP
   1B81 DC EB              6018 	.word W13_CFA - .		; !
   1B83 45 E8              6019 	.word W3_CFA - .		; (;)
                           6020 ; --	O, - Append a relative offset to the dictionary
                           6021 ; 
                           6022 ; 	( a -> )
                           6023 ; 
                           6024 ; The difference between the end of the dictionary and a is stored
                           6025 ; in the first unused longword after the dictionary. The dictionary
                           6026 ; pointer is advanced past this longword, making a-DP the last
                           6027 ; longword in the dictionary.
                           6028 
                           6029 
                           6030 ; ----	O, -- word # 90
                           6031 
   1B85                    6032 W90_Name:
                           6033 
                           6034 	; stringengize( O, )
   1B85 4F                 6035 .byte 0x4f
   1B86 2C                 6036 .byte 0x2c
                           6037 
   1B87 02 00              6038 	.word ( . - W90_Name ) + 0 
   1B89 1E 00              6039 	.word W90_CFA - W89_CFA
   1B8B                    6040 W90_CFA:
   1B8B C7 E7              6041 	.word W2_CFA - .		; (:)
   1B8D                    6042 W90_PFA:
   1B8D FE FE              6043 	.word W83_CFA - .		; DP
   1B8F CE EA              6044 	.word W9_CFA - .		; @
   1B91 EE F0              6045 	.word W29_CFA - .		; -
   1B93 DA FF              6046 	.word W89_CFA - .		; ,
   1B95 33 E8              6047 	.word W3_CFA - .		; (;)
                           6048 ; --	$, - Append a counted string to the dictionary
                           6049 ; 
                           6050 ; ( addr count -> )
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 111.
Hexidecimal [16-Bits]



                           6051 ; 
                           6052 ; This word appends a counted string to the dictionary. Each byte
                           6053 ; of the string is appended to the dictionary using B,. After the
                           6054 ; string is copied, it is padded with nulls until the name ends on an
                           6055 ; even longword boundary. At that even longword boundary, the length byte
                           6056 ; for the name is appended; the rest of the word header consists of one byte
                           6057 ; for the link and a word for the CFA, so when the header is complete the
                           6058 ; definition of the word will be longword aligned.
                           6059 ; 
                           6060 ; NOTE: The caller is responsible for ensuring the string is not longer
                           6061 ; than 63 characters.
                           6062 ; 
                           6063 ; Revisions:
                           6064 ; 
                           6065 ; 07/08/96 RLI - The flags byte now requires a longword so that
                           6066 ; 	code remains longword aligned with longword offsets.
                           6067 
                           6068 
                           6069 ; ----	$, -- word # 91
                           6070 
   1B97                    6071 W91_Name:
                           6072 
                           6073 	; stringengize( $, )
   1B97 24                 6074 .byte 0x24
   1B98 2C                 6075 .byte 0x2c
                           6076 
   1B99 02 00              6077 	.word ( . - W91_Name ) + 0 
   1B9B 12 00              6078 	.word W91_CFA - W90_CFA
   1B9D                    6079 W91_CFA:
   1B9D B5 E7              6080 	.word W2_CFA - .		; (:)
   1B9F                    6081 W91_PFA:
                           6082 ; *** ENTRY ***
                           6083 ; 
                           6084 ; M: Address of string, length of string
                           6085 ; R: Return address
                           6086 ; State A: Start up a do loop for the length of the string. Fetch the
                           6087 ; directory pointer so that we can use it at the end to calculate the
                           6088 ; length of the name. Go to state B.
                           6089 ;  
                           6090 ; M: Original DP, address of string
                           6091 ; R: REturn address, lmit, index
   1B9F                    6092 W91_a:
   1B9F F7 EE              6093 	.word W22_CFA - .		; >R
   1BA1 EA FE              6094 	.word W83_CFA - .		; DP
   1BA3 BA EA              6095 	.word W9_CFA - .		; @
   1BA5 0F EE              6096 	.word W20_CFA - .		; SWAP
   1BA7 83 EF              6097 	.word W23_CFA - .		; <R
   1BA9 88 F5              6098 	.word W37_CFA - .		; (LIT)
   1BAB 00 00              6099 	.word 0
   1BAD 86 FD              6100 	.word W46_CFA - .		; (DO)
   1BAF                    6101 W91_0:
                           6102 ; State B: Append the next byte from the string to the dictionary and
                           6103 ; bump the pointer into the string. Loop until done.
                           6104 ; 
                           6105 ; M: Original DP, Address of byte after the end of the string
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 112.
Hexidecimal [16-Bits]



                           6106 ; R: Return address
   1BAF                    6107 W91_b:
   1BAF B2 ED              6108 	.word W17_CFA - .		; DUP
   1BB1 EC EA              6109 	.word W10_CFA - .		; B@
   1BB3 89 FF              6110 	.word W87_CFA - .		; B,
   1BB5 F2 F5              6111 	.word W18_CFA - .		; 1
   1BB7 B3 F1              6112 	.word W19_CFA - .		; +
   1BB9 A3 FB              6113 	.word W47_CFA - .		; (LOOP)
   1BBB F4 FF              6114 	.word W91_0 - .
                           6115 ; State C: We're done fetching bytes from the string, so drop the pointer
                           6116 ; into the string from the stack. Get the current dictionary pointer so we
                           6117 ; can test to see if it's aligned. Go to state D.
   1BBD                    6118 W91_c:
   1BBD 97 EE              6119 	.word W21_CFA - .		; DROP
   1BBF CC FE              6120 	.word W83_CFA - .		; DP
   1BC1 9C EA              6121 	.word W9_CFA - .		; @
                           6122 ; State D: Test the low-order two bits of the dictionary pointer to see if
                           6123 ; we've longword aligned it. If so, go to state F. Otherwise, go to state
                           6124 ; E.
                           6125 ; 
                           6126 ; M: Original DP, Low-order two bits of DP
   1BC3                    6127 W91_d:
   1BC3 9E ED              6128 	.word W17_CFA - .		; DUP
   1BC5 6C F5              6129 	.word W37_CFA - .		; (LIT)
   1BC7 03 00              6130 	.word 3
   1BC9 47 F2              6131 	.word W31_CFA - .		; AND
   1BCB 4F E9              6132 	.word W7_CFA - .		; (0BRANCH)
   1BCD 0E 00              6133 	.word W91_f - .
                           6134 ; State E: DP is not yet longword alined. Append a null to the name and
                           6135 ; bump our copy of DP's low-order bits. Go to state D.
                           6136 ; 
                           6137 ; M: Original DP, (Low-order bits of DP) + 1
   1BCF                    6138 W91_e:
   1BCF CF F5              6139 	.word W41_CFA - .		; 0
   1BD1 6B FF              6140 	.word W87_CFA - .		; B,
   1BD3 D4 F5              6141 	.word W18_CFA - .		; 1
   1BD5 95 F1              6142 	.word W19_CFA - .		; +
   1BD7 01 E9              6143 	.word W6_CFA - .		; (BRANCH)
   1BD9 EA FF              6144 	.word W91_d - .
                           6145 ; State F: We've longword aligned the dictionary. Drop the low-order two
                           6146 ; bits of DP since we don't need them anymore. Figure out how long the
                           6147 ; string is and deposit the length byte. Exit.
                           6148 ; 
                           6149 ; M:
   1BDB                    6150 W91_f:
   1BDB 79 EE              6151 	.word W21_CFA - .		; DROP
   1BDD AE FE              6152 	.word W83_CFA - .		; DP
   1BDF 7E EA              6153 	.word W9_CFA - .		; @
   1BE1 D3 ED              6154 	.word W20_CFA - .		; SWAP
   1BE3 9C F0              6155 	.word W29_CFA - .		; -
   1BE5 88 FF              6156 	.word W89_CFA - .		; ,
                           6157 ; *** EXIT ***
                           6158 ; 
                           6159 ; M:
                           6160 ; R:
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 113.
Hexidecimal [16-Bits]



   1BE7                    6161 W91_z:
   1BE7 E1 E7              6162 	.word W3_CFA - .		; (;)
                           6163 ; --	ALLOT - Allocate a chunk of memory into a word
                           6164 ; 
                           6165 ; ( bytes -> )
                           6166 ; 
                           6167 ; This word allocates a chunk of memory onto the end of the last
                           6168 ; word in the dictionary. It does this by simply advancing the
                           6169 ; dictionary pointer past the memory.
                           6170 
                           6171 
                           6172 ; ----	ALLOT -- word # 92
                           6173 
   1BE9                    6174 W92_Name:
                           6175 
                           6176 	; stringengize( ALLOT )
   1BE9 41                 6177 .byte 0x41
   1BEA 4C                 6178 .byte 0x4c
   1BEB 4C                 6179 .byte 0x4c
   1BEC 4F                 6180 .byte 0x4f
   1BED 54                 6181 .byte 0x54
                           6182 
   1BEE 05 00              6183 	.word ( . - W92_Name ) + 0 
   1BF0 55 00              6184 	.word W92_CFA - W91_CFA
   1BF2                    6185 W92_CFA:
   1BF2 60 E7              6186 	.word W2_CFA - .		; (:)
   1BF4                    6187 W92_PFA:
   1BF4 97 FE              6188 	.word W83_CFA - .		; DP
   1BF6 67 EA              6189 	.word W9_CFA - .		; @
   1BF8 72 F1              6190 	.word W19_CFA - .		; +
   1BFA 91 FE              6191 	.word W83_CFA - .		; DP
   1BFC 61 EB              6192 	.word W13_CFA - .		; !
   1BFE CA E7              6193 	.word W3_CFA - .		; (;)
                           6194 ; --	CREATE - Create a new word
                           6195 ; 
                           6196 ; ( -> )
                           6197 ; 
                           6198 ; This word appends the bulk of a header to the dictionary. It creates
                           6199 ; the name, flag, and link bytes and points LAST at the new header.
                           6200 ; When done, DP points at the CFA for the new word; the caller must
                           6201 ; fill in the CFA with a suitable O, before storing the definition of
                           6202 ; the word.
                           6203 ; 
                           6204 ; CREATE obtains the name of the word from the input buffer; it calls
                           6205 ; TOKEN to get the next word from the input buffer. If there are
                           6206 ; no tokens left in the input buffer, CREATE will display an error
                           6207 ; message and ABORT.
                           6208 ; 
                           6209 ; CREATE may also ABORT if the name is longer than 63 characters (the
                           6210 ; longest name that may be supported by the Flags byte).
                           6211 
                           6212 
                           6213 ; ----	CREATE -- word # 93
                           6214 
   1C00                    6215 W93_Name:
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 114.
Hexidecimal [16-Bits]



                           6216 
                           6217 	; stringengize( CREATE )
   1C00 43                 6218 .byte 0x43
   1C01 52                 6219 .byte 0x52
   1C02 45                 6220 .byte 0x45
   1C03 41                 6221 .byte 0x41
   1C04 54                 6222 .byte 0x54
   1C05 45                 6223 .byte 0x45
                           6224 
   1C06 06 00              6225 	.word ( . - W93_Name ) + 0 
   1C08 18 00              6226 	.word W93_CFA - W92_CFA
   1C0A                    6227 W93_CFA:
   1C0A 48 E7              6228 	.word W2_CFA - .		; (:)
   1C0C                    6229 W93_PFA:
                           6230 ; *** ENTRY ***
                           6231 ; 
                           6232 ; M:
                           6233 ; R: Return address
                           6234 ; State A: Grab the next token from the input buffer. If there is no next
                           6235 ; token (we're at the end of the line), go to state E. Otherwise, go to
                           6236 ; state B.
                           6237 ; 
                           6238 ; M: Address of token, length of token
   1C0C                    6239 W93_a:
   1C0C 57 F8              6240 	.word W62_CFA - .		; TOKEN
   1C0E 53 ED              6241 	.word W17_CFA - .		; DUP
   1C10 0A E9              6242 	.word W7_CFA - .		; (0BRANCH)
   1C12 26 00              6243 	.word W93_e - .
                           6244 ; State B: Make certain the name isn't too long. If the name is too
                           6245 ; long, go to state F. Otherwise, go to state C.
                           6246 ; 
                           6247 ; M: Address of token, length of token
   1C14                    6248 W93_b:
   1C14 4D ED              6249 	.word W17_CFA - .		; DUP
   1C16 1B F5              6250 	.word W37_CFA - .		; (LIT)
   1C18 40 00              6251 	.word 64
   1C1A D4 F4              6252 	.word W38_CFA - .		; <
   1C1C FE E8              6253 	.word W7_CFA - .		; (0BRANCH)
   1C1E 20 00              6254 	.word W93_f - .
                           6255 ; State C: We have a reasonable token. Toss it on the end of the dictionary.
                           6256 ; Compute and store the link field. Go to state G.
                           6257 ; 
                           6258 ; M:
   1C20                    6259 W93_c:
   1C20 7D FF              6260 	.word W91_CFA - .		; $,
   1C22 69 FE              6261 	.word W83_CFA - .		; DP
   1C24 39 EA              6262 	.word W9_CFA - .		; @
   1C26 0B F5              6263 	.word W37_CFA - .		; (LIT)
   1C28 02 00              6264 	.word 2
   1C2A 40 F1              6265 	.word W19_CFA - .		; +
   1C2C E7 F8              6266 	.word W64_CFA - .		; LAST
   1C2E 2F EA              6267 	.word W9_CFA - .		; @
   1C30 4F F0              6268 	.word W29_CFA - .		; -
   1C32 3B FF              6269 	.word W89_CFA - .		; ,
   1C34 A4 E8              6270 	.word W6_CFA - .		; (BRANCH)
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 115.
Hexidecimal [16-Bits]



   1C36 0E 00              6271 	.word W93_g - .
                           6272 ; State D: (deleted)
                           6273 ; State E: There is no token on the line following the word which decided
                           6274 ; to create a new word. In other words, we don't have a name for the new
                           6275 ; word. Complain and ABORT.
                           6276 ; 
                           6277 ; M: Doesn't matter because we're ABORTing.
   1C38                    6278 W93_e:
   1C38 1F 00              6279 	.word W94_CFA - .		; NAME?
   1C3A FD F5              6280 	.word W49_CFA - .		; TYPE
   1C3C 3F FE              6281 	.word W53_CFA - .		; ABORT
                           6282 ; State F: The token is too long. Display an error message and ABORT.
                           6283 ; 
                           6284 ; M: Doesn't matter because we're ABORTing.
   1C3E                    6285 W93_f:
   1C3E 2D 00              6286 	.word W95_CFA - .		; LEN?
   1C40 F7 F5              6287 	.word W49_CFA - .		; TYPE
   1C42 39 FE              6288 	.word W53_CFA - .		; ABORT
                           6289 ; State G: The header is cool. Update LAST to point at the new header
                           6290 ; and exit.
   1C44                    6291 W93_g:
   1C44 47 FE              6292 	.word W83_CFA - .		; DP
   1C46 17 EA              6293 	.word W9_CFA - .		; @
   1C48 CB F8              6294 	.word W64_CFA - .		; LAST
   1C4A 13 EB              6295 	.word W13_CFA - .		; !
                           6296 ; **** EXIT ****
                           6297 ; 
                           6298 ; M:
                           6299 ; R:
   1C4C                    6300 W93_z:
   1C4C 7C E7              6301 	.word W3_CFA - .		; (;)
                           6302 ; --	NAME? - This word contains an error message displayed by CREATE
                           6303 ; if there is no name for the new word in the input buffer.
                           6304 
                           6305 
                           6306 ; ----	NAME? -- word # 94
                           6307 
   1C4E                    6308 W94_Name:
                           6309 
                           6310 	; stringengize( NAME? )
   1C4E 4E                 6311 .byte 0x4e
   1C4F 41                 6312 .byte 0x41
   1C50 4D                 6313 .byte 0x4d
   1C51 45                 6314 .byte 0x45
   1C52 3F                 6315 .byte 0x3f
                           6316 
   1C53 05 00              6317 	.word ( . - W94_Name ) + 0 
   1C55 4D 00              6318 	.word W94_CFA - W93_CFA
   1C57                    6319 W94_CFA:
   1C57 3A E9              6320 	.word W8_CFA - .		; ($)
   1C59                    6321 W94_PFA:
                           6322 ;<\r\nName?\r\n>
   1C59 09                 6323 	.byte W94_End - W94_Begin
   1C5A                    6324 	W94_Begin:
                           6325 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 116.
Hexidecimal [16-Bits]



                           6326 	; stringengize( \r\nName?\r\n )
   1C5A 0D                 6327 .byte 0xd
   1C5B 0A                 6328 .byte 0xa
   1C5C 4E                 6329 .byte 0x4e
   1C5D 61                 6330 .byte 0x61
   1C5E 6D                 6331 .byte 0x6d
   1C5F 65                 6332 .byte 0x65
   1C60 3F                 6333 .byte 0x3f
   1C61 0D                 6334 .byte 0xd
   1C62 0A                 6335 .byte 0xa
                           6336 
   1C63                    6337 W94_End:
                           6338 ; --	LEN? - This word contains an error message displayed by CREATE
                           6339 ; if the name for the new word is too long.
                           6340 
                           6341 
                           6342 ; ----	LEN? -- word # 95
                           6343 
   1C63                    6344 W95_Name:
                           6345 
                           6346 	; stringengize( LEN? )
   1C63 4C                 6347 .byte 0x4c
   1C64 45                 6348 .byte 0x45
   1C65 4E                 6349 .byte 0x4e
   1C66 3F                 6350 .byte 0x3f
                           6351 
   1C67 04 00              6352 	.word ( . - W95_Name ) + 0 
   1C69 14 00              6353 	.word W95_CFA - W94_CFA
   1C6B                    6354 W95_CFA:
   1C6B 26 E9              6355 	.word W8_CFA - .		; ($)
   1C6D                    6356 W95_PFA:
                           6357 ;<\r\nLen?\r\n>
   1C6D 08                 6358 	.byte W95_End - W95_Begin
   1C6E                    6359 	W95_Begin:
                           6360 
                           6361 	; stringengize( \r\nLen?\r\n )
   1C6E 0D                 6362 .byte 0xd
   1C6F 0A                 6363 .byte 0xa
   1C70 4C                 6364 .byte 0x4c
   1C71 65                 6365 .byte 0x65
   1C72 6E                 6366 .byte 0x6e
   1C73 3F                 6367 .byte 0x3f
   1C74 0D                 6368 .byte 0xd
   1C75 0A                 6369 .byte 0xa
                           6370 
   1C76                    6371 W95_End:
                           6372 ; --	VARIABLE - Create a variable
                           6373 ; 
                           6374 ; 	( a -> )
                           6375 ; 
                           6376 ; This word creates a variable with a specified name. The value on
                           6377 ; top of the math stack is stored in the variable after the header
                           6378 ; is created. The name of the variable is taken from the input buffer;
                           6379 ; i.e., it's the word of input following VARIABLE.
                           6380 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 117.
Hexidecimal [16-Bits]



                           6381 
                           6382 ; ----	VARIABLE -- word # 96
                           6383 
   1C76                    6384 W96_Name:
                           6385 
                           6386 	; stringengize( VARIABLE )
   1C76 56                 6387 .byte 0x56
   1C77 41                 6388 .byte 0x41
   1C78 52                 6389 .byte 0x52
   1C79 49                 6390 .byte 0x49
   1C7A 41                 6391 .byte 0x41
   1C7B 42                 6392 .byte 0x42
   1C7C 4C                 6393 .byte 0x4c
   1C7D 45                 6394 .byte 0x45
                           6395 
   1C7E 08 00              6396 	.word ( . - W96_Name ) + 0 
   1C80 17 00              6397 	.word W96_CFA - W95_CFA
   1C82                    6398 W96_CFA:
   1C82 D0 E6              6399 	.word W2_CFA - .		; (:)
   1C84                    6400 W96_PFA:
                           6401 ; First, create the header
   1C84 86 FF              6402 	.word W93_CFA - .		; CREATE
                           6403 ; Point the CFA at (VAR)
   1C86 13 FE              6404 	.word W84_CFA - .		; (OLIT)
   1C88 F4 E7              6405 	.word W5_CFA - .		; (VAR)
   1C8A 01 FF              6406 	.word W90_CFA - .		; O,
                           6407 ; Store the value into the new variable
   1C8C E1 FE              6408 	.word W89_CFA - .		; ,
   1C8E 3A E7              6409 	.word W3_CFA - .		; (;)
                           6410 ; --	CONSTANT - Create a constant
                           6411 ; 
                           6412 ; 	( a -> )
                           6413 ; 
                           6414 ; This word creates a constant with a specified name. The value on
                           6415 ; top of the math stack is stored in the constant after the header
                           6416 ; is created. The name of the constant is taken from the input buffer;
                           6417 ; i.e., it's the word of input following CONSTANT.
                           6418 
                           6419 
                           6420 ; ----	CONSTANT -- word # 97
                           6421 
   1C90                    6422 W97_Name:
                           6423 
                           6424 	; stringengize( CONSTANT )
   1C90 43                 6425 .byte 0x43
   1C91 4F                 6426 .byte 0x4f
   1C92 4E                 6427 .byte 0x4e
   1C93 53                 6428 .byte 0x53
   1C94 54                 6429 .byte 0x54
   1C95 41                 6430 .byte 0x41
   1C96 4E                 6431 .byte 0x4e
   1C97 54                 6432 .byte 0x54
                           6433 
   1C98 08 00              6434 	.word ( . - W97_Name ) + 0 
   1C9A 1A 00              6435 	.word W97_CFA - W96_CFA
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 118.
Hexidecimal [16-Bits]



   1C9C                    6436 W97_CFA:
   1C9C B6 E6              6437 	.word W2_CFA - .		; (:)
   1C9E                    6438 W97_PFA:
                           6439 ; First, create the header
   1C9E 6C FF              6440 	.word W93_CFA - .		; CREATE
                           6441 ; Point the CFA at (CONSTANT)
   1CA0 F9 FD              6442 	.word W84_CFA - .		; (OLIT)
   1CA2 75 E7              6443 	.word W4_CFA - .		; (CONSTANT)
   1CA4 E7 FE              6444 	.word W90_CFA - .		; O,
                           6445 ; Store the value into the new variable
   1CA6 C7 FE              6446 	.word W89_CFA - .		; ,
   1CA8 20 E7              6447 	.word W3_CFA - .		; (;)
                           6448 ; --	CODE - Create a machine code word
                           6449 ; 
                           6450 ; ( -> )
                           6451 ; 
                           6452 ; This word creates a word containing machine code. It creates a
                           6453 ; header whose CFA points to the word's definition; i.e., it
                           6454 ; creates a header for which the word itself contains the machine
                           6455 ; code which knows how to execute the word. The code executed by
                           6456 ; the word must be appended to the header using the various ',' words.
                           6457 ; 
                           6458 ; The name of the new word is taken from the input buffer; i.e., it
                           6459 ; follows CODE on the input line.
                           6460 ; 
                           6461 ; Revisions:
                           6462 ; 	08/09/96 RLI - Removed assumption that CFA is a relative offset.
                           6463 ; 08/27/96 RLI - Fixed the 08/09 fix.
                           6464 
                           6465 
                           6466 ; ----	CODE -- word # 98
                           6467 
   1CAA                    6468 W98_Name:
                           6469 
                           6470 	; stringengize( CODE )
   1CAA 43                 6471 .byte 0x43
   1CAB 4F                 6472 .byte 0x4f
   1CAC 44                 6473 .byte 0x44
   1CAD 45                 6474 .byte 0x45
                           6475 
   1CAE 04 00              6476 	.word ( . - W98_Name ) + 0 
   1CB0 16 00              6477 	.word W98_CFA - W97_CFA
   1CB2                    6478 W98_CFA:
   1CB2 A0 E6              6479 	.word W2_CFA - .		; (:)
   1CB4                    6480 W98_PFA:
   1CB4 56 FF              6481 	.word W93_CFA - .		; CREATE
   1CB6 D5 FD              6482 	.word W83_CFA - .		; DP
   1CB8 A5 E9              6483 	.word W9_CFA - .		; @
   1CBA D1 FE              6484 	.word W90_CFA - .		; O,
   1CBC 0C E7              6485 	.word W3_CFA - .		; (;)
                           6486 ; --	$ - Compile a string into a word
                           6487 ; 
                           6488 ; ( -> )
                           6489 ; 
                           6490 ; This word compiles a string into a word. The token following $ on
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 119.
Hexidecimal [16-Bits]



                           6491 ; the input line is used as the name of the word. The rest of the
                           6492 ; input line is copied into the dictionary following the header and
                           6493 ; string length byte.
                           6494 
                           6495 
                           6496 ; ----	$ -- word # 99
                           6497 
   1CBE                    6498 W99_Name:
                           6499 
                           6500 	; stringengize( $ )
   1CBE 24                 6501 .byte 0x24
                           6502 
   1CBF 01 00              6503 	.word ( . - W99_Name ) + 0 
   1CC1 11 00              6504 	.word W99_CFA - W98_CFA
   1CC3                    6505 W99_CFA:
   1CC3 8F E6              6506 	.word W2_CFA - .		; (:)
   1CC5                    6507 W99_PFA:
                           6508 ; Create the word and point its CFA at ($)
   1CC5 45 FF              6509 	.word W93_CFA - .		; CREATE
   1CC7 D2 FD              6510 	.word W84_CFA - .		; (OLIT)
   1CC9 C8 E8              6511 	.word W8_CFA - .		; ($)
   1CCB C0 FE              6512 	.word W90_CFA - .		; O,
                           6513 ; Calculate the length of the remaining line. This is given by 
                           6514 ; searching for the null terminating the input buffer.
   1CCD E0 F5              6515 	.word W56_CFA - .		; INBUF
   1CCF 37 F6              6516 	.word W57_CFA - .		; IN
   1CD1 8C E9              6517 	.word W9_CFA - .		; @
   1CD3 97 F0              6518 	.word W19_CFA - .		; +
   1CD5 C9 F4              6519 	.word W41_CFA - .		; 0
                           6520 ; Examine the character. If it's a null, we're done. Otherwise,
                           6521 ; we need to bump the address and look at the next character.
   1CD7                    6522 W99_a:
   1CD7 6B F7              6523 	.word W61_CFA - .		; NEXTCHAR
   1CD9 41 E8              6524 	.word W7_CFA - .		; (0BRANCH)
   1CDB 0A 00              6525 	.word W99_b - .
                           6526 ; The character is not null. Count it and repeat.
   1CDD CA F4              6527 	.word W18_CFA - .		; 1
   1CDF 8B F0              6528 	.word W19_CFA - .		; +
   1CE1 F7 E7              6529 	.word W6_CFA - .		; (BRANCH)
   1CE3 F4 FF              6530 	.word W99_a - .
                           6531 ; The character is a null; we've found the string length. Append
                           6532 ; the string length to the dictionary followed by the string.
   1CE5                    6533 W99_b:
   1CE5 7C EC              6534 	.word W17_CFA - .		; DUP
   1CE7 55 FE              6535 	.word W87_CFA - .		; B,
   1CE9 B4 FE              6536 	.word W91_CFA - .		; $,
                           6537 ; Note that we'll have a couple of extra bytes at the end (padding
                           6538 ; to longword boundary followed by a flag byte, but that's OK.
   1CEB DD E6              6539 	.word W3_CFA - .		; (;)
                           6540 ; ----
                           6541 ; 
                           6542 ; : and support for :
                           6543 ; 
                           6544 ; ----
                           6545 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 120.
Hexidecimal [16-Bits]



                           6546 
                           6547 ; ----	:DONE -- word # 100
                           6548 
   1CED                    6549 W100_Name:
                           6550 
                           6551 	; stringengize( :DONE )
   1CED 3A                 6552 .byte 0x3a
   1CEE 44                 6553 .byte 0x44
   1CEF 4F                 6554 .byte 0x4f
   1CF0 4E                 6555 .byte 0x4e
   1CF1 45                 6556 .byte 0x45
                           6557 
   1CF2 05 00              6558 	.word ( . - W100_Name ) + 0 
   1CF4 33 00              6559 	.word W100_CFA - W99_CFA
   1CF6                    6560 W100_CFA:
   1CF6 86 E7              6561 	.word W5_CFA - .		; (VAR)
   1CF8                    6562 W100_PFA:
   1CF8                    6563 	.blkb 2
                           6564 
                           6565 
                           6566 ; ----	:DP -- word # 101
                           6567 
   1CFA                    6568 W101_Name:
                           6569 
                           6570 	; stringengize( :DP )
   1CFA 3A                 6571 .byte 0x3a
   1CFB 44                 6572 .byte 0x44
   1CFC 50                 6573 .byte 0x50
                           6574 
   1CFD 03 00              6575 	.word ( . - W101_Name ) + 0 
   1CFF 0B 00              6576 	.word W101_CFA - W100_CFA
   1D01                    6577 W101_CFA:
   1D01 7B E7              6578 	.word W5_CFA - .		; (VAR)
   1D03                    6579 W101_PFA:
   1D03                    6580 	.blkb 2
                           6581 
                           6582 
                           6583 ; ----	:LAST -- word # 102
                           6584 
   1D05                    6585 W102_Name:
                           6586 
                           6587 	; stringengize( :LAST )
   1D05 3A                 6588 .byte 0x3a
   1D06 4C                 6589 .byte 0x4c
   1D07 41                 6590 .byte 0x41
   1D08 53                 6591 .byte 0x53
   1D09 54                 6592 .byte 0x54
                           6593 
   1D0A 05 00              6594 	.word ( . - W102_Name ) + 0 
   1D0C 0D 00              6595 	.word W102_CFA - W101_CFA
   1D0E                    6596 W102_CFA:
   1D0E 6E E7              6597 	.word W5_CFA - .		; (VAR)
   1D10                    6598 W102_PFA:
   1D10                    6599 	.blkb 2
                           6600 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 121.
Hexidecimal [16-Bits]



                           6601 
                           6602 ; ----	:MP -- word # 103
                           6603 
   1D12                    6604 W103_Name:
                           6605 
                           6606 	; stringengize( :MP )
   1D12 3A                 6607 .byte 0x3a
   1D13 4D                 6608 .byte 0x4d
   1D14 50                 6609 .byte 0x50
                           6610 
   1D15 03 00              6611 	.word ( . - W103_Name ) + 0 
   1D17 0B 00              6612 	.word W103_CFA - W102_CFA
   1D19                    6613 W103_CFA:
   1D19 63 E7              6614 	.word W5_CFA - .		; (VAR)
   1D1B                    6615 W103_PFA:
   1D1B                    6616 	.blkb 2
                           6617 ; --	; - Terminat a : definition
                           6618 ; 
                           6619 ; ( -> )
                           6620 ; 
                           6621 ; This word compiles (;) into the dictionary then sets :DONE to
                           6622 ; a non-zero value so : knows to exit.
                           6623 
                           6624 
                           6625 ; ----	; -- word # 104
                           6626 
   1D1D                    6627 W104_Name:
                           6628 
                           6629 	; stringengize( ; )
   1D1D 3B                 6630 .byte 0x3b
                           6631 
   1D1E 81 00              6632 	.word ( . - W104_Name ) + 128 
   1D20 09 00              6633 	.word W104_CFA - W103_CFA
   1D22                    6634 W104_CFA:
   1D22 30 E6              6635 	.word W2_CFA - .		; (:)
   1D24                    6636 W104_PFA:
   1D24 75 FD              6637 	.word W84_CFA - .		; (OLIT)
   1D26 A2 E6              6638 	.word W3_CFA - .		; (;)
   1D28 63 FE              6639 	.word W90_CFA - .		; O,
   1D2A 7D F4              6640 	.word W18_CFA - .		; 1
   1D2C CA FF              6641 	.word W100_CFA - .		; :DONE
   1D2E 2F EA              6642 	.word W13_CFA - .		; !
   1D30 98 E6              6643 	.word W3_CFA - .		; (;)
                           6644 ; --	:ABORT - Abort a : definition
                           6645 ; 
                           6646 ; ( -> )
                           6647 ; 
                           6648 ; This word is used to abort while compiling a : definition. It
                           6649 ; restores DP and LAST to their original values before ABORTing.
                           6650 
                           6651 
                           6652 ; ----	:ABORT -- word # 105
                           6653 
   1D32                    6654 W105_Name:
                           6655 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 122.
Hexidecimal [16-Bits]



                           6656 	; stringengize( :ABORT )
   1D32 3A                 6657 .byte 0x3a
   1D33 41                 6658 .byte 0x41
   1D34 42                 6659 .byte 0x42
   1D35 4F                 6660 .byte 0x4f
   1D36 52                 6661 .byte 0x52
   1D37 54                 6662 .byte 0x54
                           6663 
   1D38 06 00              6664 	.word ( . - W105_Name ) + 0 
   1D3A 1A 00              6665 	.word W105_CFA - W104_CFA
   1D3C                    6666 W105_CFA:
   1D3C 16 E6              6667 	.word W2_CFA - .		; (:)
   1D3E                    6668 W105_PFA:
   1D3E C3 FF              6669 	.word W101_CFA - .		; :DP
   1D40 1D E9              6670 	.word W9_CFA - .		; @
   1D42 49 FD              6671 	.word W83_CFA - .		; DP
   1D44 19 EA              6672 	.word W13_CFA - .		; !
   1D46 C8 FF              6673 	.word W102_CFA - .		; :LAST
   1D48 15 E9              6674 	.word W9_CFA - .		; @
   1D4A C9 F7              6675 	.word W64_CFA - .		; LAST
   1D4C 11 EA              6676 	.word W13_CFA - .		; !
   1D4E 2D FD              6677 	.word W53_CFA - .		; ABORT
   1D50 78 E6              6678 	.word W3_CFA - .		; (;)
                           6679 ; --	: - Compile a FORTH word into the dictionary
                           6680 ; 
                           6681 ; ( -> )
                           6682 ; 
                           6683 ; This word adds a new executable FORTH word to the dictionary; it is
                           6684 ; remarkably similar to INTERPRET, with a few exceptions:
                           6685 ; 
                           6686 ; 	- Non-immedate words are compiled into the dictionary
                           6687 ; 	  instead of being executed
                           6688 ; 
                           6689 ; 	- Literals are compiled into the dictionary instead
                           6690 ; 	  of being left on the math stack.
                           6691 
                           6692 
                           6693 ; ----	: -- word # 106
                           6694 
   1D52                    6695 W106_Name:
                           6696 
                           6697 	; stringengize( : )
   1D52 3A                 6698 .byte 0x3a
                           6699 
   1D53 01 00              6700 	.word ( . - W106_Name ) + 0 
   1D55 1B 00              6701 	.word W106_CFA - W105_CFA
   1D57                    6702 W106_CFA:
   1D57 FB E5              6703 	.word W2_CFA - .		; (:)
   1D59                    6704 W106_PFA:
                           6705 ; *** ENTRY ***
                           6706 ; 
                           6707 ; M:
                           6708 ; R: Return address
                           6709 ; State A: Initialize :DP and :LAST so we can undo the changes we make 
                           6710 ; to the dictionary if necessary. Initialize :DONE so we'll keep fetching
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 123.
Hexidecimal [16-Bits]



                           6711 ; lines until ; is executed. Initialize :MP so we can do a smidgen of
                           6712 ; error checking at ; time. Create the name and compile its CFA to point
                           6713 ; at (:). Go to state B.
                           6714 ; 
                           6715 ; M:
   1D59                    6716 W106_a:
   1D59 45 F4              6717 	.word W41_CFA - .		; 0
   1D5B 9B FF              6718 	.word W100_CFA - .		; :DONE
   1D5D 00 EA              6719 	.word W13_CFA - .		; !
   1D5F 2C FD              6720 	.word W83_CFA - .		; DP
   1D61 FC E8              6721 	.word W9_CFA - .		; @
   1D63 9E FF              6722 	.word W101_CFA - .		; :DP
   1D65 F8 E9              6723 	.word W13_CFA - .		; !
   1D67 AC F7              6724 	.word W64_CFA - .		; LAST
   1D69 F4 E8              6725 	.word W9_CFA - .		; @
   1D6B A3 FF              6726 	.word W102_CFA - .		; :LAST
   1D6D F0 E9              6727 	.word W13_CFA - .		; !
   1D6F CC EE              6728 	.word W28_CFA - .		; MP@
   1D71 A8 FF              6729 	.word W103_CFA - .		; :MP
   1D73 EA E9              6730 	.word W13_CFA - .		; !
   1D75 95 FE              6731 	.word W93_CFA - .		; CREATE
   1D77 22 FD              6732 	.word W84_CFA - .		; (OLIT)
   1D79 D9 E5              6733 	.word W2_CFA - .		; (:)
   1D7B 10 FE              6734 	.word W90_CFA - .		; O,
                           6735 ; State B: Fetch the next token from the input buffer buffer. If there is
                           6736 ; no next token, go to state H. Otheriwse, go to state C. 
                           6737 ; 
                           6738 ; Note that since we may have executed an immediate word, the math stack
                           6739 ; depth is indeterminate starting here.
                           6740 ; 
                           6741 ; M: ?, Token address, Token length
   1D7D                    6742 W106_b:
   1D7D E6 F6              6743 	.word W62_CFA - .		; TOKEN
   1D7F E2 EB              6744 	.word W17_CFA - .		; DUP
   1D81 99 E7              6745 	.word W7_CFA - .		; (0BRANCH)
   1D83 4A 00              6746 	.word W106_h - .
                           6747 ; State C: We have a token. Look it up in the dictionary. If it's not
                           6748 ; there, go to state I. Otherwise, go to state D.
                           6749 ; 
                           6750 ; M: ?, Token address, Token count, CFA of word named by Token
   1D85                    6751 W106_c:
   1D85 2F F8              6752 	.word W68_CFA - .		; FIND
   1D87 DA EB              6753 	.word W17_CFA - .		; DUP
   1D89 91 E7              6754 	.word W7_CFA - .		; (0BRANCH)
   1D8B 4C 00              6755 	.word W106_i - .
                           6756 ; State D: We've found the word, so we can toss the token address and
                           6757 ; byte count. Fetch the flag byte and see if it's an immediate word.
                           6758 ; If it's an immediate word, go to state E. Otherwise, go to state L.
                           6759 ; 
                           6760 ; M: ?, CFA
   1D8D                    6761 W106_d:
   1D8D 27 EC              6762 	.word W20_CFA - .		; SWAP
   1D8F C5 EC              6763 	.word W21_CFA - .		; DROP
   1D91 23 EC              6764 	.word W20_CFA - .		; SWAP
   1D93 C1 EC              6765 	.word W21_CFA - .		; DROP
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 124.
Hexidecimal [16-Bits]



   1D95 CC EB              6766 	.word W17_CFA - .		; DUP
   1D97 9A F3              6767 	.word W37_CFA - .		; (LIT)
   1D99 FC FF              6768 	.word -4
   1D9B CF EF              6769 	.word W19_CFA - .		; +
   1D9D C0 E8              6770 	.word W9_CFA - .		; @
   1D9F 92 F3              6771 	.word W37_CFA - .		; (LIT)
   1DA1 80 00              6772 	.word 128
   1DA3 6D F0              6773 	.word W31_CFA - .		; AND
   1DA5 75 E7              6774 	.word W7_CFA - .		; (0BRANCH)
   1DA7 50 00              6775 	.word W106_l - .
                           6776 ; State E: We have an immediate word. Execute the word and look to 
                           6777 ; see if we're done compiling. If we are done compiling, go to state F.
                           6778 ; Otherwise, go to state B.
                           6779 ; 
                           6780 ; M: ?
   1DA9                    6781 W106_e:
   1DA9 55 E5              6782 	.word W1_CFA - .		; EXEC
   1DAB 4B FF              6783 	.word W100_CFA - .		; :DONE
   1DAD B0 E8              6784 	.word W9_CFA - .		; @
   1DAF 6B E7              6785 	.word W7_CFA - .		; (0BRANCH)
   1DB1 CC FF              6786 	.word W106_b - .
                           6787 ; State F: We're done compiling. We need to make certain everything the
                           6788 ; immediate words left on the math stack has been popped off. Fetch the
                           6789 ; math stack pointer and compare it to the math stack pointer we had
                           6790 ; on entry. If they match, we don't have any leftover boogers on the
                           6791 ; math stack; exit. Otherwise, go to state G.
                           6792 ; 
                           6793 ; M:		( if we exit )
                           6794 ; M: ?		( if we go to state G)
   1DB3                    6795 W106_f:
   1DB3 88 EE              6796 	.word W28_CFA - .		; MP@
   1DB5 64 FF              6797 	.word W103_CFA - .		; :MP
   1DB7 A6 E8              6798 	.word W9_CFA - .		; @
   1DB9 C6 EE              6799 	.word W29_CFA - .		; -
   1DBB 5F E7              6800 	.word W7_CFA - .		; (0BRANCH)
   1DBD 40 00              6801 	.word W106_z - .
                           6802 ; State G: Argh! We've boogerd up the math stack and not wiped it off.
                           6803 ; Display an error message and :ABORT.
                           6804 ; 
                           6805 ; M: Doesn't matter since we're :ABORTing.
   1DBF                    6806 W106_g:
   1DBF DA FC              6807 	.word W84_CFA - .		; (OLIT)
   1DC1 96 FF              6808 	.word W106_CFA - .		; :
   1DC3 5C F7              6809 	.word W65_CFA - .		; ID>$
   1DC5 72 F4              6810 	.word W49_CFA - .		; TYPE
   1DC7 41 00              6811 	.word W107_CFA - .		; NEST?
   1DC9 6E F4              6812 	.word W49_CFA - .		; TYPE
   1DCB 71 FF              6813 	.word W105_CFA - .		; :ABORT
                           6814 ; State H: We've hit the end of the line before encountering ;. Clean the
                           6815 ; token info off the math stack and get another line of input. Go back
                           6816 ; to state B.
                           6817 ; 
                           6818 ; M: ?
   1DCD                    6819 W106_h:
   1DCD 87 EC              6820 	.word W21_CFA - .		; DROP
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 125.
Hexidecimal [16-Bits]



   1DCF 85 EC              6821 	.word W21_CFA - .		; DROP
   1DD1 44 F5              6822 	.word W58_CFA - .		; GETLINE
   1DD3 05 E7              6823 	.word W6_CFA - .		; (BRANCH)
   1DD5 A8 FF              6824 	.word W106_b - .
                           6825 ; State I: We could not find the token in the dictionary. This may
                           6826 ; be a number. If so, go to state J. Otherwise, go to state K.
                           6827 ; 
                           6828 ; M: ?, Token address, Token count
   1DD7                    6829 W106_i:
   1DD7 7D EC              6830 	.word W21_CFA - .		; DROP
   1DD9 DB F8              6831 	.word W73_CFA - .		; ISNUMBER
   1DDB 3F E7              6832 	.word W7_CFA - .		; (0BRANCH)
   1DDD 10 00              6833 	.word W106_k - .
                           6834 ; State J: We have a literal. Convert it to binary and compile it into the
                           6835 ; dictionary. Go to state B.
   1DDF                    6836 W106_j:
   1DDF 8B F8              6837 	.word W72_CFA - .		; >NYBBLES
   1DE1 B8 FC              6838 	.word W84_CFA - .		; (OLIT)
   1DE3 4E F3              6839 	.word W37_CFA - .		; (LIT)
   1DE5 A6 FD              6840 	.word W90_CFA - .		; O,
   1DE7 86 FD              6841 	.word W89_CFA - .		; ,
   1DE9 EF E6              6842 	.word W6_CFA - .		; (BRANCH)
   1DEB 92 FF              6843 	.word W106_b - .
                           6844 ; State K: Our token is bogus; it isn't a number and it isn't in the 
                           6845 ; dictionary. Display tthe token so the user knows why were :ABORTing
                           6846 ; then :ABORT.
                           6847 ; 
                           6848 ; M: Doesn't matter since we're :ABORTing.
   1DED                    6849 W106_k:
   1DED 4A F4              6850 	.word W49_CFA - .		; TYPE
   1DEF 42 F3              6851 	.word W37_CFA - .		; (LIT)
   1DF1 3F 00              6852 	.word 63
   1DF3 A7 01              6853 	.word W44_CFA - .		; EMIT
   1DF5 47 FF              6854 	.word W105_CFA - .		; :ABORT
                           6855 ; State L: We've found the token in the dictionary and it is not an
                           6856 ; immediate word. Compile a reference to the word into the dictionary
                           6857 ; and go to state B.
                           6858 ; 
                           6859 ; M: ?
   1DF7                    6860 W106_l:
   1DF7 94 FD              6861 	.word W90_CFA - .		; O,
   1DF9 DF E6              6862 	.word W6_CFA - .		; (BRANCH)
   1DFB 82 FF              6863 	.word W106_b - .
                           6864 ; *** EXIT ***
                           6865 ; 
                           6866 ; M:
                           6867 ; R:
   1DFD                    6868 W106_z:
   1DFD CB E5              6869 	.word W3_CFA - .		; (;)
                           6870 ; --	NEST? - This word contains the error message displayed by :
                           6871 ; when it believes the control structure nesting is bad. It may
                           6872 ; also be displayed by other control structure words.
                           6873 
                           6874 
                           6875 ; ----	NEST? -- word # 107
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 126.
Hexidecimal [16-Bits]



                           6876 
   1DFF                    6877 W107_Name:
                           6878 
                           6879 	; stringengize( NEST? )
   1DFF 4E                 6880 .byte 0x4e
   1E00 45                 6881 .byte 0x45
   1E01 53                 6882 .byte 0x53
   1E02 54                 6883 .byte 0x54
   1E03 3F                 6884 .byte 0x3f
                           6885 
   1E04 05 00              6886 	.word ( . - W107_Name ) + 0 
   1E06 B1 00              6887 	.word W107_CFA - W106_CFA
   1E08                    6888 W107_CFA:
   1E08 89 E7              6889 	.word W8_CFA - .		; ($)
   1E0A                    6890 W107_PFA:
                           6891 ;< Nest?\r\n>
   1E0A 08                 6892 	.byte W107_End - W107_Begin
   1E0B                    6893 	W107_Begin:
                           6894 
                           6895 	; stringengize(  Nest?\r\n )
   1E0B 20                 6896 .byte 0x20
   1E0C 4E                 6897 .byte 0x4e
   1E0D 65                 6898 .byte 0x65
   1E0E 73                 6899 .byte 0x73
   1E0F 74                 6900 .byte 0x74
   1E10 3F                 6901 .byte 0x3f
   1E11 0D                 6902 .byte 0xd
   1E12 0A                 6903 .byte 0xa
                           6904 
   1E13                    6905 W107_End:
                           6906 ; --	IMMEDIATE - Flags the last word in the dictionary as immediate.
                           6907 ; 
                           6908 ; ( -> )
                           6909 ; 
                           6910 ; This word sets the IMMEDIATE bit in the flags byte of the
                           6911 ; word pointed to by LAST.
                           6912 
                           6913 
                           6914 ; ----	IMMEDIATE -- word # 108
                           6915 
   1E13                    6916 W108_Name:
                           6917 
                           6918 	; stringengize( IMMEDIATE )
   1E13 49                 6919 .byte 0x49
   1E14 4D                 6920 .byte 0x4d
   1E15 4D                 6921 .byte 0x4d
   1E16 45                 6922 .byte 0x45
   1E17 44                 6923 .byte 0x44
   1E18 49                 6924 .byte 0x49
   1E19 41                 6925 .byte 0x41
   1E1A 54                 6926 .byte 0x54
   1E1B 45                 6927 .byte 0x45
                           6928 
   1E1C 09 00              6929 	.word ( . - W108_Name ) + 0 
   1E1E 18 00              6930 	.word W108_CFA - W107_CFA
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 127.
Hexidecimal [16-Bits]



   1E20                    6931 W108_CFA:
   1E20 32 E5              6932 	.word W2_CFA - .		; (:)
   1E22                    6933 W108_PFA:
   1E22 F1 F6              6934 	.word W64_CFA - .		; LAST
   1E24 39 E8              6935 	.word W9_CFA - .		; @
   1E26 0B F3              6936 	.word W37_CFA - .		; (LIT)
   1E28 FC FF              6937 	.word -4
   1E2A 40 EF              6938 	.word W19_CFA - .		; +
   1E2C 35 EB              6939 	.word W17_CFA - .		; DUP
   1E2E 2F E8              6940 	.word W9_CFA - .		; @
   1E30 01 F3              6941 	.word W37_CFA - .		; (LIT)
   1E32 80 00              6942 	.word 128
   1E34 86 F0              6943 	.word W32_CFA - .		; OR
   1E36 7E EB              6944 	.word W20_CFA - .		; SWAP
   1E38 CA E9              6945 	.word W14_CFA - .		; B!
   1E3A 8E E5              6946 	.word W3_CFA - .		; (;)
                           6947 ; ----
                           6948 ; 
                           6949 ; DO loops
                           6950 ; 
                           6951 ; ----
                           6952 ; --	DO - Compile the top of a do loop
                           6953 ; 
                           6954 ; ( -> Top of loop, 1 )
                           6955 ; 
                           6956 ; This word compiles a (DO) into the dictionary and then leaves a
                           6957 ; booger the math stack containing the address of the byte after
                           6958 ; (DO) to allow LOOP and +LOOP to find the top of the loop.
                           6959 
                           6960 
                           6961 ; ----	DO -- word # 109
                           6962 
   1E3C                    6963 W109_Name:
                           6964 
                           6965 	; stringengize( DO )
   1E3C 44                 6966 .byte 0x44
   1E3D 4F                 6967 .byte 0x4f
                           6968 
   1E3E 82 00              6969 	.word ( . - W109_Name ) + 128 
   1E40 22 00              6970 	.word W109_CFA - W108_CFA
   1E42                    6971 W109_CFA:
   1E42 10 E5              6972 	.word W2_CFA - .		; (:)
   1E44                    6973 W109_PFA:
   1E44 55 FC              6974 	.word W84_CFA - .		; (OLIT)
   1E46 ED FA              6975 	.word W46_CFA - .		; (DO)
   1E48 43 FD              6976 	.word W90_CFA - .		; O,
   1E4A 41 FC              6977 	.word W83_CFA - .		; DP
   1E4C 11 E8              6978 	.word W9_CFA - .		; @
   1E4E 59 F3              6979 	.word W18_CFA - .		; 1
   1E50 78 E5              6980 	.word W3_CFA - .		; (;)
                           6981 ; --	LOOP - Compile the bottom of a do loop
                           6982 ; 
                           6983 ; ( Address of top of loop, Booger type -> )
                           6984 ; 
                           6985 ; This word coppiles a (LOOP) into the dictionary followed by the
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 128.
Hexidecimal [16-Bits]



                           6986 ; offset to the top of the do loop. The top of the do loop is left
                           6987 ; as a booger on the math stack by DO.
                           6988 ; 
                           6989 ; The booger is check to ensure that it's a DO-booger. If the top
                           6990 ; of the math stack is not a DO-booger, "Nest?" is printed and
                           6991 ; compilation is :ABORTed.
                           6992 
                           6993 
                           6994 ; ----	LOOP -- word # 110
                           6995 
   1E52                    6996 W110_Name:
                           6997 
                           6998 	; stringengize( LOOP )
   1E52 4C                 6999 .byte 0x4c
   1E53 4F                 7000 .byte 0x4f
   1E54 4F                 7001 .byte 0x4f
   1E55 50                 7002 .byte 0x50
                           7003 
   1E56 84 00              7004 	.word ( . - W110_Name ) + 128 
   1E58 18 00              7005 	.word W110_CFA - W109_CFA
   1E5A                    7006 W110_CFA:
   1E5A F8 E4              7007 	.word W2_CFA - .		; (:)
   1E5C                    7008 W110_PFA:
   1E5C 3D FC              7009 	.word W84_CFA - .		; (OLIT)
   1E5E FE F8              7010 	.word W47_CFA - .		; (LOOP)
   1E60 2B FD              7011 	.word W90_CFA - .		; O,
   1E62 45 F3              7012 	.word W18_CFA - .		; 1
   1E64 1B EE              7013 	.word W29_CFA - .		; -
   1E66 B4 E6              7014 	.word W7_CFA - .		; (0BRANCH)
   1E68 14 00              7015 	.word W110_0 - .
   1E6A 2F FC              7016 	.word W84_CFA - .		; (OLIT)
   1E6C EE FF              7017 	.word W110_CFA - .		; LOOP
   1E6E B1 F6              7018 	.word W65_CFA - .		; ID>$
   1E70 C7 F3              7019 	.word W49_CFA - .		; TYPE
   1E72 96 FF              7020 	.word W107_CFA - .		; NEST?
   1E74 C3 F3              7021 	.word W49_CFA - .		; TYPE
   1E76 C6 FE              7022 	.word W105_CFA - .		; :ABORT
   1E78 60 E6              7023 	.word W6_CFA - .		; (BRANCH)
   1E7A 04 00              7024 	.word W110_1 - .
   1E7C                    7025 W110_0:
   1E7C 0F FD              7026 	.word W90_CFA - .		; O,
   1E7E                    7027 W110_1:
   1E7E 4A E5              7028 	.word W3_CFA - .		; (;)
                           7029 ; --	+LOOP - Compile the bottom of a do loop
                           7030 ; 
                           7031 ; ( Address of top of loop, Booger type -> )
                           7032 ; 
                           7033 ; This word coppiles a (+LOOP) into the dictionary followed by the
                           7034 ; offset to the top of the do loop. The top of the do loop is left
                           7035 ; as a booger on the math stack by DO.
                           7036 ; 
                           7037 ; The booger is check to ensure that it's a DO-booger. If the top
                           7038 ; of the math stack is not a DO-booger, "Nest?" is printed and
                           7039 ; compilation is :ABORTed.
                           7040 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 129.
Hexidecimal [16-Bits]



                           7041 
                           7042 ; ----	+LOOP -- word # 111
                           7043 
   1E80                    7044 W111_Name:
                           7045 
                           7046 	; stringengize( +LOOP )
   1E80 2B                 7047 .byte 0x2b
   1E81 4C                 7048 .byte 0x4c
   1E82 4F                 7049 .byte 0x4f
   1E83 4F                 7050 .byte 0x4f
   1E84 50                 7051 .byte 0x50
                           7052 
   1E85 85 00              7053 	.word ( . - W111_Name ) + 128 
   1E87 2F 00              7054 	.word W111_CFA - W110_CFA
   1E89                    7055 W111_CFA:
   1E89 C9 E4              7056 	.word W2_CFA - .		; (:)
   1E8B                    7057 W111_PFA:
   1E8B 0E FC              7058 	.word W84_CFA - .		; (OLIT)
   1E8D 9E F9              7059 	.word W76_CFA - .		; (+LOOP)
   1E8F FC FC              7060 	.word W90_CFA - .		; O,
   1E91 16 F3              7061 	.word W18_CFA - .		; 1
   1E93 EC ED              7062 	.word W29_CFA - .		; -
   1E95 85 E6              7063 	.word W7_CFA - .		; (0BRANCH)
   1E97 14 00              7064 	.word W111_0 - .
   1E99 00 FC              7065 	.word W84_CFA - .		; (OLIT)
   1E9B EE FF              7066 	.word W111_CFA - .		; +LOOP
   1E9D 82 F6              7067 	.word W65_CFA - .		; ID>$
   1E9F 98 F3              7068 	.word W49_CFA - .		; TYPE
   1EA1 67 FF              7069 	.word W107_CFA - .		; NEST?
   1EA3 94 F3              7070 	.word W49_CFA - .		; TYPE
   1EA5 97 FE              7071 	.word W105_CFA - .		; :ABORT
   1EA7 31 E6              7072 	.word W6_CFA - .		; (BRANCH)
   1EA9 04 00              7073 	.word W111_1 - .
   1EAB                    7074 W111_0:
   1EAB E0 FC              7075 	.word W90_CFA - .		; O,
   1EAD                    7076 W111_1:
   1EAD 1B E5              7077 	.word W3_CFA - .		; (;)
                           7078 ; ----
                           7079 ; 
                           7080 ;     REPEAT loops
                           7081 ; 
                           7082 ; ----
                           7083 ; --	REPEAT - Compile the top of a REPEAT/UNTIL loop.
                           7084 ; 
                           7085 ; ( -> Address of the top of the loop, 2 )
                           7086 ; 
                           7087 ; This word puts a REPEAT-booger on the math stack for later
                           7088 ; reference by UNTIL. The REPEAT-booger contains the 
                           7089 ; dictionary pointer when REPEAT was executed; i.e., it contains
                           7090 ; the address of the top of the loop.
                           7091 
                           7092 
                           7093 ; ----	REPEAT -- word # 112
                           7094 
   1EAF                    7095 W112_Name:
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 130.
Hexidecimal [16-Bits]



                           7096 
                           7097 	; stringengize( REPEAT )
   1EAF 52                 7098 .byte 0x52
   1EB0 45                 7099 .byte 0x45
   1EB1 50                 7100 .byte 0x50
   1EB2 45                 7101 .byte 0x45
   1EB3 41                 7102 .byte 0x41
   1EB4 54                 7103 .byte 0x54
                           7104 
   1EB5 86 00              7105 	.word ( . - W112_Name ) + 128 
   1EB7 30 00              7106 	.word W112_CFA - W111_CFA
   1EB9                    7107 W112_CFA:
   1EB9 99 E4              7108 	.word W2_CFA - .		; (:)
   1EBB                    7109 W112_PFA:
   1EBB D0 FB              7110 	.word W83_CFA - .		; DP
   1EBD A0 E7              7111 	.word W9_CFA - .		; @
   1EBF 72 F2              7112 	.word W37_CFA - .		; (LIT)
   1EC1 02 00              7113 	.word 2
   1EC3 05 E5              7114 	.word W3_CFA - .		; (;)
                           7115 ; --	UNTIL - Compile to bottom of a REPEAT/UNTIL loop.
                           7116 ; 
                           7117 ; ( Address of top loop, type of booger -> )
                           7118 ; 
                           7119 ; This word compiles a (0BRANCH) at the end of the loop which
                           7120 ; will branch back to the top of the loop. Thus, the loop is
                           7121 ; repeated until the top of the math stack at the bottom of
                           7122 ; the loop is non-zero.
                           7123 
                           7124 
                           7125 ; ----	UNTIL -- word # 113
                           7126 
   1EC5                    7127 W113_Name:
                           7128 
                           7129 	; stringengize( UNTIL )
   1EC5 55                 7130 .byte 0x55
   1EC6 4E                 7131 .byte 0x4e
   1EC7 54                 7132 .byte 0x54
   1EC8 49                 7133 .byte 0x49
   1EC9 4C                 7134 .byte 0x4c
                           7135 
   1ECA 85 00              7136 	.word ( . - W113_Name ) + 128 
   1ECC 15 00              7137 	.word W113_CFA - W112_CFA
   1ECE                    7138 W113_CFA:
   1ECE 84 E4              7139 	.word W2_CFA - .		; (:)
   1ED0                    7140 W113_PFA:
   1ED0 C9 FB              7141 	.word W84_CFA - .		; (OLIT)
   1ED2 48 E6              7142 	.word W7_CFA - .		; (0BRANCH)
   1ED4 B7 FC              7143 	.word W90_CFA - .		; O,
   1ED6 5B F2              7144 	.word W37_CFA - .		; (LIT)
   1ED8 02 00              7145 	.word 2
   1EDA A5 ED              7146 	.word W29_CFA - .		; -
   1EDC 3E E6              7147 	.word W7_CFA - .		; (0BRANCH)
   1EDE 14 00              7148 	.word W113_0 - .
   1EE0 B9 FB              7149 	.word W84_CFA - .		; (OLIT)
   1EE2 EC FF              7150 	.word W113_CFA - .		; UNTIL
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 131.
Hexidecimal [16-Bits]



   1EE4 3B F6              7151 	.word W65_CFA - .		; ID>$
   1EE6 51 F3              7152 	.word W49_CFA - .		; TYPE
   1EE8 20 FF              7153 	.word W107_CFA - .		; NEST?
   1EEA 4D F3              7154 	.word W49_CFA - .		; TYPE
   1EEC 50 FE              7155 	.word W105_CFA - .		; :ABORT
   1EEE EA E5              7156 	.word W6_CFA - .		; (BRANCH)
   1EF0 04 00              7157 	.word W113_1 - .
   1EF2                    7158 W113_0:
   1EF2 99 FC              7159 	.word W90_CFA - .		; O,
   1EF4                    7160 W113_1:
   1EF4 D4 E4              7161 	.word W3_CFA - .		; (;)
                           7162 ; ----
                           7163 ; 
                           7164 ; IF
                           7165 ; 
                           7166 ; ----
                           7167 ; --	IF - Compile a conditional branch
                           7168 ; 
                           7169 ; ( -> Address of offset in conditional branch, 3 )
                           7170 ; 
                           7171 ;  This word compiles a (0BRANCH) into the code, leaving space
                           7172 ; for the offset of the branch following it. The offset will be
                           7173 ; filled in later by either ELSE or ENDIF. Since ELSE or ENDIF
                           7174 ; need to know where the offset should be stored, the address of
                           7175 ; the offset is left on the math stack as an IF-booger.
                           7176 
                           7177 
                           7178 ; ----	IF -- word # 114
                           7179 
   1EF6                    7180 W114_Name:
                           7181 
                           7182 	; stringengize( IF )
   1EF6 49                 7183 .byte 0x49
   1EF7 46                 7184 .byte 0x46
                           7185 
   1EF8 82 00              7186 	.word ( . - W114_Name ) + 128 
   1EFA 2E 00              7187 	.word W114_CFA - W113_CFA
   1EFC                    7188 W114_CFA:
   1EFC 56 E4              7189 	.word W2_CFA - .		; (:)
   1EFE                    7190 W114_PFA:
   1EFE 9B FB              7191 	.word W84_CFA - .		; (OLIT)
   1F00 1A E6              7192 	.word W7_CFA - .		; (0BRANCH)
   1F02 89 FC              7193 	.word W90_CFA - .		; O,
   1F04 87 FB              7194 	.word W83_CFA - .		; DP
   1F06 57 E7              7195 	.word W9_CFA - .		; @
   1F08 59 EA              7196 	.word W17_CFA - .		; DUP
   1F0A 81 FC              7197 	.word W90_CFA - .		; O,
   1F0C 25 F2              7198 	.word W37_CFA - .		; (LIT)
   1F0E 03 00              7199 	.word 3
   1F10 B8 E4              7200 	.word W3_CFA - .		; (;)
                           7201 ; --	ELSE - Compile the false branch of an IF
                           7202 ; 
                           7203 ; ( Address of IF branch, type of booger -> Address of ELSE branch, 3 )
                           7204 ; 
                           7205 ; This word terminates the true branch of an IF and starts the false
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 132.
Hexidecimal [16-Bits]



                           7206 ; branch.
                           7207 ; 
                           7208 ; An unconditional branch is compiled following the true section.
                           7209 ; This will be filled in later by ENDIF. The booger left behind by IF
                           7210 ; is then filled in to point to the start of the false code. The
                           7211 ; IF-booger left by IF is replaced by an IF-booger for the branch
                           7212 ; at the end of the true section.
                           7213 
                           7214 
                           7215 ; ----	ELSE -- word # 115
                           7216 
   1F12                    7217 W115_Name:
                           7218 
                           7219 	; stringengize( ELSE )
   1F12 45                 7220 .byte 0x45
   1F13 4C                 7221 .byte 0x4c
   1F14 53                 7222 .byte 0x53
   1F15 45                 7223 .byte 0x45
                           7224 
   1F16 84 00              7225 	.word ( . - W115_Name ) + 128 
   1F18 1E 00              7226 	.word W115_CFA - W114_CFA
   1F1A                    7227 W115_CFA:
   1F1A 38 E4              7228 	.word W2_CFA - .		; (:)
   1F1C                    7229 W115_PFA:
   1F1C 7D FB              7230 	.word W84_CFA - .		; (OLIT)
   1F1E BA E5              7231 	.word W6_CFA - .		; (BRANCH)
   1F20 6B FC              7232 	.word W90_CFA - .		; O,
                           7233 ; Now we need to be a bit careful. We have to stash away the address
                           7234 ; of teh offset portion of the branch we just compiled before we
                           7235 ; can fill in the IF-booger left behind by IF (we want the original
                           7236 ; IF-boogerto branch _after_ the relative offset, not to it).
                           7237 ; 
                           7238 ; However, we also don't want to put dependencies in this code
                           7239 ; about the size of a relative offset. So what we're going to do
                           7240 ; is fetch DP and stash it on the return stack while we fill in the
                           7241 ; original IF-booger. Then we can use the return stack to generate
                           7242 ; the new IF-booger.
   1F22 69 FB              7243 	.word W83_CFA - .		; DP
   1F24 39 E7              7244 	.word W9_CFA - .		; @
   1F26 3B EA              7245 	.word W17_CFA - .		; DUP
   1F28 6E EB              7246 	.word W22_CFA - .		; >R
   1F2A 61 FC              7247 	.word W90_CFA - .		; O,
   1F2C 13 00              7248 	.word W116_CFA - .		; ENDIF
   1F2E FC EB              7249 	.word W23_CFA - .		; <R
   1F30 01 F2              7250 	.word W37_CFA - .		; (LIT)
   1F32 03 00              7251 	.word 3
   1F34 94 E4              7252 	.word W3_CFA - .		; (;)
                           7253 ; --	ENDIF - Complete the compilation of an IF construct
                           7254 ; 
                           7255 ; ( Address of branch offset to be filled in, type of booger -> )
                           7256 ; 
                           7257 ; This word fills in the open branch offset left behind by an
                           7258 ; IF or an ELSE. The offset from the original branch is written to
                           7259 ; point to the current DP, which is just past the end of the IF.
                           7260 
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 133.
Hexidecimal [16-Bits]



                           7261 
                           7262 ; ----	ENDIF -- word # 116
                           7263 
   1F36                    7264 W116_Name:
                           7265 
                           7266 	; stringengize( ENDIF )
   1F36 45                 7267 .byte 0x45
   1F37 4E                 7268 .byte 0x4e
   1F38 44                 7269 .byte 0x44
   1F39 49                 7270 .byte 0x49
   1F3A 46                 7271 .byte 0x46
                           7272 
   1F3B 85 00              7273 	.word ( . - W116_Name ) + 128 
   1F3D 25 00              7274 	.word W116_CFA - W115_CFA
   1F3F                    7275 W116_CFA:
   1F3F 13 E4              7276 	.word W2_CFA - .		; (:)
   1F41                    7277 W116_PFA:
   1F41 F0 F1              7278 	.word W37_CFA - .		; (LIT)
   1F43 03 00              7279 	.word 3
   1F45 3A ED              7280 	.word W29_CFA - .		; -
   1F47 D3 E5              7281 	.word W7_CFA - .		; (0BRANCH)
   1F49 14 00              7282 	.word W116_0 - .
   1F4B 4E FB              7283 	.word W84_CFA - .		; (OLIT)
   1F4D AF FF              7284 	.word W114_CFA - .		; IF
   1F4F D0 F5              7285 	.word W65_CFA - .		; ID>$
   1F51 E6 F2              7286 	.word W49_CFA - .		; TYPE
   1F53 B5 FE              7287 	.word W107_CFA - .		; NEST?
   1F55 E2 F2              7288 	.word W49_CFA - .		; TYPE
   1F57 E5 FD              7289 	.word W105_CFA - .		; :ABORT
   1F59 7F E5              7290 	.word W6_CFA - .		; (BRANCH)
   1F5B 0A 00              7291 	.word W116_1 - .
   1F5D                    7292 W116_0:
   1F5D 2E FB              7293 	.word W83_CFA - .		; DP
   1F5F FE E6              7294 	.word W9_CFA - .		; @
   1F61 53 EA              7295 	.word W20_CFA - .		; SWAP
   1F63 C5 FB              7296 	.word W86_CFA - .		; O!
   1F65                    7297 W116_1:
   1F65 63 E4              7298 	.word W3_CFA - .		; (;)
                           7299 ; 	?EMIT             M: ( -> Flag )
                           7300 ; 	                  R: ( -> )
                           7301 ; 
                           7302 ; 	If the console is ready to accept a character, a non-zero flag
                           7303 ; 	is pushed onto the math stack. Otherwise, a zero flag is pushed.
                           7304 ; 	The work is actually done by machine code at label MSQE.
                           7305 
                           7306 
                           7307 ; ----	?EMIT -- word # 117
                           7308 
   1F67                    7309 W117_Name:
                           7310 
                           7311 	; stringengize( ?EMIT )
   1F67 3F                 7312 .byte 0x3f
   1F68 45                 7313 .byte 0x45
   1F69 4D                 7314 .byte 0x4d
   1F6A 49                 7315 .byte 0x49
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 134.
Hexidecimal [16-Bits]



   1F6B 54                 7316 .byte 0x54
                           7317 
   1F6C 05 00              7318 	.word ( . - W117_Name ) + 0 
   1F6E 31 00              7319 	.word W117_CFA - W116_CFA
   1F70                    7320 W117_CFA:
   1F70 00 00              7321 	.word W117_CFA - .		; ?EMIT
   1F72                    7322 W117_PFA:
   1F72 21 4A 02           7323 	ld hl,#MSQE		; MSQE
   1F75 22 35 01           7324 	ld (StupidR0),hl
   1F78 2A 35 01           7325 	ld hl,(StupidR0)		; PC!
   1F7B E9                 7326 	jp (hl)
                           7327 ; 	(EMIT)              M: ( Character -> )
                           7328 ; 	                    R: ( -> )
                           7329 ; 
                           7330 ; 	Displays the character from the top of the math stack on the
                           7331 ; 	console. The character is dropped. The console is assumed to
                           7332 ; 	be ready to print. Handled by machine code at label MSE.
                           7333 
                           7334 
                           7335 ; ----	(EMIT) -- word # 118
                           7336 
   1F7C                    7337 W118_Name:
                           7338 
                           7339 	; stringengize( (EMIT) )
   1F7C 28                 7340 .byte 0x28
   1F7D 45                 7341 .byte 0x45
   1F7E 4D                 7342 .byte 0x4d
   1F7F 49                 7343 .byte 0x49
   1F80 54                 7344 .byte 0x54
   1F81 29                 7345 .byte 0x29
                           7346 
   1F82 06 00              7347 	.word ( . - W118_Name ) + 0 
   1F84 16 00              7348 	.word W118_CFA - W117_CFA
   1F86                    7349 W118_CFA:
   1F86 00 00              7350 	.word W118_CFA - .		; (EMIT)
   1F88                    7351 W118_PFA:
   1F88 21 5A 02           7352 	ld hl,#MSE		; MSE
   1F8B 22 35 01           7353 	ld (StupidR0),hl
   1F8E 2A 35 01           7354 	ld hl,(StupidR0)		; PC!
   1F91 E9                 7355 	jp (hl)
                           7356 ; 	EMIT                M: ( Character -> )
                           7357 ; 	                    R: ( -> )
                           7358 ; 
                           7359 ; 	Waits for the console to become ready then displays the character
                           7360 ; at the top of the math stack.
                           7361 
                           7362 
                           7363 ; ----	EMIT -- word # 44
                           7364 
   1F92                    7365 W44_Name:
                           7366 
                           7367 	; stringengize( EMIT )
   1F92 45                 7368 .byte 0x45
   1F93 4D                 7369 .byte 0x4d
   1F94 49                 7370 .byte 0x49
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 135.
Hexidecimal [16-Bits]



   1F95 54                 7371 .byte 0x54
                           7372 
   1F96 04 00              7373 	.word ( . - W44_Name ) + 0 
   1F98 14 00              7374 	.word W44_CFA - W118_CFA
   1F9A                    7375 W44_CFA:
   1F9A B8 E3              7376 	.word W2_CFA - .		; (:)
   1F9C                    7377 W44_PFA:
   1F9C                    7378 W44_0:
   1F9C D4 FF              7379 	.word W117_CFA - .		; ?EMIT
   1F9E 7C E5              7380 	.word W7_CFA - .		; (0BRANCH)
   1FA0 FC FF              7381 	.word W44_0 - .
   1FA2 E4 FF              7382 	.word W118_CFA - .		; (EMIT)
   1FA4 24 E4              7383 	.word W3_CFA - .		; (;)
                           7384 ; 	?KEY              M: ( -> Flag )
                           7385 ; 	                  R: ( -> )
                           7386 ; 
                           7387 ; 	If the console has received a character, a non-zero flag is
                           7388 ; 	pushed onto the math sack. Otherwise, a zero flag is pushed.
                           7389 ; 	The work is actually done by machine code at label MSQK.
                           7390 
                           7391 
                           7392 ; ----	?KEY -- word # 52
                           7393 
   1FA6                    7394 W52_Name:
                           7395 
                           7396 	; stringengize( ?KEY )
   1FA6 3F                 7397 .byte 0x3f
   1FA7 4B                 7398 .byte 0x4b
   1FA8 45                 7399 .byte 0x45
   1FA9 59                 7400 .byte 0x59
                           7401 
   1FAA 04 00              7402 	.word ( . - W52_Name ) + 0 
   1FAC 14 00              7403 	.word W52_CFA - W44_CFA
   1FAE                    7404 W52_CFA:
   1FAE 00 00              7405 	.word W52_CFA - .		; ?KEY
   1FB0                    7406 W52_PFA:
   1FB0 21 27 02           7407 	ld hl,#MSQK		; MSQK
   1FB3 22 35 01           7408 	ld (StupidR0),hl
   1FB6 2A 35 01           7409 	ld hl,(StupidR0)		; PC!
   1FB9 E9                 7410 	jp (hl)
                           7411 ; (KEY)               M: ( -> Character )
                           7412 ; 
                           7413 ; 	Reads a character from the console and pushes it onto the
                           7414 ; 	math stack. It is assumed the console is ready to supply a
                           7415 ; 	character. Handled by machine code at label MSK.
                           7416 
                           7417 
                           7418 ; ----	(KEY) -- word # 119
                           7419 
   1FBA                    7420 W119_Name:
                           7421 
                           7422 	; stringengize( (KEY) )
   1FBA 28                 7423 .byte 0x28
   1FBB 4B                 7424 .byte 0x4b
   1FBC 45                 7425 .byte 0x45
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 136.
Hexidecimal [16-Bits]



   1FBD 59                 7426 .byte 0x59
   1FBE 29                 7427 .byte 0x29
                           7428 
   1FBF 05 00              7429 	.word ( . - W119_Name ) + 0 
   1FC1 15 00              7430 	.word W119_CFA - W52_CFA
   1FC3                    7431 W119_CFA:
   1FC3 00 00              7432 	.word W119_CFA - .		; (KEY)
   1FC5                    7433 W119_PFA:
   1FC5 21 38 02           7434 	ld hl,#MSK		; MSK
   1FC8 22 35 01           7435 	ld (StupidR0),hl
   1FCB 2A 35 01           7436 	ld hl,(StupidR0)		; PC!
   1FCE E9                 7437 	jp (hl)
                           7438 ; 	KEY                 M: ( -> Character )
                           7439 ; 	                    R: ( -> )
                           7440 ; 
                           7441 ; 	Waits for a character to become available at the console and
                           7442 ; 	then fetches it.
                           7443 
                           7444 
                           7445 ; ----	KEY -- word # 59
                           7446 
   1FCF                    7447 W59_Name:
                           7448 
                           7449 	; stringengize( KEY )
   1FCF 4B                 7450 .byte 0x4b
   1FD0 45                 7451 .byte 0x45
   1FD1 59                 7452 .byte 0x59
                           7453 
   1FD2 03 00              7454 	.word ( . - W59_Name ) + 0 
   1FD4 13 00              7455 	.word W59_CFA - W119_CFA
   1FD6                    7456 W59_CFA:
   1FD6 7C E3              7457 	.word W2_CFA - .		; (:)
   1FD8                    7458 W59_PFA:
   1FD8                    7459 W59_0:
   1FD8 D6 FF              7460 	.word W52_CFA - .		; ?KEY
   1FDA 40 E5              7461 	.word W7_CFA - .		; (0BRANCH)
   1FDC FC FF              7462 	.word W59_0 - .
   1FDE E5 FF              7463 	.word W119_CFA - .		; (KEY)
   1FE0 51 F1              7464 	.word W37_CFA - .		; (LIT)
   1FE2 7F 00              7465 	.word 0X7F
   1FE4 2C EE              7466 	.word W31_CFA - .		; AND
   1FE6 E2 E3              7467 	.word W3_CFA - .		; (;)
                           7468 ; 	BYE			Special!
                           7469 ; 
                           7470 ; 	Exits to the operating system.
                           7471 
                           7472 
                           7473 ; ----	BYE -- word # 120
                           7474 
   1FE8                    7475 W120_Name:
                           7476 
                           7477 	; stringengize( BYE )
   1FE8 42                 7478 .byte 0x42
   1FE9 59                 7479 .byte 0x59
   1FEA 45                 7480 .byte 0x45
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 137.
Hexidecimal [16-Bits]



                           7481 
   1FEB 03 00              7482 	.word ( . - W120_Name ) + 0 
   1FED 19 00              7483 	.word W120_CFA - W59_CFA
   1FEF                    7484 W120_CFA:
   1FEF 00 00              7485 	.word W120_CFA - .		; BYE
   1FF1                    7486 W120_PFA:
   1FF1 21 69 02           7487 	ld hl,#MSBYE		; MSBYE
   1FF4 22 35 01           7488 	ld (StupidR0),hl
   1FF7 2A 35 01           7489 	ld hl,(StupidR0)		; PC!
   1FFA E9                 7490 	jp (hl)
                           7491 ; 	(LASTWORD)              M: ( -> )
                           7492 ; 	                        R: ( -> )
                           7493 ; 
                           7494 ; 	Doesn't do anything, but lets us find the last word in the
                           7495 ; 	dictionary so we can initialize InitialLAST.
                           7496 
                           7497 
                           7498 ; ----	(LASTWORD) -- word # 1001
                           7499 
   1FFB                    7500 W1001_Name:
                           7501 
                           7502 	; stringengize( (LASTWORD) )
   1FFB 28                 7503 .byte 0x28
   1FFC 4C                 7504 .byte 0x4c
   1FFD 41                 7505 .byte 0x41
   1FFE 53                 7506 .byte 0x53
   1FFF 54                 7507 .byte 0x54
   2000 57                 7508 .byte 0x57
   2001 4F                 7509 .byte 0x4f
   2002 52                 7510 .byte 0x52
   2003 44                 7511 .byte 0x44
   2004 29                 7512 .byte 0x29
                           7513 
   2005 0A 00              7514 	.word ( . - W1001_Name ) + 0 
   2007 1A 00              7515 	.word W1001_CFA - W120_CFA
   2009                    7516 W1001_CFA:
   2009 49 E3              7517 	.word W2_CFA - .		; (:)
   200B                    7518 W1001_PFA:
   200B BD E3              7519 	.word W3_CFA - .		; (;)
   200D                    7520 RamEnd:
                           7521 
                           7522 
                           7523 ; --------- DUMP OF QDL SYMBOL TABLE ----------
                           7524 ;
                           7525 ;
                           7526 ; (COLD) -> W1000
                           7527 ; (LASTWORD) -> W1001
                           7528 ; (NEXT) -> W0
                           7529 ; EXEC -> W1
                           7530 ; (:) -> W2
                           7531 ; (;) -> W3
                           7532 ; (CONSTANT) -> W4
                           7533 ; (VAR) -> W5
                           7534 ; (BRANCH) -> W6
                           7535 ; (0BRANCH) -> W7
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 138.
Hexidecimal [16-Bits]



                           7536 ; ($) -> W8
                           7537 ; @ -> W9
                           7538 ; B@ -> W10
                           7539 ; W@ -> W11
                           7540 ; CVTW@ -> W12
                           7541 ; ! -> W13
                           7542 ; B! -> W14
                           7543 ; W! -> W15
                           7544 ; ++ -> W16
                           7545 ; DUP -> W17
                           7546 ; 1 -> W18
                           7547 ; + -> W19
                           7548 ; SWAP -> W20
                           7549 ; DROP -> W21
                           7550 ; >R -> W22
                           7551 ; <R -> W23
                           7552 ; R -> W24
                           7553 ; RP! -> W25
                           7554 ; OVER -> W26
                           7555 ; MP! -> W27
                           7556 ; MP@ -> W28
                           7557 ; - -> W29
                           7558 ; NEG -> W30
                           7559 ; AND -> W31
                           7560 ; OR -> W32
                           7561 ; NOT -> W33
                           7562 ; << -> W34
                           7563 ; >> -> W35
                           7564 ; 0< -> W36
                           7565 ; (LIT) -> W37
                           7566 ; < -> W38
                           7567 ; > -> W39
                           7568 ; 0= -> W40
                           7569 ; 0 -> W41
                           7570 ; = -> W42
                           7571 ; .NYBBLE -> W43
                           7572 ; EMIT -> W44
                           7573 ; .NYBBLES -> W45
                           7574 ; (DO) -> W46
                           7575 ; (LOOP) -> W47
                           7576 ; . -> W48
                           7577 ; TYPE -> W49
                           7578 ; COUNT -> W50
                           7579 ; ?ABORT -> W51
                           7580 ; ?KEY -> W52
                           7581 ; ABORT -> W53
                           7582 ; CR -> W54
                           7583 ; NL -> W55
                           7584 ; INBUF -> W56
                           7585 ; IN -> W57
                           7586 ; GETLINE -> W58
                           7587 ; KEY -> W59
                           7588 ; ISCONTROL -> W60
                           7589 ; NEXTCHAR -> W61
                           7590 ; TOKEN -> W62
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 139.
Hexidecimal [16-Bits]



                           7591 ; $= -> W63
                           7592 ; LAST -> W64
                           7593 ; ID>$ -> W65
                           7594 ; PREV -> W66
                           7595 ; VLIST -> W67
                           7596 ; FIND -> W68
                           7597 ; DIGITMAP -> W69
                           7598 ; ISDIGIT -> W70
                           7599 ; >NYBBLE -> W71
                           7600 ; >NYBBLES -> W72
                           7601 ; ISNUMBER -> W73
                           7602 ; PROMPT -> W74
                           7603 ; INTERPRET -> W75
                           7604 ; (+LOOP) -> W76
                           7605 ; (DP@) -> W77
                           7606 ; (LAST@) -> W78
                           7607 ; IDMSG1 -> W79
                           7608 ; IDMSG2 -> W80
                           7609 ; IDMSG3 -> W81
                           7610 ; IDENTIFY -> W82
                           7611 ; DP -> W83
                           7612 ; (OLIT) -> W84
                           7613 ; O@ -> W85
                           7614 ; O! -> W86
                           7615 ; B, -> W87
                           7616 ; W, -> W88
                           7617 ; , -> W89
                           7618 ; O, -> W90
                           7619 ; $, -> W91
                           7620 ; ALLOT -> W92
                           7621 ; CREATE -> W93
                           7622 ; NAME? -> W94
                           7623 ; LEN? -> W95
                           7624 ; VARIABLE -> W96
                           7625 ; CONSTANT -> W97
                           7626 ; CODE -> W98
                           7627 ; $ -> W99
                           7628 ; :DONE -> W100
                           7629 ; :DP -> W101
                           7630 ; :LAST -> W102
                           7631 ; :MP -> W103
                           7632 ; ; -> W104
                           7633 ; :ABORT -> W105
                           7634 ; : -> W106
                           7635 ; NEST? -> W107
                           7636 ; IMMEDIATE -> W108
                           7637 ; DO -> W109
                           7638 ; LOOP -> W110
                           7639 ; +LOOP -> W111
                           7640 ; REPEAT -> W112
                           7641 ; UNTIL -> W113
                           7642 ; IF -> W114
                           7643 ; ELSE -> W115
                           7644 ; ENDIF -> W116
                           7645 ; ?EMIT -> W117
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 140.
Hexidecimal [16-Bits]



                           7646 ; (EMIT) -> W118
                           7647 ; (KEY) -> W119
                           7648 ; BYE -> W120
ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 141.
Hexidecimal [16-Bits]

Symbol Table

    .__.ABS.                                                =   0000 G
  1 Breakpoint                                                  012A R
  1 ConIn                                                       012F R
  1 ConOut                                                      0132 R
  1 ConSt                                                       012C R
  1 MSBYE                                                       0269 R
  1 MSE                                                         025A R
  1 MSK                                                         0238 R
  1 MSQE                                                        024A R
  1 MSQK                                                        0227 R
  1 MathStackBottom                                             0145 R
  1 Next                                                        0278 R
  1 Next_A                                                      02BE R
  1 RamEnd                                                      200D R
  1 Reset                                                       0100 R
  1 ReturnStackBottom                                           01C7 R
  1 StupidCFA                                                   013D R
  1 StupidCFAHi                                             =   013E R
  1 StupidCFALo                                             =   013D R
  1 StupidElseGo0                                               01D1 R
  1 StupidElseGoBranch                                          01DF R
    StupidHiOffset                                          =   0001 
  1 StupidIP                                                    013F R
  1 StupidIPHi                                              =   0140 R
  1 StupidIPLo                                              =   013F R
  1 StupidInitialDP                                             01C7 R
  1 StupidInitialLAST                                           01C9 R
  1 StupidInitialMP                                             01CF R
  1 StupidInitialRP                                             01CD R
  1 StupidLessGo1                                               01E4 R
  1 StupidLessGo1Branch                                         01F7 R
    StupidLoOffset                                          =   0000 
  1 StupidMP                                                    0141 R
  1 StupidMPHi                                              =   0142 R
  1 StupidMPLo                                              =   0141 R
  1 StupidNEXT                                                  01CB R
  1 StupidR0                                                    0135 R
  1 StupidR0Hi                                              =   0136 R
  1 StupidR0Lo                                              =   0135 R
  1 StupidR1                                                    0137 R
  1 StupidR1Hi                                              =   0138 R
  1 StupidR1Lo                                              =   0137 R
  1 StupidR2                                                    0139 R
  1 StupidR2Hi                                              =   013A R
  1 StupidR2Lo                                              =   0139 R
  1 StupidR3                                                    013B R
  1 StupidR3Hi                                              =   013C R
  1 StupidR3Lo                                              =   013B R
  1 StupidRP                                                    0143 R
  1 StupidRPHi                                              =   0144 R
  1 StupidRPLo                                              =   0143 R
  1 StupidRamBase                                               026C R
  1 StupidShiftLeft1                                            01FD R
  1 StupidShiftLeft1Exit                                        020F R
  1 StupidShiftLeft1Loop                                        0207 R
  1 StupidShiftRight1                                           0210 R
  1 StupidShiftRight1Exit                                       0226 R
  1 StupidShiftRight1Loop                                       021A R
  1 W0_CFA                                                      0276 R
  1 W0_Name                                                     026C R
  1 W0_PFA                                                      0278 R
  1 W1000_CFA                                                   1A5A R
  1 W1000_Name                                                  1A50 R
  1 W1000_PFA                                                   1A5C R
  1 W1001_CFA                                                   2009 R
  1 W1001_Name                                                  1FFB R
  1 W1001_PFA                                                   200B R
  1 W100_CFA                                                    1CF6 R
  1 W100_Name                                                   1CED R
  1 W100_PFA                                                    1CF8 R
  1 W101_CFA                                                    1D01 R
  1 W101_Name                                                   1CFA R
  1 W101_PFA                                                    1D03 R
  1 W102_CFA                                                    1D0E R
  1 W102_Name                                                   1D05 R
  1 W102_PFA                                                    1D10 R
  1 W103_CFA                                                    1D19 R
  1 W103_Name                                                   1D12 R
  1 W103_PFA                                                    1D1B R
  1 W104_CFA                                                    1D22 R
  1 W104_Name                                                   1D1D R
  1 W104_PFA                                                    1D24 R
  1 W105_CFA                                                    1D3C R
  1 W105_Name                                                   1D32 R
  1 W105_PFA                                                    1D3E R
  1 W106_CFA                                                    1D57 R
  1 W106_Name                                                   1D52 R
  1 W106_PFA                                                    1D59 R
  1 W106_a                                                      1D59 R
  1 W106_b                                                      1D7D R
  1 W106_c                                                      1D85 R
  1 W106_d                                                      1D8D R
  1 W106_e                                                      1DA9 R
  1 W106_f                                                      1DB3 R
  1 W106_g                                                      1DBF R
  1 W106_h                                                      1DCD R
  1 W106_i                                                      1DD7 R
  1 W106_j                                                      1DDF R
  1 W106_k                                                      1DED R
  1 W106_l                                                      1DF7 R
  1 W106_z                                                      1DFD R
  1 W107_Begin                                                  1E0B R
  1 W107_CFA                                                    1E08 R
  1 W107_End                                                    1E13 R
  1 W107_Name                                                   1DFF R
  1 W107_PFA                                                    1E0A R
  1 W108_CFA                                                    1E20 R
  1 W108_Name                                                   1E13 R
  1 W108_PFA                                                    1E22 R
  1 W109_CFA                                                    1E42 R
  1 W109_Name                                                   1E3C R
  1 W109_PFA                                                    1E44 R
  1 W10_CFA                                                     069D R
  1 W10_Name                                                    0697 R
  1 W10_PFA                                                     069F R
  1 W110_0                                                      1E7C R
  1 W110_1                                                      1E7E R
  1 W110_CFA                                                    1E5A R
  1 W110_Name                                                   1E52 R
  1 W110_PFA                                                    1E5C R
  1 W111_0                                                      1EAB R
  1 W111_1                                                      1EAD R
  1 W111_CFA                                                    1E89 R
  1 W111_Name                                                   1E80 R
  1 W111_PFA                                                    1E8B R
  1 W112_CFA                                                    1EB9 R
  1 W112_Name                                                   1EAF R
  1 W112_PFA                                                    1EBB R
  1 W113_0                                                      1EF2 R
  1 W113_1                                                      1EF4 R
  1 W113_CFA                                                    1ECE R
  1 W113_Name                                                   1EC5 R
  1 W113_PFA                                                    1ED0 R
  1 W114_CFA                                                    1EFC R
  1 W114_Name                                                   1EF6 R
  1 W114_PFA                                                    1EFE R
  1 W115_CFA                                                    1F1A R
  1 W115_Name                                                   1F12 R
  1 W115_PFA                                                    1F1C R
  1 W116_0                                                      1F5D R
  1 W116_1                                                      1F65 R
  1 W116_CFA                                                    1F3F R
  1 W116_Name                                                   1F36 R
  1 W116_PFA                                                    1F41 R
  1 W117_CFA                                                    1F70 R
  1 W117_Name                                                   1F67 R
  1 W117_PFA                                                    1F72 R
  1 W118_CFA                                                    1F86 R
  1 W118_Name                                                   1F7C R
  1 W118_PFA                                                    1F88 R
  1 W119_CFA                                                    1FC3 R
  1 W119_Name                                                   1FBA R
  1 W119_PFA                                                    1FC5 R
  1 W11_CFA                                                     06DB R
  1 W11_Name                                                    06D5 R
  1 W11_PFA                                                     06DD R
  1 W120_CFA                                                    1FEF R
  1 W120_Name                                                   1FE8 R
  1 W120_PFA                                                    1FF1 R
  1 W12_CFA                                                     071E R
  1 W12_Name                                                    0715 R
  1 W12_PFA                                                     0720 R
  1 W13_CFA                                                     075D R
  1 W13_Name                                                    0758 R
  1 W13_PFA                                                     075F R
  1 W14_CFA                                                     0802 R
  1 W14_Name                                                    07FC R
  1 W14_PFA                                                     0804 R
  1 W15_CFA                                                     08A5 R
  1 W15_Name                                                    089F R
  1 W15_PFA                                                     08A7 R
  1 W16_CFA                                                     094A R
  1 W16_Name                                                    0944 R
  1 W16_PFA                                                     094C R
  1 W17_CFA                                                     0961 R
  1 W17_Name                                                    095A R
  1 W17_PFA                                                     0963 R
  1 W18_CFA                                                     11A7 R
  1 W18_Name                                                    11A2 R
  1 W18_PFA                                                     11A9 R
  1 W19_CFA                                                     0D6A R
  1 W19_Name                                                    0D65 R
  1 W19_PFA                                                     0D6C R
  1 W1_CFA                                                      02FE R
  1 W1_Name                                                     02F6 R
  1 W1_PFA                                                      0300 R
  1 W20_CFA                                                     09B4 R
  1 W20_Name                                                    09AC R
  1 W20_PFA                                                     09B6 R
  1 W21_CFA                                                     0A54 R
  1 W21_Name                                                    0A4C R
  1 W21_PFA                                                     0A56 R
  1 W22_CFA                                                     0A96 R
  1 W22_Name                                                    0A90 R
  1 W22_PFA                                                     0A98 R
  1 W23_CFA                                                     0B2A R
  1 W23_Name                                                    0B24 R
  1 W23_PFA                                                     0B2C R
  1 W24_CFA                                                     0B97 R
  1 W24_Name                                                    0B92 R
  1 W24_PFA                                                     0B99 R
  1 W25_CFA                                                     0BE9 R
  1 W25_Name                                                    0BE2 R
  1 W25_PFA                                                     0BEB R
  1 W26_CFA                                                     0C09 R
  1 W26_Name                                                    0C01 R
  1 W26_PFA                                                     0C0B R
  1 W27_CFA                                                     0C1C R
  1 W27_Name                                                    0C15 R
  1 W27_PFA                                                     0C1E R
  1 W28_CFA                                                     0C3B R
  1 W28_Name                                                    0C34 R
  1 W28_PFA                                                     0C3D R
  1 W29_CFA                                                     0C7F R
  1 W29_Name                                                    0C7A R
  1 W29_PFA                                                     0C81 R
  1 W2_CFA                                                      0352 R
  1 W2_Name                                                     034B R
  1 W2_PFA                                                      0354 R
  1 W30_CFA                                                     0D2A R
  1 W30_Name                                                    0D23 R
  1 W30_PFA                                                     0D2C R
  1 W31_CFA                                                     0E10 R
  1 W31_Name                                                    0E09 R
  1 W31_PFA                                                     0E12 R
  1 W32_CFA                                                     0EBA R
  1 W32_Name                                                    0EB4 R
  1 W32_PFA                                                     0EBC R
  1 W33_CFA                                                     0F65 R
  1 W33_Name                                                    0F5E R
  1 W33_PFA                                                     0F67 R
  1 W34_CFA                                                     0FA5 R
  1 W34_Name                                                    0F9F R
  1 W34_PFA                                                     0FA7 R
  1 W35_CFA                                                     1042 R
  1 W35_Name                                                    103C R
  1 W35_PFA                                                     1044 R
  1 W36_CFA                                                     10DF R
  1 W36_Name                                                    10D9 R
  1 W36_PFA                                                     10E1 R
  1 W37_CFA                                                     1131 R
  1 W37_Name                                                    1128 R
  1 W37_PFA                                                     1133 R
  1 W38_CFA                                                     10EE R
  1 W38_Name                                                    10E9 R
  1 W38_PFA                                                     10F0 R
  1 W39_CFA                                                     10FB R
  1 W39_Name                                                    10F6 R
  1 W39_PFA                                                     10FD R
  1 W3_CFA                                                      03C8 R
  1 W3_Name                                                     03C1 R
  1 W3_PFA                                                      03CA R
  1 W40_0                                                       1117 R
  1 W40_1                                                       1119 R
  1 W40_CFA                                                     110B R
  1 W40_Name                                                    1105 R
  1 W40_PFA                                                     110D R
  1 W41_CFA                                                     119E R
  1 W41_Name                                                    1199 R
  1 W41_PFA                                                     11A0 R
  1 W42_CFA                                                     1120 R
  1 W42_Name                                                    111B R
  1 W42_PFA                                                     1122 R
  1 W43_0                                                       11DE R
  1 W43_CFA                                                     11B6 R
  1 W43_Name                                                    11AB R
  1 W43_PFA                                                     11B8 R
  1 W44_0                                                       1F9C R
  1 W44_CFA                                                     1F9A R
  1 W44_Name                                                    1F92 R
  1 W44_PFA                                                     1F9C R
  1 W45_0                                                       120A R
  1 W45_CFA                                                     11EE R
  1 W45_Name                                                    11E2 R
  1 W45_PFA                                                     11F0 R
  1 W46_CFA                                                     1933 R
  1 W46_Name                                                    192B R
  1 W46_PFA                                                     1935 R
  1 W47_CFA                                                     175C R
  1 W47_Name                                                    1752 R
  1 W47_PFA                                                     175E R
  1 W48_CFA                                                     121F R
  1 W48_Name                                                    121A R
  1 W48_PFA                                                     1221 R
  1 W49_0                                                       123F R
  1 W49_CFA                                                     1237 R
  1 W49_Name                                                    122F R
  1 W49_PFA                                                     1239 R
  1 W4_CFA                                                      0417 R
  1 W4_Name                                                     0409 R
  1 W4_PFA                                                      0419 R
  1 W50_CFA                                                     125C R
  1 W50_Name                                                    1253 R
  1 W50_PFA                                                     125E R
  1 W51_0                                                       1280 R
  1 W51_CFA                                                     1276 R
  1 W51_Name                                                    126C R
  1 W51_PFA                                                     1278 R
  1 W52_CFA                                                     1FAE R
  1 W52_Name                                                    1FA6 R
  1 W52_PFA                                                     1FB0 R
  1 W53_CFA                                                     1A7B R
  1 W53_Name                                                    1A72 R
  1 W53_PFA                                                     1A7D R
  1 W54_CFA                                                     1288 R
  1 W54_Name                                                    1282 R
  1 W54_PFA                                                     128A R
  1 W55_CFA                                                     1298 R
  1 W55_Name                                                    1292 R
  1 W55_PFA                                                     129A R
  1 W56_CFA                                                     12AD R
  1 W56_Name                                                    12A4 R
  1 W56_PFA                                                     12AF R
  1 W57_CFA                                                     1306 R
  1 W57_Name                                                    1300 R
  1 W57_PFA                                                     1308 R
  1 W58_CFA                                                     1315 R
  1 W58_Name                                                    130A R
  1 W58_PFA                                                     1317 R
  1 W58_a                                                       1317 R
  1 W58_b                                                       131F R
  1 W58_c                                                       1327 R
  1 W58_d                                                       1335 R
  1 W58_e                                                       1355 R
  1 W58_f                                                       135F R
  1 W58_g                                                       1365 R
  1 W58_h                                                       1371 R
  1 W58_i                                                       137D R
  1 W58_k                                                       138B R
  1 W58_l                                                       1393 R
  1 W58_m                                                       139F R
  1 W58_n                                                       13AB R
  1 W58_o                                                       13B7 R
  1 W58_p                                                       13E1 R
  1 W58_q                                                       13E7 R
  1 W58_r                                                       13E9 R
  1 W58_z                                                       1409 R
  1 W59_0                                                       1FD8 R
  1 W59_CFA                                                     1FD6 R
  1 W59_Name                                                    1FCF R
  1 W59_PFA                                                     1FD8 R
  1 W5_CFA                                                      047C R
  1 W5_Name                                                     0473 R
  1 W5_PFA                                                      047E R
  1 W60_CFA                                                     1418 R
  1 W60_Name                                                    140B R
  1 W60_PFA                                                     141A R
  1 W60_a                                                       141A R
  1 W60_b                                                       1426 R
  1 W60_c                                                       142C R
  1 W60_z                                                       1434 R
  1 W61_0                                                       1458 R
  1 W61_CFA                                                     1442 R
  1 W61_Name                                                    1436 R
  1 W61_PFA                                                     1444 R
  1 W62_CFA                                                     1463 R
  1 W62_Name                                                    145A R
  1 W62_PFA                                                     1465 R
  1 W62_a                                                       1465 R
  1 W62_b                                                       146D R
  1 W62_c                                                       1475 R
  1 W62_d                                                       147F R
  1 W62_e                                                       1481 R
  1 W62_f                                                       1489 R
  1 W62_g                                                       1493 R
  1 W62_h                                                       149B R
  1 W62_i                                                       14A3 R
  1 W62_z                                                       14A5 R
  1 W63_CFA                                                     14AD R
  1 W63_Name                                                    14A7 R
  1 W63_PFA                                                     14AF R
  1 W63_a                                                       14AF R
  1 W63_b                                                       14BD R
  1 W63_c                                                       14C7 R
  1 W63_d                                                       14D9 R
  1 W63_e                                                       14F3 R
  1 W63_f                                                       1501 R
  1 W63_z                                                       1509 R
  1 W64_CFA                                                     1513 R
  1 W64_Name                                                    150B R
  1 W64_PFA                                                     1515 R
  1 W65_CFA                                                     151F R
  1 W65_Name                                                    1517 R
  1 W65_PFA                                                     1521 R
  1 W65_a                                                       1521 R
  1 W65_b                                                       1537 R
  1 W65_c                                                       1543 R
  1 W65_z                                                       154B R
  1 W66_CFA                                                     1555 R
  1 W66_Name                                                    154D R
  1 W66_PFA                                                     1557 R
  1 W66_a                                                       1557 R
  1 W66_b                                                       156B R
  1 W66_c                                                       1573 R
  1 W66_z                                                       157F R
  1 W67_CFA                                                     158A R
  1 W67_Name                                                    1581 R
  1 W67_PFA                                                     158C R
  1 W67_a                                                       158C R
  1 W67_b                                                       1590 R
  1 W67_c                                                       1596 R
  1 W67_d                                                       15A8 R
  1 W67_z                                                       15AA R
  1 W68_CFA                                                     15B4 R
  1 W68_Name                                                    15AC R
  1 W68_PFA                                                     15B6 R
  1 W68_a                                                       15B6 R
  1 W68_b                                                       15BC R
  1 W68_c                                                       15C2 R
  1 W68_d                                                       15D0 R
  1 W68_e                                                       15D6 R
  1 W68_z                                                       15E0 R
  1 W69_CFA                                                     15EE R
  1 W69_Name                                                    15E2 R
  1 W69_PFA                                                     15F0 R
  1 W6_CFA                                                      04D8 R
  1 W6_Name                                                     04CC R
  1 W6_PFA                                                      04DA R
  1 W70_CFA                                                     160B R
  1 W70_Name                                                    1600 R
  1 W70_PFA                                                     160D R
  1 W71_CFA                                                     163A R
  1 W71_Name                                                    162F R
  1 W71_PFA                                                     163C R
  1 W71_a                                                       163C R
  1 W71_b                                                       1648 R
  1 W71_c                                                       1650 R
  1 W71_d                                                       1652 R
  1 W71_z                                                       165C R
  1 W72_0                                                       1674 R
  1 W72_CFA                                                     166A R
  1 W72_Name                                                    165E R
  1 W72_PFA                                                     166C R
  1 W72_a                                                       166C R
  1 W72_b                                                       1674 R
  1 W72_c                                                       1684 R
  1 W72_d                                                       1694 R
  1 W72_e                                                       1696 R
  1 W72_f                                                       16A2 R
  1 W72_z                                                       16A6 R
  1 W73_0                                                       16BE R
  1 W73_CFA                                                     16B4 R
  1 W73_Name                                                    16A8 R
  1 W73_PFA                                                     16B6 R
  1 W73_a                                                       16B6 R
  1 W73_b                                                       16BE R
  1 W73_c                                                       16C8 R
  1 W73_d                                                       16D0 R
  1 W73_e                                                       16D8 R
  1 W73_z                                                       16E4 R
  1 W74_Begin                                                   16F3 R
  1 W74_CFA                                                     16F0 R
  1 W74_End                                                     16F9 R
  1 W74_Name                                                    16E6 R
  1 W74_PFA                                                     16F2 R
  1 W75_CFA                                                     1706 R
  1 W75_Name                                                    16F9 R
  1 W75_PFA                                                     1708 R
  1 W75_a                                                       1708 R
  1 W75_b                                                       170E R
  1 W75_c                                                       1716 R
  1 W75_d                                                       171E R
  1 W75_e                                                       172C R
  1 W75_f                                                       1734 R
  1 W75_g                                                       173A R
  1 W75_h                                                       1748 R
  1 W76_CFA                                                     182B R
  1 W76_Name                                                    1820 R
  1 W76_PFA                                                     182D R
  1 W77_CFA                                                     194E R
  1 W77_Name                                                    1945 R
  1 W77_PFA                                                     1950 R
  1 W78_CFA                                                     1998 R
  1 W78_Name                                                    198D R
  1 W78_PFA                                                     199A R
  1 W79_Begin                                                   19E4 R
  1 W79_CFA                                                     19E1 R
  1 W79_End                                                     19F8 R
  1 W79_Name                                                    19D7 R
  1 W79_PFA                                                     19E3 R
  1 W7_CFA                                                      051A R
  1 W7_Name                                                     050D R
  1 W7_PFA                                                      051C R
  1 W80_Begin                                                   1A05 R
  1 W80_CFA                                                     1A02 R
  1 W80_End                                                     1A0E R
  1 W80_Name                                                    19F8 R
  1 W80_PFA                                                     1A04 R
  1 W81_Begin                                                   1A1B R
  1 W81_CFA                                                     1A18 R
  1 W81_End                                                     1A20 R
  1 W81_Name                                                    1A0E R
  1 W81_PFA                                                     1A1A R
  1 W82_CFA                                                     1A2C R
  1 W82_Name                                                    1A20 R
  1 W82_PFA                                                     1A2E R
  1 W83_CFA                                                     1A8B R
  1 W83_Name                                                    1A85 R
  1 W83_PFA                                                     1A8D R
  1 W84_CFA                                                     1A99 R
  1 W84_Name                                                    1A8F R
  1 W84_PFA                                                     1A9B R
  1 W85_CFA                                                     1B18 R
  1 W85_Name                                                    1B12 R
  1 W85_PFA                                                     1B1A R
  1 W86_CFA                                                     1B28 R
  1 W86_Name                                                    1B22 R
  1 W86_PFA                                                     1B2A R
  1 W87_CFA                                                     1B3C R
  1 W87_Name                                                    1B36 R
  1 W87_PFA                                                     1B3E R
  1 W88_CFA                                                     1B50 R
  1 W88_Name                                                    1B4A R
  1 W88_PFA                                                     1B52 R
  1 W89_CFA                                                     1B6D R
  1 W89_Name                                                    1B68 R
  1 W89_PFA                                                     1B6F R
  1 W8_CFA                                                      0591 R
  1 W8_Name                                                     058A R
  1 W8_PFA                                                      0593 R
  1 W90_CFA                                                     1B8B R
  1 W90_Name                                                    1B85 R
  1 W90_PFA                                                     1B8D R
  1 W91_0                                                       1BAF R
  1 W91_CFA                                                     1B9D R
  1 W91_Name                                                    1B97 R
  1 W91_PFA                                                     1B9F R
  1 W91_a                                                       1B9F R
  1 W91_b                                                       1BAF R
  1 W91_c                                                       1BBD R
  1 W91_d                                                       1BC3 R
  1 W91_e                                                       1BCF R
  1 W91_f                                                       1BDB R
  1 W91_z                                                       1BE7 R
  1 W92_CFA                                                     1BF2 R
  1 W92_Name                                                    1BE9 R
  1 W92_PFA                                                     1BF4 R
  1 W93_CFA                                                     1C0A R
  1 W93_Name                                                    1C00 R
  1 W93_PFA                                                     1C0C R
  1 W93_a                                                       1C0C R
  1 W93_b                                                       1C14 R
  1 W93_c                                                       1C20 R
  1 W93_e                                                       1C38 R
  1 W93_f                                                       1C3E R
  1 W93_g                                                       1C44 R
  1 W93_z                                                       1C4C R
  1 W94_Begin                                                   1C5A R
  1 W94_CFA                                                     1C57 R
  1 W94_End                                                     1C63 R
  1 W94_Name                                                    1C4E R
  1 W94_PFA                                                     1C59 R
  1 W95_Begin                                                   1C6E R
  1 W95_CFA                                                     1C6B R
  1 W95_End                                                     1C76 R
  1 W95_Name                                                    1C63 R
  1 W95_PFA                                                     1C6D R
  1 W96_CFA                                                     1C82 R
  1 W96_Name                                                    1C76 R
  1 W96_PFA                                                     1C84 R
  1 W97_CFA                                                     1C9C R
  1 W97_Name                                                    1C90 R
  1 W97_PFA                                                     1C9E R
  1 W98_CFA                                                     1CB2 R
  1 W98_Name                                                    1CAA R
  1 W98_PFA                                                     1CB4 R
  1 W99_CFA                                                     1CC3 R
  1 W99_Name                                                    1CBE R
  1 W99_PFA                                                     1CC5 R
  1 W99_a                                                       1CD7 R
  1 W99_b                                                       1CE5 R
  1 W9_CFA                                                      065D R
  1 W9_Name                                                     0658 R
  1 W9_PFA                                                      065F R
  1 pBranch                                                     04DA R

ASxxxx Assembler V03.00  (Zilog Z80 / Hitachi HD64180), page 142.
Hexidecimal [16-Bits]

Area Table

   0 _CODE                                 size    0   flags   0
   1 CODE                                  size 200D   flags   C
